// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/resource_topology_node_desc.proto

#ifndef PROTOBUF_base_2fresource_5ftopology_5fnode_5fdesc_2eproto__INCLUDED
#define PROTOBUF_base_2fresource_5ftopology_5fnode_5fdesc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/resource_desc.pb.h"
// @@protoc_insertion_point(includes)

namespace firmament {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto();
void protobuf_InitDefaults_base_2fresource_5ftopology_5fnode_5fdesc_2eproto();
void protobuf_AssignDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto();
void protobuf_ShutdownFile_base_2fresource_5ftopology_5fnode_5fdesc_2eproto();

class ResourceTopologyNodeDescriptor;

// ===================================================================

class ResourceTopologyNodeDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firmament.ResourceTopologyNodeDescriptor) */ {
 public:
  ResourceTopologyNodeDescriptor();
  virtual ~ResourceTopologyNodeDescriptor();

  ResourceTopologyNodeDescriptor(const ResourceTopologyNodeDescriptor& from);

  inline ResourceTopologyNodeDescriptor& operator=(const ResourceTopologyNodeDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceTopologyNodeDescriptor& default_instance();

  static const ResourceTopologyNodeDescriptor* internal_default_instance();

  void Swap(ResourceTopologyNodeDescriptor* other);

  // implements Message ----------------------------------------------

  inline ResourceTopologyNodeDescriptor* New() const { return New(NULL); }

  ResourceTopologyNodeDescriptor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourceTopologyNodeDescriptor& from);
  void MergeFrom(const ResourceTopologyNodeDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourceTopologyNodeDescriptor* other);
  void UnsafeMergeFrom(const ResourceTopologyNodeDescriptor& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .firmament.ResourceDescriptor resource_desc = 1;
  bool has_resource_desc() const;
  void clear_resource_desc();
  static const int kResourceDescFieldNumber = 1;
  const ::firmament::ResourceDescriptor& resource_desc() const;
  ::firmament::ResourceDescriptor* mutable_resource_desc();
  ::firmament::ResourceDescriptor* release_resource_desc();
  void set_allocated_resource_desc(::firmament::ResourceDescriptor* resource_desc);

  // repeated .firmament.ResourceTopologyNodeDescriptor children = 2;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 2;
  const ::firmament::ResourceTopologyNodeDescriptor& children(int index) const;
  ::firmament::ResourceTopologyNodeDescriptor* mutable_children(int index);
  ::firmament::ResourceTopologyNodeDescriptor* add_children();
  ::google::protobuf::RepeatedPtrField< ::firmament::ResourceTopologyNodeDescriptor >*
      mutable_children();
  const ::google::protobuf::RepeatedPtrField< ::firmament::ResourceTopologyNodeDescriptor >&
      children() const;

  // optional string parent_id = 3;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 3;
  const ::std::string& parent_id() const;
  void set_parent_id(const ::std::string& value);
  void set_parent_id(const char* value);
  void set_parent_id(const char* value, size_t size);
  ::std::string* mutable_parent_id();
  ::std::string* release_parent_id();
  void set_allocated_parent_id(::std::string* parent_id);

  // @@protoc_insertion_point(class_scope:firmament.ResourceTopologyNodeDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::firmament::ResourceTopologyNodeDescriptor > children_;
  ::google::protobuf::internal::ArenaStringPtr parent_id_;
  ::firmament::ResourceDescriptor* resource_desc_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_base_2fresource_5ftopology_5fnode_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_base_2fresource_5ftopology_5fnode_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ResourceTopologyNodeDescriptor> ResourceTopologyNodeDescriptor_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceTopologyNodeDescriptor

// optional .firmament.ResourceDescriptor resource_desc = 1;
inline bool ResourceTopologyNodeDescriptor::has_resource_desc() const {
  return this != internal_default_instance() && resource_desc_ != NULL;
}
inline void ResourceTopologyNodeDescriptor::clear_resource_desc() {
  if (GetArenaNoVirtual() == NULL && resource_desc_ != NULL) delete resource_desc_;
  resource_desc_ = NULL;
}
inline const ::firmament::ResourceDescriptor& ResourceTopologyNodeDescriptor::resource_desc() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceTopologyNodeDescriptor.resource_desc)
  return resource_desc_ != NULL ? *resource_desc_
                         : *::firmament::ResourceDescriptor::internal_default_instance();
}
inline ::firmament::ResourceDescriptor* ResourceTopologyNodeDescriptor::mutable_resource_desc() {
  
  if (resource_desc_ == NULL) {
    resource_desc_ = new ::firmament::ResourceDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceTopologyNodeDescriptor.resource_desc)
  return resource_desc_;
}
inline ::firmament::ResourceDescriptor* ResourceTopologyNodeDescriptor::release_resource_desc() {
  // @@protoc_insertion_point(field_release:firmament.ResourceTopologyNodeDescriptor.resource_desc)
  
  ::firmament::ResourceDescriptor* temp = resource_desc_;
  resource_desc_ = NULL;
  return temp;
}
inline void ResourceTopologyNodeDescriptor::set_allocated_resource_desc(::firmament::ResourceDescriptor* resource_desc) {
  delete resource_desc_;
  resource_desc_ = resource_desc;
  if (resource_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceTopologyNodeDescriptor.resource_desc)
}

// repeated .firmament.ResourceTopologyNodeDescriptor children = 2;
inline int ResourceTopologyNodeDescriptor::children_size() const {
  return children_.size();
}
inline void ResourceTopologyNodeDescriptor::clear_children() {
  children_.Clear();
}
inline const ::firmament::ResourceTopologyNodeDescriptor& ResourceTopologyNodeDescriptor::children(int index) const {
  // @@protoc_insertion_point(field_get:firmament.ResourceTopologyNodeDescriptor.children)
  return children_.Get(index);
}
inline ::firmament::ResourceTopologyNodeDescriptor* ResourceTopologyNodeDescriptor::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.ResourceTopologyNodeDescriptor.children)
  return children_.Mutable(index);
}
inline ::firmament::ResourceTopologyNodeDescriptor* ResourceTopologyNodeDescriptor::add_children() {
  // @@protoc_insertion_point(field_add:firmament.ResourceTopologyNodeDescriptor.children)
  return children_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::firmament::ResourceTopologyNodeDescriptor >*
ResourceTopologyNodeDescriptor::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:firmament.ResourceTopologyNodeDescriptor.children)
  return &children_;
}
inline const ::google::protobuf::RepeatedPtrField< ::firmament::ResourceTopologyNodeDescriptor >&
ResourceTopologyNodeDescriptor::children() const {
  // @@protoc_insertion_point(field_list:firmament.ResourceTopologyNodeDescriptor.children)
  return children_;
}

// optional string parent_id = 3;
inline void ResourceTopologyNodeDescriptor::clear_parent_id() {
  parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceTopologyNodeDescriptor::parent_id() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceTopologyNodeDescriptor.parent_id)
  return parent_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceTopologyNodeDescriptor::set_parent_id(const ::std::string& value) {
  
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.ResourceTopologyNodeDescriptor.parent_id)
}
inline void ResourceTopologyNodeDescriptor::set_parent_id(const char* value) {
  
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.ResourceTopologyNodeDescriptor.parent_id)
}
inline void ResourceTopologyNodeDescriptor::set_parent_id(const char* value, size_t size) {
  
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.ResourceTopologyNodeDescriptor.parent_id)
}
inline ::std::string* ResourceTopologyNodeDescriptor::mutable_parent_id() {
  
  // @@protoc_insertion_point(field_mutable:firmament.ResourceTopologyNodeDescriptor.parent_id)
  return parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceTopologyNodeDescriptor::release_parent_id() {
  // @@protoc_insertion_point(field_release:firmament.ResourceTopologyNodeDescriptor.parent_id)
  
  return parent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceTopologyNodeDescriptor::set_allocated_parent_id(::std::string* parent_id) {
  if (parent_id != NULL) {
    
  } else {
    
  }
  parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_id);
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceTopologyNodeDescriptor.parent_id)
}

inline const ResourceTopologyNodeDescriptor* ResourceTopologyNodeDescriptor::internal_default_instance() {
  return &ResourceTopologyNodeDescriptor_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2fresource_5ftopology_5fnode_5fdesc_2eproto__INCLUDED
