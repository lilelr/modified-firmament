// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/task_desc.proto

#ifndef PROTOBUF_base_2ftask_5fdesc_2eproto__INCLUDED
#define PROTOBUF_base_2ftask_5fdesc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/label.pb.h"
#include "base/label_selector.pb.h"
#include "base/reference_desc.pb.h"
#include "base/resource_vector.pb.h"
#include "base/task_final_report.pb.h"
// @@protoc_insertion_point(includes)

namespace firmament {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_base_2ftask_5fdesc_2eproto();
void protobuf_InitDefaults_base_2ftask_5fdesc_2eproto();
void protobuf_AssignDesc_base_2ftask_5fdesc_2eproto();
void protobuf_ShutdownFile_base_2ftask_5fdesc_2eproto();

class TaskDescriptor;

enum TaskDescriptor_TaskState {
  TaskDescriptor_TaskState_CREATED = 0,
  TaskDescriptor_TaskState_BLOCKING = 1,
  TaskDescriptor_TaskState_RUNNABLE = 2,
  TaskDescriptor_TaskState_ASSIGNED = 3,
  TaskDescriptor_TaskState_RUNNING = 4,
  TaskDescriptor_TaskState_COMPLETED = 5,
  TaskDescriptor_TaskState_FAILED = 6,
  TaskDescriptor_TaskState_ABORTED = 7,
  TaskDescriptor_TaskState_DELEGATED = 8,
  TaskDescriptor_TaskState_UNKNOWN = 9,
  TaskDescriptor_TaskState_TaskDescriptor_TaskState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TaskDescriptor_TaskState_TaskDescriptor_TaskState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TaskDescriptor_TaskState_IsValid(int value);
const TaskDescriptor_TaskState TaskDescriptor_TaskState_TaskState_MIN = TaskDescriptor_TaskState_CREATED;
const TaskDescriptor_TaskState TaskDescriptor_TaskState_TaskState_MAX = TaskDescriptor_TaskState_UNKNOWN;
const int TaskDescriptor_TaskState_TaskState_ARRAYSIZE = TaskDescriptor_TaskState_TaskState_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskDescriptor_TaskState_descriptor();
inline const ::std::string& TaskDescriptor_TaskState_Name(TaskDescriptor_TaskState value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskDescriptor_TaskState_descriptor(), value);
}
inline bool TaskDescriptor_TaskState_Parse(
    const ::std::string& name, TaskDescriptor_TaskState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskDescriptor_TaskState>(
    TaskDescriptor_TaskState_descriptor(), name, value);
}
enum TaskDescriptor_TaskType {
  TaskDescriptor_TaskType_SHEEP = 0,
  TaskDescriptor_TaskType_RABBIT = 1,
  TaskDescriptor_TaskType_DEVIL = 2,
  TaskDescriptor_TaskType_TURTLE = 3,
  TaskDescriptor_TaskType_TaskDescriptor_TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TaskDescriptor_TaskType_TaskDescriptor_TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TaskDescriptor_TaskType_IsValid(int value);
const TaskDescriptor_TaskType TaskDescriptor_TaskType_TaskType_MIN = TaskDescriptor_TaskType_SHEEP;
const TaskDescriptor_TaskType TaskDescriptor_TaskType_TaskType_MAX = TaskDescriptor_TaskType_TURTLE;
const int TaskDescriptor_TaskType_TaskType_ARRAYSIZE = TaskDescriptor_TaskType_TaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskDescriptor_TaskType_descriptor();
inline const ::std::string& TaskDescriptor_TaskType_Name(TaskDescriptor_TaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskDescriptor_TaskType_descriptor(), value);
}
inline bool TaskDescriptor_TaskType_Parse(
    const ::std::string& name, TaskDescriptor_TaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskDescriptor_TaskType>(
    TaskDescriptor_TaskType_descriptor(), name, value);
}
// ===================================================================

class TaskDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firmament.TaskDescriptor) */ {
 public:
  TaskDescriptor();
  virtual ~TaskDescriptor();

  TaskDescriptor(const TaskDescriptor& from);

  inline TaskDescriptor& operator=(const TaskDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskDescriptor& default_instance();

  static const TaskDescriptor* internal_default_instance();

  void Swap(TaskDescriptor* other);

  // implements Message ----------------------------------------------

  inline TaskDescriptor* New() const { return New(NULL); }

  TaskDescriptor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskDescriptor& from);
  void MergeFrom(const TaskDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskDescriptor* other);
  void UnsafeMergeFrom(const TaskDescriptor& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TaskDescriptor_TaskState TaskState;
  static const TaskState CREATED =
    TaskDescriptor_TaskState_CREATED;
  static const TaskState BLOCKING =
    TaskDescriptor_TaskState_BLOCKING;
  static const TaskState RUNNABLE =
    TaskDescriptor_TaskState_RUNNABLE;
  static const TaskState ASSIGNED =
    TaskDescriptor_TaskState_ASSIGNED;
  static const TaskState RUNNING =
    TaskDescriptor_TaskState_RUNNING;
  static const TaskState COMPLETED =
    TaskDescriptor_TaskState_COMPLETED;
  static const TaskState FAILED =
    TaskDescriptor_TaskState_FAILED;
  static const TaskState ABORTED =
    TaskDescriptor_TaskState_ABORTED;
  static const TaskState DELEGATED =
    TaskDescriptor_TaskState_DELEGATED;
  static const TaskState UNKNOWN =
    TaskDescriptor_TaskState_UNKNOWN;
  static inline bool TaskState_IsValid(int value) {
    return TaskDescriptor_TaskState_IsValid(value);
  }
  static const TaskState TaskState_MIN =
    TaskDescriptor_TaskState_TaskState_MIN;
  static const TaskState TaskState_MAX =
    TaskDescriptor_TaskState_TaskState_MAX;
  static const int TaskState_ARRAYSIZE =
    TaskDescriptor_TaskState_TaskState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TaskState_descriptor() {
    return TaskDescriptor_TaskState_descriptor();
  }
  static inline const ::std::string& TaskState_Name(TaskState value) {
    return TaskDescriptor_TaskState_Name(value);
  }
  static inline bool TaskState_Parse(const ::std::string& name,
      TaskState* value) {
    return TaskDescriptor_TaskState_Parse(name, value);
  }

  typedef TaskDescriptor_TaskType TaskType;
  static const TaskType SHEEP =
    TaskDescriptor_TaskType_SHEEP;
  static const TaskType RABBIT =
    TaskDescriptor_TaskType_RABBIT;
  static const TaskType DEVIL =
    TaskDescriptor_TaskType_DEVIL;
  static const TaskType TURTLE =
    TaskDescriptor_TaskType_TURTLE;
  static inline bool TaskType_IsValid(int value) {
    return TaskDescriptor_TaskType_IsValid(value);
  }
  static const TaskType TaskType_MIN =
    TaskDescriptor_TaskType_TaskType_MIN;
  static const TaskType TaskType_MAX =
    TaskDescriptor_TaskType_TaskType_MAX;
  static const int TaskType_ARRAYSIZE =
    TaskDescriptor_TaskType_TaskType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TaskType_descriptor() {
    return TaskDescriptor_TaskType_descriptor();
  }
  static inline const ::std::string& TaskType_Name(TaskType value) {
    return TaskDescriptor_TaskType_Name(value);
  }
  static inline bool TaskType_Parse(const ::std::string& name,
      TaskType* value) {
    return TaskDescriptor_TaskType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint64 uid() const;
  void set_uid(::google::protobuf::uint64 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .firmament.TaskDescriptor.TaskState state = 3;
  void clear_state();
  static const int kStateFieldNumber = 3;
  ::firmament::TaskDescriptor_TaskState state() const;
  void set_state(::firmament::TaskDescriptor_TaskState value);

  // optional string job_id = 4;
  void clear_job_id();
  static const int kJobIdFieldNumber = 4;
  const ::std::string& job_id() const;
  void set_job_id(const ::std::string& value);
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  ::std::string* mutable_job_id();
  ::std::string* release_job_id();
  void set_allocated_job_id(::std::string* job_id);

  // optional uint64 index = 5;
  void clear_index();
  static const int kIndexFieldNumber = 5;
  ::google::protobuf::uint64 index() const;
  void set_index(::google::protobuf::uint64 value);

  // repeated .firmament.ReferenceDescriptor dependencies = 6;
  int dependencies_size() const;
  void clear_dependencies();
  static const int kDependenciesFieldNumber = 6;
  const ::firmament::ReferenceDescriptor& dependencies(int index) const;
  ::firmament::ReferenceDescriptor* mutable_dependencies(int index);
  ::firmament::ReferenceDescriptor* add_dependencies();
  ::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor >*
      mutable_dependencies();
  const ::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor >&
      dependencies() const;

  // repeated .firmament.ReferenceDescriptor outputs = 7;
  int outputs_size() const;
  void clear_outputs();
  static const int kOutputsFieldNumber = 7;
  const ::firmament::ReferenceDescriptor& outputs(int index) const;
  ::firmament::ReferenceDescriptor* mutable_outputs(int index);
  ::firmament::ReferenceDescriptor* add_outputs();
  ::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor >*
      mutable_outputs();
  const ::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor >&
      outputs() const;

  // optional string binary = 8;
  void clear_binary();
  static const int kBinaryFieldNumber = 8;
  const ::std::string& binary() const;
  void set_binary(const ::std::string& value);
  void set_binary(const char* value);
  void set_binary(const char* value, size_t size);
  ::std::string* mutable_binary();
  ::std::string* release_binary();
  void set_allocated_binary(::std::string* binary);

  // repeated string args = 9;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 9;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // repeated .firmament.TaskDescriptor spawned = 10;
  int spawned_size() const;
  void clear_spawned();
  static const int kSpawnedFieldNumber = 10;
  const ::firmament::TaskDescriptor& spawned(int index) const;
  ::firmament::TaskDescriptor* mutable_spawned(int index);
  ::firmament::TaskDescriptor* add_spawned();
  ::google::protobuf::RepeatedPtrField< ::firmament::TaskDescriptor >*
      mutable_spawned();
  const ::google::protobuf::RepeatedPtrField< ::firmament::TaskDescriptor >&
      spawned() const;

  // optional string scheduled_to_resource = 11;
  void clear_scheduled_to_resource();
  static const int kScheduledToResourceFieldNumber = 11;
  const ::std::string& scheduled_to_resource() const;
  void set_scheduled_to_resource(const ::std::string& value);
  void set_scheduled_to_resource(const char* value);
  void set_scheduled_to_resource(const char* value, size_t size);
  ::std::string* mutable_scheduled_to_resource();
  ::std::string* release_scheduled_to_resource();
  void set_allocated_scheduled_to_resource(::std::string* scheduled_to_resource);

  // optional string last_heartbeat_location = 12;
  void clear_last_heartbeat_location();
  static const int kLastHeartbeatLocationFieldNumber = 12;
  const ::std::string& last_heartbeat_location() const;
  void set_last_heartbeat_location(const ::std::string& value);
  void set_last_heartbeat_location(const char* value);
  void set_last_heartbeat_location(const char* value, size_t size);
  ::std::string* mutable_last_heartbeat_location();
  ::std::string* release_last_heartbeat_location();
  void set_allocated_last_heartbeat_location(::std::string* last_heartbeat_location);

  // optional uint64 last_heartbeat_time = 13;
  void clear_last_heartbeat_time();
  static const int kLastHeartbeatTimeFieldNumber = 13;
  ::google::protobuf::uint64 last_heartbeat_time() const;
  void set_last_heartbeat_time(::google::protobuf::uint64 value);

  // optional string delegated_to = 14;
  void clear_delegated_to();
  static const int kDelegatedToFieldNumber = 14;
  const ::std::string& delegated_to() const;
  void set_delegated_to(const ::std::string& value);
  void set_delegated_to(const char* value);
  void set_delegated_to(const char* value, size_t size);
  ::std::string* mutable_delegated_to();
  ::std::string* release_delegated_to();
  void set_allocated_delegated_to(::std::string* delegated_to);

  // optional string delegated_from = 15;
  void clear_delegated_from();
  static const int kDelegatedFromFieldNumber = 15;
  const ::std::string& delegated_from() const;
  void set_delegated_from(const ::std::string& value);
  void set_delegated_from(const char* value);
  void set_delegated_from(const char* value, size_t size);
  ::std::string* mutable_delegated_from();
  ::std::string* release_delegated_from();
  void set_allocated_delegated_from(::std::string* delegated_from);

  // optional uint64 submit_time = 16;
  void clear_submit_time();
  static const int kSubmitTimeFieldNumber = 16;
  ::google::protobuf::uint64 submit_time() const;
  void set_submit_time(::google::protobuf::uint64 value);

  // optional uint64 start_time = 17;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 17;
  ::google::protobuf::uint64 start_time() const;
  void set_start_time(::google::protobuf::uint64 value);

  // optional uint64 finish_time = 18;
  void clear_finish_time();
  static const int kFinishTimeFieldNumber = 18;
  ::google::protobuf::uint64 finish_time() const;
  void set_finish_time(::google::protobuf::uint64 value);

  // optional uint64 total_unscheduled_time = 19;
  void clear_total_unscheduled_time();
  static const int kTotalUnscheduledTimeFieldNumber = 19;
  ::google::protobuf::uint64 total_unscheduled_time() const;
  void set_total_unscheduled_time(::google::protobuf::uint64 value);

  // optional uint64 total_run_time = 20;
  void clear_total_run_time();
  static const int kTotalRunTimeFieldNumber = 20;
  ::google::protobuf::uint64 total_run_time() const;
  void set_total_run_time(::google::protobuf::uint64 value);

  // optional uint64 relative_deadline = 21;
  void clear_relative_deadline();
  static const int kRelativeDeadlineFieldNumber = 21;
  ::google::protobuf::uint64 relative_deadline() const;
  void set_relative_deadline(::google::protobuf::uint64 value);

  // optional uint64 absolute_deadline = 22;
  void clear_absolute_deadline();
  static const int kAbsoluteDeadlineFieldNumber = 22;
  ::google::protobuf::uint64 absolute_deadline() const;
  void set_absolute_deadline(::google::protobuf::uint64 value);

  // optional uint64 port = 23;
  void clear_port();
  static const int kPortFieldNumber = 23;
  ::google::protobuf::uint64 port() const;
  void set_port(::google::protobuf::uint64 value);

  // optional uint64 input_size = 24;
  void clear_input_size();
  static const int kInputSizeFieldNumber = 24;
  ::google::protobuf::uint64 input_size() const;
  void set_input_size(::google::protobuf::uint64 value);

  // optional bool inject_task_lib = 25;
  void clear_inject_task_lib();
  static const int kInjectTaskLibFieldNumber = 25;
  bool inject_task_lib() const;
  void set_inject_task_lib(bool value);

  // optional .firmament.ResourceVector resource_request = 26;
  bool has_resource_request() const;
  void clear_resource_request();
  static const int kResourceRequestFieldNumber = 26;
  const ::firmament::ResourceVector& resource_request() const;
  ::firmament::ResourceVector* mutable_resource_request();
  ::firmament::ResourceVector* release_resource_request();
  void set_allocated_resource_request(::firmament::ResourceVector* resource_request);

  // optional uint32 priority = 27;
  void clear_priority();
  static const int kPriorityFieldNumber = 27;
  ::google::protobuf::uint32 priority() const;
  void set_priority(::google::protobuf::uint32 value);

  // optional .firmament.TaskDescriptor.TaskType task_type = 28;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 28;
  ::firmament::TaskDescriptor_TaskType task_type() const;
  void set_task_type(::firmament::TaskDescriptor_TaskType value);

  // optional .firmament.TaskFinalReport final_report = 29;
  bool has_final_report() const;
  void clear_final_report();
  static const int kFinalReportFieldNumber = 29;
  const ::firmament::TaskFinalReport& final_report() const;
  ::firmament::TaskFinalReport* mutable_final_report();
  ::firmament::TaskFinalReport* release_final_report();
  void set_allocated_final_report(::firmament::TaskFinalReport* final_report);

  // optional uint64 trace_job_id = 30;
  void clear_trace_job_id();
  static const int kTraceJobIdFieldNumber = 30;
  ::google::protobuf::uint64 trace_job_id() const;
  void set_trace_job_id(::google::protobuf::uint64 value);

  // optional uint64 trace_task_id = 31;
  void clear_trace_task_id();
  static const int kTraceTaskIdFieldNumber = 31;
  ::google::protobuf::uint64 trace_task_id() const;
  void set_trace_task_id(::google::protobuf::uint64 value);

  // repeated .firmament.Label labels = 32;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 32;
  const ::firmament::Label& labels(int index) const;
  ::firmament::Label* mutable_labels(int index);
  ::firmament::Label* add_labels();
  ::google::protobuf::RepeatedPtrField< ::firmament::Label >*
      mutable_labels();
  const ::google::protobuf::RepeatedPtrField< ::firmament::Label >&
      labels() const;

  // repeated .firmament.LabelSelector label_selectors = 33;
  int label_selectors_size() const;
  void clear_label_selectors();
  static const int kLabelSelectorsFieldNumber = 33;
  const ::firmament::LabelSelector& label_selectors(int index) const;
  ::firmament::LabelSelector* mutable_label_selectors(int index);
  ::firmament::LabelSelector* add_label_selectors();
  ::google::protobuf::RepeatedPtrField< ::firmament::LabelSelector >*
      mutable_label_selectors();
  const ::google::protobuf::RepeatedPtrField< ::firmament::LabelSelector >&
      label_selectors() const;

  // @@protoc_insertion_point(class_scope:firmament.TaskDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor > dependencies_;
  ::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor > outputs_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::RepeatedPtrField< ::firmament::TaskDescriptor > spawned_;
  ::google::protobuf::RepeatedPtrField< ::firmament::Label > labels_;
  ::google::protobuf::RepeatedPtrField< ::firmament::LabelSelector > label_selectors_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr job_id_;
  ::google::protobuf::internal::ArenaStringPtr binary_;
  ::google::protobuf::internal::ArenaStringPtr scheduled_to_resource_;
  ::google::protobuf::internal::ArenaStringPtr last_heartbeat_location_;
  ::google::protobuf::internal::ArenaStringPtr delegated_to_;
  ::google::protobuf::internal::ArenaStringPtr delegated_from_;
  ::firmament::ResourceVector* resource_request_;
  ::firmament::TaskFinalReport* final_report_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 index_;
  ::google::protobuf::uint64 last_heartbeat_time_;
  int state_;
  bool inject_task_lib_;
  ::google::protobuf::uint64 submit_time_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint64 finish_time_;
  ::google::protobuf::uint64 total_unscheduled_time_;
  ::google::protobuf::uint64 total_run_time_;
  ::google::protobuf::uint64 relative_deadline_;
  ::google::protobuf::uint64 absolute_deadline_;
  ::google::protobuf::uint64 port_;
  ::google::protobuf::uint64 input_size_;
  ::google::protobuf::uint32 priority_;
  int task_type_;
  ::google::protobuf::uint64 trace_job_id_;
  ::google::protobuf::uint64 trace_task_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_base_2ftask_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_base_2ftask_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_base_2ftask_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_base_2ftask_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TaskDescriptor> TaskDescriptor_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskDescriptor

// optional uint64 uid = 1;
inline void TaskDescriptor::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::uid() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.uid)
  return uid_;
}
inline void TaskDescriptor::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.uid)
}

// optional string name = 2;
inline void TaskDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskDescriptor::name() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.name)
}
inline void TaskDescriptor::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.name)
}
inline void TaskDescriptor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.name)
}
inline ::std::string* TaskDescriptor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.name)
}

// optional .firmament.TaskDescriptor.TaskState state = 3;
inline void TaskDescriptor::clear_state() {
  state_ = 0;
}
inline ::firmament::TaskDescriptor_TaskState TaskDescriptor::state() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.state)
  return static_cast< ::firmament::TaskDescriptor_TaskState >(state_);
}
inline void TaskDescriptor::set_state(::firmament::TaskDescriptor_TaskState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.state)
}

// optional string job_id = 4;
inline void TaskDescriptor::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskDescriptor::job_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.job_id)
  return job_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.job_id)
}
inline void TaskDescriptor::set_job_id(const char* value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.job_id)
}
inline void TaskDescriptor::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.job_id)
}
inline ::std::string* TaskDescriptor::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskDescriptor::release_job_id() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_allocated_job_id(::std::string* job_id) {
  if (job_id != NULL) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.job_id)
}

// optional uint64 index = 5;
inline void TaskDescriptor::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::index() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.index)
  return index_;
}
inline void TaskDescriptor::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.index)
}

// repeated .firmament.ReferenceDescriptor dependencies = 6;
inline int TaskDescriptor::dependencies_size() const {
  return dependencies_.size();
}
inline void TaskDescriptor::clear_dependencies() {
  dependencies_.Clear();
}
inline const ::firmament::ReferenceDescriptor& TaskDescriptor::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.dependencies)
  return dependencies_.Get(index);
}
inline ::firmament::ReferenceDescriptor* TaskDescriptor::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.dependencies)
  return dependencies_.Mutable(index);
}
inline ::firmament::ReferenceDescriptor* TaskDescriptor::add_dependencies() {
  // @@protoc_insertion_point(field_add:firmament.TaskDescriptor.dependencies)
  return dependencies_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor >*
TaskDescriptor::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:firmament.TaskDescriptor.dependencies)
  return &dependencies_;
}
inline const ::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor >&
TaskDescriptor::dependencies() const {
  // @@protoc_insertion_point(field_list:firmament.TaskDescriptor.dependencies)
  return dependencies_;
}

// repeated .firmament.ReferenceDescriptor outputs = 7;
inline int TaskDescriptor::outputs_size() const {
  return outputs_.size();
}
inline void TaskDescriptor::clear_outputs() {
  outputs_.Clear();
}
inline const ::firmament::ReferenceDescriptor& TaskDescriptor::outputs(int index) const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.outputs)
  return outputs_.Get(index);
}
inline ::firmament::ReferenceDescriptor* TaskDescriptor::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.outputs)
  return outputs_.Mutable(index);
}
inline ::firmament::ReferenceDescriptor* TaskDescriptor::add_outputs() {
  // @@protoc_insertion_point(field_add:firmament.TaskDescriptor.outputs)
  return outputs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor >*
TaskDescriptor::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:firmament.TaskDescriptor.outputs)
  return &outputs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor >&
TaskDescriptor::outputs() const {
  // @@protoc_insertion_point(field_list:firmament.TaskDescriptor.outputs)
  return outputs_;
}

// optional string binary = 8;
inline void TaskDescriptor::clear_binary() {
  binary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskDescriptor::binary() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.binary)
  return binary_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_binary(const ::std::string& value) {
  
  binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.binary)
}
inline void TaskDescriptor::set_binary(const char* value) {
  
  binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.binary)
}
inline void TaskDescriptor::set_binary(const char* value, size_t size) {
  
  binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.binary)
}
inline ::std::string* TaskDescriptor::mutable_binary() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.binary)
  return binary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskDescriptor::release_binary() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.binary)
  
  return binary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_allocated_binary(::std::string* binary) {
  if (binary != NULL) {
    
  } else {
    
  }
  binary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.binary)
}

// repeated string args = 9;
inline int TaskDescriptor::args_size() const {
  return args_.size();
}
inline void TaskDescriptor::clear_args() {
  args_.Clear();
}
inline const ::std::string& TaskDescriptor::args(int index) const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.args)
  return args_.Get(index);
}
inline ::std::string* TaskDescriptor::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.args)
  return args_.Mutable(index);
}
inline void TaskDescriptor::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.args)
  args_.Mutable(index)->assign(value);
}
inline void TaskDescriptor::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.args)
}
inline void TaskDescriptor::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.args)
}
inline ::std::string* TaskDescriptor::add_args() {
  // @@protoc_insertion_point(field_add_mutable:firmament.TaskDescriptor.args)
  return args_.Add();
}
inline void TaskDescriptor::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:firmament.TaskDescriptor.args)
}
inline void TaskDescriptor::add_args(const char* value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:firmament.TaskDescriptor.args)
}
inline void TaskDescriptor::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:firmament.TaskDescriptor.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TaskDescriptor::args() const {
  // @@protoc_insertion_point(field_list:firmament.TaskDescriptor.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TaskDescriptor::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:firmament.TaskDescriptor.args)
  return &args_;
}

// repeated .firmament.TaskDescriptor spawned = 10;
inline int TaskDescriptor::spawned_size() const {
  return spawned_.size();
}
inline void TaskDescriptor::clear_spawned() {
  spawned_.Clear();
}
inline const ::firmament::TaskDescriptor& TaskDescriptor::spawned(int index) const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.spawned)
  return spawned_.Get(index);
}
inline ::firmament::TaskDescriptor* TaskDescriptor::mutable_spawned(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.spawned)
  return spawned_.Mutable(index);
}
inline ::firmament::TaskDescriptor* TaskDescriptor::add_spawned() {
  // @@protoc_insertion_point(field_add:firmament.TaskDescriptor.spawned)
  return spawned_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::firmament::TaskDescriptor >*
TaskDescriptor::mutable_spawned() {
  // @@protoc_insertion_point(field_mutable_list:firmament.TaskDescriptor.spawned)
  return &spawned_;
}
inline const ::google::protobuf::RepeatedPtrField< ::firmament::TaskDescriptor >&
TaskDescriptor::spawned() const {
  // @@protoc_insertion_point(field_list:firmament.TaskDescriptor.spawned)
  return spawned_;
}

// optional string scheduled_to_resource = 11;
inline void TaskDescriptor::clear_scheduled_to_resource() {
  scheduled_to_resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskDescriptor::scheduled_to_resource() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.scheduled_to_resource)
  return scheduled_to_resource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_scheduled_to_resource(const ::std::string& value) {
  
  scheduled_to_resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.scheduled_to_resource)
}
inline void TaskDescriptor::set_scheduled_to_resource(const char* value) {
  
  scheduled_to_resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.scheduled_to_resource)
}
inline void TaskDescriptor::set_scheduled_to_resource(const char* value, size_t size) {
  
  scheduled_to_resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.scheduled_to_resource)
}
inline ::std::string* TaskDescriptor::mutable_scheduled_to_resource() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.scheduled_to_resource)
  return scheduled_to_resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskDescriptor::release_scheduled_to_resource() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.scheduled_to_resource)
  
  return scheduled_to_resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_allocated_scheduled_to_resource(::std::string* scheduled_to_resource) {
  if (scheduled_to_resource != NULL) {
    
  } else {
    
  }
  scheduled_to_resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scheduled_to_resource);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.scheduled_to_resource)
}

// optional string last_heartbeat_location = 12;
inline void TaskDescriptor::clear_last_heartbeat_location() {
  last_heartbeat_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskDescriptor::last_heartbeat_location() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.last_heartbeat_location)
  return last_heartbeat_location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_last_heartbeat_location(const ::std::string& value) {
  
  last_heartbeat_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.last_heartbeat_location)
}
inline void TaskDescriptor::set_last_heartbeat_location(const char* value) {
  
  last_heartbeat_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.last_heartbeat_location)
}
inline void TaskDescriptor::set_last_heartbeat_location(const char* value, size_t size) {
  
  last_heartbeat_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.last_heartbeat_location)
}
inline ::std::string* TaskDescriptor::mutable_last_heartbeat_location() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.last_heartbeat_location)
  return last_heartbeat_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskDescriptor::release_last_heartbeat_location() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.last_heartbeat_location)
  
  return last_heartbeat_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_allocated_last_heartbeat_location(::std::string* last_heartbeat_location) {
  if (last_heartbeat_location != NULL) {
    
  } else {
    
  }
  last_heartbeat_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_heartbeat_location);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.last_heartbeat_location)
}

// optional uint64 last_heartbeat_time = 13;
inline void TaskDescriptor::clear_last_heartbeat_time() {
  last_heartbeat_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::last_heartbeat_time() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.last_heartbeat_time)
  return last_heartbeat_time_;
}
inline void TaskDescriptor::set_last_heartbeat_time(::google::protobuf::uint64 value) {
  
  last_heartbeat_time_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.last_heartbeat_time)
}

// optional string delegated_to = 14;
inline void TaskDescriptor::clear_delegated_to() {
  delegated_to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskDescriptor::delegated_to() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.delegated_to)
  return delegated_to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_delegated_to(const ::std::string& value) {
  
  delegated_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.delegated_to)
}
inline void TaskDescriptor::set_delegated_to(const char* value) {
  
  delegated_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.delegated_to)
}
inline void TaskDescriptor::set_delegated_to(const char* value, size_t size) {
  
  delegated_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.delegated_to)
}
inline ::std::string* TaskDescriptor::mutable_delegated_to() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.delegated_to)
  return delegated_to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskDescriptor::release_delegated_to() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.delegated_to)
  
  return delegated_to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_allocated_delegated_to(::std::string* delegated_to) {
  if (delegated_to != NULL) {
    
  } else {
    
  }
  delegated_to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delegated_to);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.delegated_to)
}

// optional string delegated_from = 15;
inline void TaskDescriptor::clear_delegated_from() {
  delegated_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskDescriptor::delegated_from() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.delegated_from)
  return delegated_from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_delegated_from(const ::std::string& value) {
  
  delegated_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.delegated_from)
}
inline void TaskDescriptor::set_delegated_from(const char* value) {
  
  delegated_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.delegated_from)
}
inline void TaskDescriptor::set_delegated_from(const char* value, size_t size) {
  
  delegated_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.delegated_from)
}
inline ::std::string* TaskDescriptor::mutable_delegated_from() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.delegated_from)
  return delegated_from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskDescriptor::release_delegated_from() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.delegated_from)
  
  return delegated_from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskDescriptor::set_allocated_delegated_from(::std::string* delegated_from) {
  if (delegated_from != NULL) {
    
  } else {
    
  }
  delegated_from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delegated_from);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.delegated_from)
}

// optional uint64 submit_time = 16;
inline void TaskDescriptor::clear_submit_time() {
  submit_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::submit_time() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.submit_time)
  return submit_time_;
}
inline void TaskDescriptor::set_submit_time(::google::protobuf::uint64 value) {
  
  submit_time_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.submit_time)
}

// optional uint64 start_time = 17;
inline void TaskDescriptor::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::start_time() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.start_time)
  return start_time_;
}
inline void TaskDescriptor::set_start_time(::google::protobuf::uint64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.start_time)
}

// optional uint64 finish_time = 18;
inline void TaskDescriptor::clear_finish_time() {
  finish_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::finish_time() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.finish_time)
  return finish_time_;
}
inline void TaskDescriptor::set_finish_time(::google::protobuf::uint64 value) {
  
  finish_time_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.finish_time)
}

// optional uint64 total_unscheduled_time = 19;
inline void TaskDescriptor::clear_total_unscheduled_time() {
  total_unscheduled_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::total_unscheduled_time() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.total_unscheduled_time)
  return total_unscheduled_time_;
}
inline void TaskDescriptor::set_total_unscheduled_time(::google::protobuf::uint64 value) {
  
  total_unscheduled_time_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.total_unscheduled_time)
}

// optional uint64 total_run_time = 20;
inline void TaskDescriptor::clear_total_run_time() {
  total_run_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::total_run_time() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.total_run_time)
  return total_run_time_;
}
inline void TaskDescriptor::set_total_run_time(::google::protobuf::uint64 value) {
  
  total_run_time_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.total_run_time)
}

// optional uint64 relative_deadline = 21;
inline void TaskDescriptor::clear_relative_deadline() {
  relative_deadline_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::relative_deadline() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.relative_deadline)
  return relative_deadline_;
}
inline void TaskDescriptor::set_relative_deadline(::google::protobuf::uint64 value) {
  
  relative_deadline_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.relative_deadline)
}

// optional uint64 absolute_deadline = 22;
inline void TaskDescriptor::clear_absolute_deadline() {
  absolute_deadline_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::absolute_deadline() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.absolute_deadline)
  return absolute_deadline_;
}
inline void TaskDescriptor::set_absolute_deadline(::google::protobuf::uint64 value) {
  
  absolute_deadline_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.absolute_deadline)
}

// optional uint64 port = 23;
inline void TaskDescriptor::clear_port() {
  port_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::port() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.port)
  return port_;
}
inline void TaskDescriptor::set_port(::google::protobuf::uint64 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.port)
}

// optional uint64 input_size = 24;
inline void TaskDescriptor::clear_input_size() {
  input_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::input_size() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.input_size)
  return input_size_;
}
inline void TaskDescriptor::set_input_size(::google::protobuf::uint64 value) {
  
  input_size_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.input_size)
}

// optional bool inject_task_lib = 25;
inline void TaskDescriptor::clear_inject_task_lib() {
  inject_task_lib_ = false;
}
inline bool TaskDescriptor::inject_task_lib() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.inject_task_lib)
  return inject_task_lib_;
}
inline void TaskDescriptor::set_inject_task_lib(bool value) {
  
  inject_task_lib_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.inject_task_lib)
}

// optional .firmament.ResourceVector resource_request = 26;
inline bool TaskDescriptor::has_resource_request() const {
  return this != internal_default_instance() && resource_request_ != NULL;
}
inline void TaskDescriptor::clear_resource_request() {
  if (GetArenaNoVirtual() == NULL && resource_request_ != NULL) delete resource_request_;
  resource_request_ = NULL;
}
inline const ::firmament::ResourceVector& TaskDescriptor::resource_request() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.resource_request)
  return resource_request_ != NULL ? *resource_request_
                         : *::firmament::ResourceVector::internal_default_instance();
}
inline ::firmament::ResourceVector* TaskDescriptor::mutable_resource_request() {
  
  if (resource_request_ == NULL) {
    resource_request_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.resource_request)
  return resource_request_;
}
inline ::firmament::ResourceVector* TaskDescriptor::release_resource_request() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.resource_request)
  
  ::firmament::ResourceVector* temp = resource_request_;
  resource_request_ = NULL;
  return temp;
}
inline void TaskDescriptor::set_allocated_resource_request(::firmament::ResourceVector* resource_request) {
  delete resource_request_;
  resource_request_ = resource_request;
  if (resource_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.resource_request)
}

// optional uint32 priority = 27;
inline void TaskDescriptor::clear_priority() {
  priority_ = 0u;
}
inline ::google::protobuf::uint32 TaskDescriptor::priority() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.priority)
  return priority_;
}
inline void TaskDescriptor::set_priority(::google::protobuf::uint32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.priority)
}

// optional .firmament.TaskDescriptor.TaskType task_type = 28;
inline void TaskDescriptor::clear_task_type() {
  task_type_ = 0;
}
inline ::firmament::TaskDescriptor_TaskType TaskDescriptor::task_type() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.task_type)
  return static_cast< ::firmament::TaskDescriptor_TaskType >(task_type_);
}
inline void TaskDescriptor::set_task_type(::firmament::TaskDescriptor_TaskType value) {
  
  task_type_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.task_type)
}

// optional .firmament.TaskFinalReport final_report = 29;
inline bool TaskDescriptor::has_final_report() const {
  return this != internal_default_instance() && final_report_ != NULL;
}
inline void TaskDescriptor::clear_final_report() {
  if (GetArenaNoVirtual() == NULL && final_report_ != NULL) delete final_report_;
  final_report_ = NULL;
}
inline const ::firmament::TaskFinalReport& TaskDescriptor::final_report() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.final_report)
  return final_report_ != NULL ? *final_report_
                         : *::firmament::TaskFinalReport::internal_default_instance();
}
inline ::firmament::TaskFinalReport* TaskDescriptor::mutable_final_report() {
  
  if (final_report_ == NULL) {
    final_report_ = new ::firmament::TaskFinalReport;
  }
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.final_report)
  return final_report_;
}
inline ::firmament::TaskFinalReport* TaskDescriptor::release_final_report() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.final_report)
  
  ::firmament::TaskFinalReport* temp = final_report_;
  final_report_ = NULL;
  return temp;
}
inline void TaskDescriptor::set_allocated_final_report(::firmament::TaskFinalReport* final_report) {
  delete final_report_;
  final_report_ = final_report;
  if (final_report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.final_report)
}

// optional uint64 trace_job_id = 30;
inline void TaskDescriptor::clear_trace_job_id() {
  trace_job_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::trace_job_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.trace_job_id)
  return trace_job_id_;
}
inline void TaskDescriptor::set_trace_job_id(::google::protobuf::uint64 value) {
  
  trace_job_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.trace_job_id)
}

// optional uint64 trace_task_id = 31;
inline void TaskDescriptor::clear_trace_task_id() {
  trace_task_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskDescriptor::trace_task_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.trace_task_id)
  return trace_task_id_;
}
inline void TaskDescriptor::set_trace_task_id(::google::protobuf::uint64 value) {
  
  trace_task_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.trace_task_id)
}

// repeated .firmament.Label labels = 32;
inline int TaskDescriptor::labels_size() const {
  return labels_.size();
}
inline void TaskDescriptor::clear_labels() {
  labels_.Clear();
}
inline const ::firmament::Label& TaskDescriptor::labels(int index) const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.labels)
  return labels_.Get(index);
}
inline ::firmament::Label* TaskDescriptor::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.labels)
  return labels_.Mutable(index);
}
inline ::firmament::Label* TaskDescriptor::add_labels() {
  // @@protoc_insertion_point(field_add:firmament.TaskDescriptor.labels)
  return labels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::firmament::Label >*
TaskDescriptor::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:firmament.TaskDescriptor.labels)
  return &labels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::firmament::Label >&
TaskDescriptor::labels() const {
  // @@protoc_insertion_point(field_list:firmament.TaskDescriptor.labels)
  return labels_;
}

// repeated .firmament.LabelSelector label_selectors = 33;
inline int TaskDescriptor::label_selectors_size() const {
  return label_selectors_.size();
}
inline void TaskDescriptor::clear_label_selectors() {
  label_selectors_.Clear();
}
inline const ::firmament::LabelSelector& TaskDescriptor::label_selectors(int index) const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.label_selectors)
  return label_selectors_.Get(index);
}
inline ::firmament::LabelSelector* TaskDescriptor::mutable_label_selectors(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.label_selectors)
  return label_selectors_.Mutable(index);
}
inline ::firmament::LabelSelector* TaskDescriptor::add_label_selectors() {
  // @@protoc_insertion_point(field_add:firmament.TaskDescriptor.label_selectors)
  return label_selectors_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::firmament::LabelSelector >*
TaskDescriptor::mutable_label_selectors() {
  // @@protoc_insertion_point(field_mutable_list:firmament.TaskDescriptor.label_selectors)
  return &label_selectors_;
}
inline const ::google::protobuf::RepeatedPtrField< ::firmament::LabelSelector >&
TaskDescriptor::label_selectors() const {
  // @@protoc_insertion_point(field_list:firmament.TaskDescriptor.label_selectors)
  return label_selectors_;
}

inline const TaskDescriptor* TaskDescriptor::internal_default_instance() {
  return &TaskDescriptor_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::firmament::TaskDescriptor_TaskState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firmament::TaskDescriptor_TaskState>() {
  return ::firmament::TaskDescriptor_TaskState_descriptor();
}
template <> struct is_proto_enum< ::firmament::TaskDescriptor_TaskType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firmament::TaskDescriptor_TaskType>() {
  return ::firmament::TaskDescriptor_TaskType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2ftask_5fdesc_2eproto__INCLUDED
