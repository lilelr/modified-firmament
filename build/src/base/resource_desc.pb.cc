// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/resource_desc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/resource_desc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* ResourceDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceDescriptor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResourceDescriptor_ResourceState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ResourceDescriptor_ResourceType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2fresource_5fdesc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_base_2fresource_5fdesc_2eproto() {
  protobuf_AddDesc_base_2fresource_5fdesc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/resource_desc.proto");
  GOOGLE_CHECK(file != NULL);
  ResourceDescriptor_descriptor_ = file->message_type(0);
  static const int ResourceDescriptor_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, friendly_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, descriptive_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, task_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, last_heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, schedulable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, current_running_tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, num_running_tasks_below_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, num_slots_below_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, available_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, reserved_resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, min_available_resources_below_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, max_available_resources_below_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, min_unreserved_resources_below_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, max_unreserved_resources_below_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, resource_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, whare_map_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, coco_interference_scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, trace_machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, labels_),
  };
  ResourceDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceDescriptor_descriptor_,
      ResourceDescriptor::internal_default_instance(),
      ResourceDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResourceDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceDescriptor, _internal_metadata_));
  ResourceDescriptor_ResourceState_descriptor_ = ResourceDescriptor_descriptor_->enum_type(0);
  ResourceDescriptor_ResourceType_descriptor_ = ResourceDescriptor_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2fresource_5fdesc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceDescriptor_descriptor_, ResourceDescriptor::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2fresource_5fdesc_2eproto() {
  ResourceDescriptor_default_instance_.Shutdown();
  delete ResourceDescriptor_reflection_;
}

void protobuf_InitDefaults_base_2fresource_5fdesc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::firmament::protobuf_InitDefaults_base_2fcoco_5finterference_5fscores_2eproto();
  ::firmament::protobuf_InitDefaults_base_2flabel_2eproto();
  ::firmament::protobuf_InitDefaults_base_2fresource_5fvector_2eproto();
  ::firmament::protobuf_InitDefaults_base_2fwhare_5fmap_5fstats_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  ResourceDescriptor_default_instance_.DefaultConstruct();
  ResourceDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_base_2fresource_5fdesc_2eproto_once_);
void protobuf_InitDefaults_base_2fresource_5fdesc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_base_2fresource_5fdesc_2eproto_once_,
                 &protobuf_InitDefaults_base_2fresource_5fdesc_2eproto_impl);
}
void protobuf_AddDesc_base_2fresource_5fdesc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_base_2fresource_5fdesc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030base/resource_desc.proto\022\tfirmament\032#b"
    "ase/coco_interference_scores.proto\032\020base"
    "/label.proto\032\032base/resource_vector.proto"
    "\032\032base/whare_map_stats.proto\"\234\n\n\022Resourc"
    "eDescriptor\022\014\n\004uuid\030\001 \001(\t\022\025\n\rfriendly_na"
    "me\030\002 \001(\t\022\030\n\020descriptive_name\030\003 \001(\t\022:\n\005st"
    "ate\030\004 \001(\0162+.firmament.ResourceDescriptor"
    ".ResourceState\022\025\n\rtask_capacity\030\005 \001(\004\022\026\n"
    "\016last_heartbeat\030\006 \001(\004\0228\n\004type\030\007 \001(\0162*.fi"
    "rmament.ResourceDescriptor.ResourceType\022"
    "\023\n\013schedulable\030\010 \001(\010\022\035\n\025current_running_"
    "tasks\030\t \003(\004\022\037\n\027num_running_tasks_below\030\n"
    " \001(\004\022\027\n\017num_slots_below\030\013 \001(\004\0226\n\023availab"
    "le_resources\030\014 \001(\0132\031.firmament.ResourceV"
    "ector\0225\n\022reserved_resources\030\r \001(\0132\031.firm"
    "ament.ResourceVector\022@\n\035min_available_re"
    "sources_below\030\016 \001(\0132\031.firmament.Resource"
    "Vector\022@\n\035max_available_resources_below\030"
    "\017 \001(\0132\031.firmament.ResourceVector\022A\n\036min_"
    "unreserved_resources_below\030\020 \001(\0132\031.firma"
    "ment.ResourceVector\022A\n\036max_unreserved_re"
    "sources_below\030\021 \001(\0132\031.firmament.Resource"
    "Vector\0224\n\021resource_capacity\030\022 \001(\0132\031.firm"
    "ament.ResourceVector\0221\n\017whare_map_stats\030"
    "\023 \001(\0132\030.firmament.WhareMapStats\022C\n\030coco_"
    "interference_scores\030\024 \001(\0132!.firmament.Co"
    "CoInterferenceScores\022\030\n\020trace_machine_id"
    "\030\025 \001(\004\022 \n\006labels\030  \003(\0132\020.firmament.Label"
    "\"^\n\rResourceState\022\024\n\020RESOURCE_UNKNOWN\020\000\022"
    "\021\n\rRESOURCE_IDLE\020\001\022\021\n\rRESOURCE_BUSY\020\002\022\021\n"
    "\rRESOURCE_LOST\020\003\"\360\001\n\014ResourceType\022\017\n\013RES"
    "OURCE_PU\020\000\022\021\n\rRESOURCE_CORE\020\001\022\022\n\016RESOURC"
    "E_CACHE\020\002\022\020\n\014RESOURCE_NIC\020\003\022\021\n\rRESOURCE_"
    "DISK\020\004\022\020\n\014RESOURCE_SSD\020\005\022\024\n\020RESOURCE_MAC"
    "HINE\020\006\022\024\n\020RESOURCE_LOGICAL\020\007\022\026\n\022RESOURCE"
    "_NUMA_NODE\020\010\022\023\n\017RESOURCE_SOCKET\020\t\022\030\n\024RES"
    "OURCE_COORDINATOR\020\nb\006proto3", 1467);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/resource_desc.proto", &protobuf_RegisterTypes);
  ::firmament::protobuf_AddDesc_base_2fcoco_5finterference_5fscores_2eproto();
  ::firmament::protobuf_AddDesc_base_2flabel_2eproto();
  ::firmament::protobuf_AddDesc_base_2fresource_5fvector_2eproto();
  ::firmament::protobuf_AddDesc_base_2fwhare_5fmap_5fstats_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2fresource_5fdesc_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_base_2fresource_5fdesc_2eproto_once_);
void protobuf_AddDesc_base_2fresource_5fdesc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_base_2fresource_5fdesc_2eproto_once_,
                 &protobuf_AddDesc_base_2fresource_5fdesc_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2fresource_5fdesc_2eproto {
  StaticDescriptorInitializer_base_2fresource_5fdesc_2eproto() {
    protobuf_AddDesc_base_2fresource_5fdesc_2eproto();
  }
} static_descriptor_initializer_base_2fresource_5fdesc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* ResourceDescriptor_ResourceState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceDescriptor_ResourceState_descriptor_;
}
bool ResourceDescriptor_ResourceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResourceDescriptor_ResourceState ResourceDescriptor::RESOURCE_UNKNOWN;
const ResourceDescriptor_ResourceState ResourceDescriptor::RESOURCE_IDLE;
const ResourceDescriptor_ResourceState ResourceDescriptor::RESOURCE_BUSY;
const ResourceDescriptor_ResourceState ResourceDescriptor::RESOURCE_LOST;
const ResourceDescriptor_ResourceState ResourceDescriptor::ResourceState_MIN;
const ResourceDescriptor_ResourceState ResourceDescriptor::ResourceState_MAX;
const int ResourceDescriptor::ResourceState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ResourceDescriptor_ResourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceDescriptor_ResourceType_descriptor_;
}
bool ResourceDescriptor_ResourceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResourceDescriptor_ResourceType ResourceDescriptor::RESOURCE_PU;
const ResourceDescriptor_ResourceType ResourceDescriptor::RESOURCE_CORE;
const ResourceDescriptor_ResourceType ResourceDescriptor::RESOURCE_CACHE;
const ResourceDescriptor_ResourceType ResourceDescriptor::RESOURCE_NIC;
const ResourceDescriptor_ResourceType ResourceDescriptor::RESOURCE_DISK;
const ResourceDescriptor_ResourceType ResourceDescriptor::RESOURCE_SSD;
const ResourceDescriptor_ResourceType ResourceDescriptor::RESOURCE_MACHINE;
const ResourceDescriptor_ResourceType ResourceDescriptor::RESOURCE_LOGICAL;
const ResourceDescriptor_ResourceType ResourceDescriptor::RESOURCE_NUMA_NODE;
const ResourceDescriptor_ResourceType ResourceDescriptor::RESOURCE_SOCKET;
const ResourceDescriptor_ResourceType ResourceDescriptor::RESOURCE_COORDINATOR;
const ResourceDescriptor_ResourceType ResourceDescriptor::ResourceType_MIN;
const ResourceDescriptor_ResourceType ResourceDescriptor::ResourceType_MAX;
const int ResourceDescriptor::ResourceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceDescriptor::kUuidFieldNumber;
const int ResourceDescriptor::kFriendlyNameFieldNumber;
const int ResourceDescriptor::kDescriptiveNameFieldNumber;
const int ResourceDescriptor::kStateFieldNumber;
const int ResourceDescriptor::kTaskCapacityFieldNumber;
const int ResourceDescriptor::kLastHeartbeatFieldNumber;
const int ResourceDescriptor::kTypeFieldNumber;
const int ResourceDescriptor::kSchedulableFieldNumber;
const int ResourceDescriptor::kCurrentRunningTasksFieldNumber;
const int ResourceDescriptor::kNumRunningTasksBelowFieldNumber;
const int ResourceDescriptor::kNumSlotsBelowFieldNumber;
const int ResourceDescriptor::kAvailableResourcesFieldNumber;
const int ResourceDescriptor::kReservedResourcesFieldNumber;
const int ResourceDescriptor::kMinAvailableResourcesBelowFieldNumber;
const int ResourceDescriptor::kMaxAvailableResourcesBelowFieldNumber;
const int ResourceDescriptor::kMinUnreservedResourcesBelowFieldNumber;
const int ResourceDescriptor::kMaxUnreservedResourcesBelowFieldNumber;
const int ResourceDescriptor::kResourceCapacityFieldNumber;
const int ResourceDescriptor::kWhareMapStatsFieldNumber;
const int ResourceDescriptor::kCocoInterferenceScoresFieldNumber;
const int ResourceDescriptor::kTraceMachineIdFieldNumber;
const int ResourceDescriptor::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceDescriptor::ResourceDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_base_2fresource_5fdesc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.ResourceDescriptor)
}

void ResourceDescriptor::InitAsDefaultInstance() {
  available_resources_ = const_cast< ::firmament::ResourceVector*>(
      ::firmament::ResourceVector::internal_default_instance());
  reserved_resources_ = const_cast< ::firmament::ResourceVector*>(
      ::firmament::ResourceVector::internal_default_instance());
  min_available_resources_below_ = const_cast< ::firmament::ResourceVector*>(
      ::firmament::ResourceVector::internal_default_instance());
  max_available_resources_below_ = const_cast< ::firmament::ResourceVector*>(
      ::firmament::ResourceVector::internal_default_instance());
  min_unreserved_resources_below_ = const_cast< ::firmament::ResourceVector*>(
      ::firmament::ResourceVector::internal_default_instance());
  max_unreserved_resources_below_ = const_cast< ::firmament::ResourceVector*>(
      ::firmament::ResourceVector::internal_default_instance());
  resource_capacity_ = const_cast< ::firmament::ResourceVector*>(
      ::firmament::ResourceVector::internal_default_instance());
  whare_map_stats_ = const_cast< ::firmament::WhareMapStats*>(
      ::firmament::WhareMapStats::internal_default_instance());
  coco_interference_scores_ = const_cast< ::firmament::CoCoInterferenceScores*>(
      ::firmament::CoCoInterferenceScores::internal_default_instance());
}

ResourceDescriptor::ResourceDescriptor(const ResourceDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.ResourceDescriptor)
}

void ResourceDescriptor::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptive_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  available_resources_ = NULL;
  reserved_resources_ = NULL;
  min_available_resources_below_ = NULL;
  max_available_resources_below_ = NULL;
  min_unreserved_resources_below_ = NULL;
  max_unreserved_resources_below_ = NULL;
  resource_capacity_ = NULL;
  whare_map_stats_ = NULL;
  coco_interference_scores_ = NULL;
  ::memset(&task_capacity_, 0, reinterpret_cast<char*>(&schedulable_) -
    reinterpret_cast<char*>(&task_capacity_) + sizeof(schedulable_));
  _cached_size_ = 0;
}

ResourceDescriptor::~ResourceDescriptor() {
  // @@protoc_insertion_point(destructor:firmament.ResourceDescriptor)
  SharedDtor();
}

void ResourceDescriptor::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptive_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ResourceDescriptor_default_instance_.get()) {
    delete available_resources_;
    delete reserved_resources_;
    delete min_available_resources_below_;
    delete max_available_resources_below_;
    delete min_unreserved_resources_below_;
    delete max_unreserved_resources_below_;
    delete resource_capacity_;
    delete whare_map_stats_;
    delete coco_interference_scores_;
  }
}

void ResourceDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceDescriptor_descriptor_;
}

const ResourceDescriptor& ResourceDescriptor::default_instance() {
  protobuf_InitDefaults_base_2fresource_5fdesc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResourceDescriptor> ResourceDescriptor_default_instance_;

ResourceDescriptor* ResourceDescriptor::New(::google::protobuf::Arena* arena) const {
  ResourceDescriptor* n = new ResourceDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.ResourceDescriptor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResourceDescriptor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResourceDescriptor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(task_capacity_, last_heartbeat_);
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  descriptive_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schedulable_ = false;
  ZR_(num_running_tasks_below_, num_slots_below_);
  if (GetArenaNoVirtual() == NULL && available_resources_ != NULL) delete available_resources_;
  available_resources_ = NULL;
  if (GetArenaNoVirtual() == NULL && reserved_resources_ != NULL) delete reserved_resources_;
  reserved_resources_ = NULL;
  if (GetArenaNoVirtual() == NULL && min_available_resources_below_ != NULL) delete min_available_resources_below_;
  min_available_resources_below_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_available_resources_below_ != NULL) delete max_available_resources_below_;
  max_available_resources_below_ = NULL;
  if (GetArenaNoVirtual() == NULL && min_unreserved_resources_below_ != NULL) delete min_unreserved_resources_below_;
  min_unreserved_resources_below_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_unreserved_resources_below_ != NULL) delete max_unreserved_resources_below_;
  max_unreserved_resources_below_ = NULL;
  if (GetArenaNoVirtual() == NULL && resource_capacity_ != NULL) delete resource_capacity_;
  resource_capacity_ = NULL;
  if (GetArenaNoVirtual() == NULL && whare_map_stats_ != NULL) delete whare_map_stats_;
  whare_map_stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && coco_interference_scores_ != NULL) delete coco_interference_scores_;
  coco_interference_scores_ = NULL;
  trace_machine_id_ = GOOGLE_ULONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  current_running_tasks_.Clear();
  labels_.Clear();
}

bool ResourceDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.ResourceDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.ResourceDescriptor.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_friendly_name;
        break;
      }

      // optional string friendly_name = 2;
      case 2: {
        if (tag == 18) {
         parse_friendly_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendly_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->friendly_name().data(), this->friendly_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.ResourceDescriptor.friendly_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_descriptive_name;
        break;
      }

      // optional string descriptive_name = 3;
      case 3: {
        if (tag == 26) {
         parse_descriptive_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_descriptive_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->descriptive_name().data(), this->descriptive_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.ResourceDescriptor.descriptive_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .firmament.ResourceDescriptor.ResourceState state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::firmament::ResourceDescriptor_ResourceState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_task_capacity;
        break;
      }

      // optional uint64 task_capacity = 5;
      case 5: {
        if (tag == 40) {
         parse_task_capacity:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_capacity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_last_heartbeat;
        break;
      }

      // optional uint64 last_heartbeat = 6;
      case 6: {
        if (tag == 48) {
         parse_last_heartbeat:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_heartbeat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .firmament.ResourceDescriptor.ResourceType type = 7;
      case 7: {
        if (tag == 56) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::firmament::ResourceDescriptor_ResourceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_schedulable;
        break;
      }

      // optional bool schedulable = 8;
      case 8: {
        if (tag == 64) {
         parse_schedulable:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &schedulable_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_current_running_tasks;
        break;
      }

      // repeated uint64 current_running_tasks = 9;
      case 9: {
        if (tag == 74) {
         parse_current_running_tasks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_current_running_tasks())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 74, input, this->mutable_current_running_tasks())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_num_running_tasks_below;
        break;
      }

      // optional uint64 num_running_tasks_below = 10;
      case 10: {
        if (tag == 80) {
         parse_num_running_tasks_below:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_running_tasks_below_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_num_slots_below;
        break;
      }

      // optional uint64 num_slots_below = 11;
      case 11: {
        if (tag == 88) {
         parse_num_slots_below:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_slots_below_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_available_resources;
        break;
      }

      // optional .firmament.ResourceVector available_resources = 12;
      case 12: {
        if (tag == 98) {
         parse_available_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_available_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_reserved_resources;
        break;
      }

      // optional .firmament.ResourceVector reserved_resources = 13;
      case 13: {
        if (tag == 106) {
         parse_reserved_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reserved_resources()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_min_available_resources_below;
        break;
      }

      // optional .firmament.ResourceVector min_available_resources_below = 14;
      case 14: {
        if (tag == 114) {
         parse_min_available_resources_below:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_available_resources_below()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_max_available_resources_below;
        break;
      }

      // optional .firmament.ResourceVector max_available_resources_below = 15;
      case 15: {
        if (tag == 122) {
         parse_max_available_resources_below:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_available_resources_below()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_min_unreserved_resources_below;
        break;
      }

      // optional .firmament.ResourceVector min_unreserved_resources_below = 16;
      case 16: {
        if (tag == 130) {
         parse_min_unreserved_resources_below:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min_unreserved_resources_below()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_max_unreserved_resources_below;
        break;
      }

      // optional .firmament.ResourceVector max_unreserved_resources_below = 17;
      case 17: {
        if (tag == 138) {
         parse_max_unreserved_resources_below:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_unreserved_resources_below()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_resource_capacity;
        break;
      }

      // optional .firmament.ResourceVector resource_capacity = 18;
      case 18: {
        if (tag == 146) {
         parse_resource_capacity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_capacity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_whare_map_stats;
        break;
      }

      // optional .firmament.WhareMapStats whare_map_stats = 19;
      case 19: {
        if (tag == 154) {
         parse_whare_map_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_whare_map_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_coco_interference_scores;
        break;
      }

      // optional .firmament.CoCoInterferenceScores coco_interference_scores = 20;
      case 20: {
        if (tag == 162) {
         parse_coco_interference_scores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coco_interference_scores()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_trace_machine_id;
        break;
      }

      // optional uint64 trace_machine_id = 21;
      case 21: {
        if (tag == 168) {
         parse_trace_machine_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_machine_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_labels;
        break;
      }

      // repeated .firmament.Label labels = 32;
      case 32: {
        if (tag == 258) {
         parse_labels:
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_loop_labels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.ResourceDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.ResourceDescriptor)
  return false;
#undef DO_
}

void ResourceDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.ResourceDescriptor)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.ResourceDescriptor.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string friendly_name = 2;
  if (this->friendly_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.ResourceDescriptor.friendly_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->friendly_name(), output);
  }

  // optional string descriptive_name = 3;
  if (this->descriptive_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptive_name().data(), this->descriptive_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.ResourceDescriptor.descriptive_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->descriptive_name(), output);
  }

  // optional .firmament.ResourceDescriptor.ResourceState state = 4;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional uint64 task_capacity = 5;
  if (this->task_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->task_capacity(), output);
  }

  // optional uint64 last_heartbeat = 6;
  if (this->last_heartbeat() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->last_heartbeat(), output);
  }

  // optional .firmament.ResourceDescriptor.ResourceType type = 7;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  // optional bool schedulable = 8;
  if (this->schedulable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->schedulable(), output);
  }

  // repeated uint64 current_running_tasks = 9;
  if (this->current_running_tasks_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_current_running_tasks_cached_byte_size_);
  }
  for (int i = 0; i < this->current_running_tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->current_running_tasks(i), output);
  }

  // optional uint64 num_running_tasks_below = 10;
  if (this->num_running_tasks_below() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->num_running_tasks_below(), output);
  }

  // optional uint64 num_slots_below = 11;
  if (this->num_slots_below() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->num_slots_below(), output);
  }

  // optional .firmament.ResourceVector available_resources = 12;
  if (this->has_available_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->available_resources_, output);
  }

  // optional .firmament.ResourceVector reserved_resources = 13;
  if (this->has_reserved_resources()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->reserved_resources_, output);
  }

  // optional .firmament.ResourceVector min_available_resources_below = 14;
  if (this->has_min_available_resources_below()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->min_available_resources_below_, output);
  }

  // optional .firmament.ResourceVector max_available_resources_below = 15;
  if (this->has_max_available_resources_below()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->max_available_resources_below_, output);
  }

  // optional .firmament.ResourceVector min_unreserved_resources_below = 16;
  if (this->has_min_unreserved_resources_below()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->min_unreserved_resources_below_, output);
  }

  // optional .firmament.ResourceVector max_unreserved_resources_below = 17;
  if (this->has_max_unreserved_resources_below()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->max_unreserved_resources_below_, output);
  }

  // optional .firmament.ResourceVector resource_capacity = 18;
  if (this->has_resource_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->resource_capacity_, output);
  }

  // optional .firmament.WhareMapStats whare_map_stats = 19;
  if (this->has_whare_map_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->whare_map_stats_, output);
  }

  // optional .firmament.CoCoInterferenceScores coco_interference_scores = 20;
  if (this->has_coco_interference_scores()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->coco_interference_scores_, output);
  }

  // optional uint64 trace_machine_id = 21;
  if (this->trace_machine_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->trace_machine_id(), output);
  }

  // repeated .firmament.Label labels = 32;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->labels(i), output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.ResourceDescriptor)
}

::google::protobuf::uint8* ResourceDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.ResourceDescriptor)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.ResourceDescriptor.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string friendly_name = 2;
  if (this->friendly_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.ResourceDescriptor.friendly_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->friendly_name(), target);
  }

  // optional string descriptive_name = 3;
  if (this->descriptive_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->descriptive_name().data(), this->descriptive_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.ResourceDescriptor.descriptive_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->descriptive_name(), target);
  }

  // optional .firmament.ResourceDescriptor.ResourceState state = 4;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional uint64 task_capacity = 5;
  if (this->task_capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->task_capacity(), target);
  }

  // optional uint64 last_heartbeat = 6;
  if (this->last_heartbeat() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->last_heartbeat(), target);
  }

  // optional .firmament.ResourceDescriptor.ResourceType type = 7;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  // optional bool schedulable = 8;
  if (this->schedulable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->schedulable(), target);
  }

  // repeated uint64 current_running_tasks = 9;
  if (this->current_running_tasks_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _current_running_tasks_cached_byte_size_, target);
  }
  for (int i = 0; i < this->current_running_tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->current_running_tasks(i), target);
  }

  // optional uint64 num_running_tasks_below = 10;
  if (this->num_running_tasks_below() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->num_running_tasks_below(), target);
  }

  // optional uint64 num_slots_below = 11;
  if (this->num_slots_below() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->num_slots_below(), target);
  }

  // optional .firmament.ResourceVector available_resources = 12;
  if (this->has_available_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->available_resources_, false, target);
  }

  // optional .firmament.ResourceVector reserved_resources = 13;
  if (this->has_reserved_resources()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->reserved_resources_, false, target);
  }

  // optional .firmament.ResourceVector min_available_resources_below = 14;
  if (this->has_min_available_resources_below()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->min_available_resources_below_, false, target);
  }

  // optional .firmament.ResourceVector max_available_resources_below = 15;
  if (this->has_max_available_resources_below()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->max_available_resources_below_, false, target);
  }

  // optional .firmament.ResourceVector min_unreserved_resources_below = 16;
  if (this->has_min_unreserved_resources_below()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->min_unreserved_resources_below_, false, target);
  }

  // optional .firmament.ResourceVector max_unreserved_resources_below = 17;
  if (this->has_max_unreserved_resources_below()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->max_unreserved_resources_below_, false, target);
  }

  // optional .firmament.ResourceVector resource_capacity = 18;
  if (this->has_resource_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->resource_capacity_, false, target);
  }

  // optional .firmament.WhareMapStats whare_map_stats = 19;
  if (this->has_whare_map_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->whare_map_stats_, false, target);
  }

  // optional .firmament.CoCoInterferenceScores coco_interference_scores = 20;
  if (this->has_coco_interference_scores()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->coco_interference_scores_, false, target);
  }

  // optional uint64 trace_machine_id = 21;
  if (this->trace_machine_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->trace_machine_id(), target);
  }

  // repeated .firmament.Label labels = 32;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, this->labels(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.ResourceDescriptor)
  return target;
}

size_t ResourceDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.ResourceDescriptor)
  size_t total_size = 0;

  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string friendly_name = 2;
  if (this->friendly_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->friendly_name());
  }

  // optional string descriptive_name = 3;
  if (this->descriptive_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->descriptive_name());
  }

  // optional .firmament.ResourceDescriptor.ResourceState state = 4;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional uint64 task_capacity = 5;
  if (this->task_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_capacity());
  }

  // optional uint64 last_heartbeat = 6;
  if (this->last_heartbeat() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_heartbeat());
  }

  // optional .firmament.ResourceDescriptor.ResourceType type = 7;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional bool schedulable = 8;
  if (this->schedulable() != 0) {
    total_size += 1 + 1;
  }

  // optional uint64 num_running_tasks_below = 10;
  if (this->num_running_tasks_below() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_running_tasks_below());
  }

  // optional uint64 num_slots_below = 11;
  if (this->num_slots_below() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num_slots_below());
  }

  // optional .firmament.ResourceVector available_resources = 12;
  if (this->has_available_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->available_resources_);
  }

  // optional .firmament.ResourceVector reserved_resources = 13;
  if (this->has_reserved_resources()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reserved_resources_);
  }

  // optional .firmament.ResourceVector min_available_resources_below = 14;
  if (this->has_min_available_resources_below()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->min_available_resources_below_);
  }

  // optional .firmament.ResourceVector max_available_resources_below = 15;
  if (this->has_max_available_resources_below()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_available_resources_below_);
  }

  // optional .firmament.ResourceVector min_unreserved_resources_below = 16;
  if (this->has_min_unreserved_resources_below()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->min_unreserved_resources_below_);
  }

  // optional .firmament.ResourceVector max_unreserved_resources_below = 17;
  if (this->has_max_unreserved_resources_below()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_unreserved_resources_below_);
  }

  // optional .firmament.ResourceVector resource_capacity = 18;
  if (this->has_resource_capacity()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_capacity_);
  }

  // optional .firmament.WhareMapStats whare_map_stats = 19;
  if (this->has_whare_map_stats()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->whare_map_stats_);
  }

  // optional .firmament.CoCoInterferenceScores coco_interference_scores = 20;
  if (this->has_coco_interference_scores()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->coco_interference_scores_);
  }

  // optional uint64 trace_machine_id = 21;
  if (this->trace_machine_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_machine_id());
  }

  // repeated uint64 current_running_tasks = 9;
  {
    size_t data_size = 0;
    unsigned int count = this->current_running_tasks_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->current_running_tasks(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _current_running_tasks_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .firmament.Label labels = 32;
  {
    unsigned int count = this->labels_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.ResourceDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResourceDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.ResourceDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.ResourceDescriptor)
    UnsafeMergeFrom(*source);
  }
}

void ResourceDescriptor::MergeFrom(const ResourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.ResourceDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResourceDescriptor::UnsafeMergeFrom(const ResourceDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  current_running_tasks_.UnsafeMergeFrom(from.current_running_tasks_);
  labels_.MergeFrom(from.labels_);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.friendly_name().size() > 0) {

    friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
  }
  if (from.descriptive_name().size() > 0) {

    descriptive_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.descriptive_name_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.task_capacity() != 0) {
    set_task_capacity(from.task_capacity());
  }
  if (from.last_heartbeat() != 0) {
    set_last_heartbeat(from.last_heartbeat());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.schedulable() != 0) {
    set_schedulable(from.schedulable());
  }
  if (from.num_running_tasks_below() != 0) {
    set_num_running_tasks_below(from.num_running_tasks_below());
  }
  if (from.num_slots_below() != 0) {
    set_num_slots_below(from.num_slots_below());
  }
  if (from.has_available_resources()) {
    mutable_available_resources()->::firmament::ResourceVector::MergeFrom(from.available_resources());
  }
  if (from.has_reserved_resources()) {
    mutable_reserved_resources()->::firmament::ResourceVector::MergeFrom(from.reserved_resources());
  }
  if (from.has_min_available_resources_below()) {
    mutable_min_available_resources_below()->::firmament::ResourceVector::MergeFrom(from.min_available_resources_below());
  }
  if (from.has_max_available_resources_below()) {
    mutable_max_available_resources_below()->::firmament::ResourceVector::MergeFrom(from.max_available_resources_below());
  }
  if (from.has_min_unreserved_resources_below()) {
    mutable_min_unreserved_resources_below()->::firmament::ResourceVector::MergeFrom(from.min_unreserved_resources_below());
  }
  if (from.has_max_unreserved_resources_below()) {
    mutable_max_unreserved_resources_below()->::firmament::ResourceVector::MergeFrom(from.max_unreserved_resources_below());
  }
  if (from.has_resource_capacity()) {
    mutable_resource_capacity()->::firmament::ResourceVector::MergeFrom(from.resource_capacity());
  }
  if (from.has_whare_map_stats()) {
    mutable_whare_map_stats()->::firmament::WhareMapStats::MergeFrom(from.whare_map_stats());
  }
  if (from.has_coco_interference_scores()) {
    mutable_coco_interference_scores()->::firmament::CoCoInterferenceScores::MergeFrom(from.coco_interference_scores());
  }
  if (from.trace_machine_id() != 0) {
    set_trace_machine_id(from.trace_machine_id());
  }
}

void ResourceDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.ResourceDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceDescriptor::CopyFrom(const ResourceDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.ResourceDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResourceDescriptor::IsInitialized() const {

  return true;
}

void ResourceDescriptor::Swap(ResourceDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceDescriptor::InternalSwap(ResourceDescriptor* other) {
  uuid_.Swap(&other->uuid_);
  friendly_name_.Swap(&other->friendly_name_);
  descriptive_name_.Swap(&other->descriptive_name_);
  std::swap(state_, other->state_);
  std::swap(task_capacity_, other->task_capacity_);
  std::swap(last_heartbeat_, other->last_heartbeat_);
  std::swap(type_, other->type_);
  std::swap(schedulable_, other->schedulable_);
  current_running_tasks_.UnsafeArenaSwap(&other->current_running_tasks_);
  std::swap(num_running_tasks_below_, other->num_running_tasks_below_);
  std::swap(num_slots_below_, other->num_slots_below_);
  std::swap(available_resources_, other->available_resources_);
  std::swap(reserved_resources_, other->reserved_resources_);
  std::swap(min_available_resources_below_, other->min_available_resources_below_);
  std::swap(max_available_resources_below_, other->max_available_resources_below_);
  std::swap(min_unreserved_resources_below_, other->min_unreserved_resources_below_);
  std::swap(max_unreserved_resources_below_, other->max_unreserved_resources_below_);
  std::swap(resource_capacity_, other->resource_capacity_);
  std::swap(whare_map_stats_, other->whare_map_stats_);
  std::swap(coco_interference_scores_, other->coco_interference_scores_);
  std::swap(trace_machine_id_, other->trace_machine_id_);
  labels_.UnsafeArenaSwap(&other->labels_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceDescriptor_descriptor_;
  metadata.reflection = ResourceDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceDescriptor

// optional string uuid = 1;
void ResourceDescriptor::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResourceDescriptor::uuid() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResourceDescriptor::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.uuid)
}
void ResourceDescriptor::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.ResourceDescriptor.uuid)
}
void ResourceDescriptor::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.ResourceDescriptor.uuid)
}
::std::string* ResourceDescriptor::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResourceDescriptor::release_uuid() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResourceDescriptor::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.uuid)
}

// optional string friendly_name = 2;
void ResourceDescriptor::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResourceDescriptor::friendly_name() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.friendly_name)
  return friendly_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResourceDescriptor::set_friendly_name(const ::std::string& value) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.friendly_name)
}
void ResourceDescriptor::set_friendly_name(const char* value) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.ResourceDescriptor.friendly_name)
}
void ResourceDescriptor::set_friendly_name(const char* value, size_t size) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.ResourceDescriptor.friendly_name)
}
::std::string* ResourceDescriptor::mutable_friendly_name() {
  
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResourceDescriptor::release_friendly_name() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.friendly_name)
  
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResourceDescriptor::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != NULL) {
    
  } else {
    
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.friendly_name)
}

// optional string descriptive_name = 3;
void ResourceDescriptor::clear_descriptive_name() {
  descriptive_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResourceDescriptor::descriptive_name() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.descriptive_name)
  return descriptive_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResourceDescriptor::set_descriptive_name(const ::std::string& value) {
  
  descriptive_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.descriptive_name)
}
void ResourceDescriptor::set_descriptive_name(const char* value) {
  
  descriptive_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.ResourceDescriptor.descriptive_name)
}
void ResourceDescriptor::set_descriptive_name(const char* value, size_t size) {
  
  descriptive_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.ResourceDescriptor.descriptive_name)
}
::std::string* ResourceDescriptor::mutable_descriptive_name() {
  
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.descriptive_name)
  return descriptive_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResourceDescriptor::release_descriptive_name() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.descriptive_name)
  
  return descriptive_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResourceDescriptor::set_allocated_descriptive_name(::std::string* descriptive_name) {
  if (descriptive_name != NULL) {
    
  } else {
    
  }
  descriptive_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptive_name);
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.descriptive_name)
}

// optional .firmament.ResourceDescriptor.ResourceState state = 4;
void ResourceDescriptor::clear_state() {
  state_ = 0;
}
::firmament::ResourceDescriptor_ResourceState ResourceDescriptor::state() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.state)
  return static_cast< ::firmament::ResourceDescriptor_ResourceState >(state_);
}
void ResourceDescriptor::set_state(::firmament::ResourceDescriptor_ResourceState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.state)
}

// optional uint64 task_capacity = 5;
void ResourceDescriptor::clear_task_capacity() {
  task_capacity_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResourceDescriptor::task_capacity() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.task_capacity)
  return task_capacity_;
}
void ResourceDescriptor::set_task_capacity(::google::protobuf::uint64 value) {
  
  task_capacity_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.task_capacity)
}

// optional uint64 last_heartbeat = 6;
void ResourceDescriptor::clear_last_heartbeat() {
  last_heartbeat_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResourceDescriptor::last_heartbeat() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.last_heartbeat)
  return last_heartbeat_;
}
void ResourceDescriptor::set_last_heartbeat(::google::protobuf::uint64 value) {
  
  last_heartbeat_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.last_heartbeat)
}

// optional .firmament.ResourceDescriptor.ResourceType type = 7;
void ResourceDescriptor::clear_type() {
  type_ = 0;
}
::firmament::ResourceDescriptor_ResourceType ResourceDescriptor::type() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.type)
  return static_cast< ::firmament::ResourceDescriptor_ResourceType >(type_);
}
void ResourceDescriptor::set_type(::firmament::ResourceDescriptor_ResourceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.type)
}

// optional bool schedulable = 8;
void ResourceDescriptor::clear_schedulable() {
  schedulable_ = false;
}
bool ResourceDescriptor::schedulable() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.schedulable)
  return schedulable_;
}
void ResourceDescriptor::set_schedulable(bool value) {
  
  schedulable_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.schedulable)
}

// repeated uint64 current_running_tasks = 9;
int ResourceDescriptor::current_running_tasks_size() const {
  return current_running_tasks_.size();
}
void ResourceDescriptor::clear_current_running_tasks() {
  current_running_tasks_.Clear();
}
::google::protobuf::uint64 ResourceDescriptor::current_running_tasks(int index) const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.current_running_tasks)
  return current_running_tasks_.Get(index);
}
void ResourceDescriptor::set_current_running_tasks(int index, ::google::protobuf::uint64 value) {
  current_running_tasks_.Set(index, value);
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.current_running_tasks)
}
void ResourceDescriptor::add_current_running_tasks(::google::protobuf::uint64 value) {
  current_running_tasks_.Add(value);
  // @@protoc_insertion_point(field_add:firmament.ResourceDescriptor.current_running_tasks)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ResourceDescriptor::current_running_tasks() const {
  // @@protoc_insertion_point(field_list:firmament.ResourceDescriptor.current_running_tasks)
  return current_running_tasks_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ResourceDescriptor::mutable_current_running_tasks() {
  // @@protoc_insertion_point(field_mutable_list:firmament.ResourceDescriptor.current_running_tasks)
  return &current_running_tasks_;
}

// optional uint64 num_running_tasks_below = 10;
void ResourceDescriptor::clear_num_running_tasks_below() {
  num_running_tasks_below_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResourceDescriptor::num_running_tasks_below() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.num_running_tasks_below)
  return num_running_tasks_below_;
}
void ResourceDescriptor::set_num_running_tasks_below(::google::protobuf::uint64 value) {
  
  num_running_tasks_below_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.num_running_tasks_below)
}

// optional uint64 num_slots_below = 11;
void ResourceDescriptor::clear_num_slots_below() {
  num_slots_below_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResourceDescriptor::num_slots_below() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.num_slots_below)
  return num_slots_below_;
}
void ResourceDescriptor::set_num_slots_below(::google::protobuf::uint64 value) {
  
  num_slots_below_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.num_slots_below)
}

// optional .firmament.ResourceVector available_resources = 12;
bool ResourceDescriptor::has_available_resources() const {
  return this != internal_default_instance() && available_resources_ != NULL;
}
void ResourceDescriptor::clear_available_resources() {
  if (GetArenaNoVirtual() == NULL && available_resources_ != NULL) delete available_resources_;
  available_resources_ = NULL;
}
const ::firmament::ResourceVector& ResourceDescriptor::available_resources() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.available_resources)
  return available_resources_ != NULL ? *available_resources_
                         : *::firmament::ResourceVector::internal_default_instance();
}
::firmament::ResourceVector* ResourceDescriptor::mutable_available_resources() {
  
  if (available_resources_ == NULL) {
    available_resources_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.available_resources)
  return available_resources_;
}
::firmament::ResourceVector* ResourceDescriptor::release_available_resources() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.available_resources)
  
  ::firmament::ResourceVector* temp = available_resources_;
  available_resources_ = NULL;
  return temp;
}
void ResourceDescriptor::set_allocated_available_resources(::firmament::ResourceVector* available_resources) {
  delete available_resources_;
  available_resources_ = available_resources;
  if (available_resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.available_resources)
}

// optional .firmament.ResourceVector reserved_resources = 13;
bool ResourceDescriptor::has_reserved_resources() const {
  return this != internal_default_instance() && reserved_resources_ != NULL;
}
void ResourceDescriptor::clear_reserved_resources() {
  if (GetArenaNoVirtual() == NULL && reserved_resources_ != NULL) delete reserved_resources_;
  reserved_resources_ = NULL;
}
const ::firmament::ResourceVector& ResourceDescriptor::reserved_resources() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.reserved_resources)
  return reserved_resources_ != NULL ? *reserved_resources_
                         : *::firmament::ResourceVector::internal_default_instance();
}
::firmament::ResourceVector* ResourceDescriptor::mutable_reserved_resources() {
  
  if (reserved_resources_ == NULL) {
    reserved_resources_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.reserved_resources)
  return reserved_resources_;
}
::firmament::ResourceVector* ResourceDescriptor::release_reserved_resources() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.reserved_resources)
  
  ::firmament::ResourceVector* temp = reserved_resources_;
  reserved_resources_ = NULL;
  return temp;
}
void ResourceDescriptor::set_allocated_reserved_resources(::firmament::ResourceVector* reserved_resources) {
  delete reserved_resources_;
  reserved_resources_ = reserved_resources;
  if (reserved_resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.reserved_resources)
}

// optional .firmament.ResourceVector min_available_resources_below = 14;
bool ResourceDescriptor::has_min_available_resources_below() const {
  return this != internal_default_instance() && min_available_resources_below_ != NULL;
}
void ResourceDescriptor::clear_min_available_resources_below() {
  if (GetArenaNoVirtual() == NULL && min_available_resources_below_ != NULL) delete min_available_resources_below_;
  min_available_resources_below_ = NULL;
}
const ::firmament::ResourceVector& ResourceDescriptor::min_available_resources_below() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.min_available_resources_below)
  return min_available_resources_below_ != NULL ? *min_available_resources_below_
                         : *::firmament::ResourceVector::internal_default_instance();
}
::firmament::ResourceVector* ResourceDescriptor::mutable_min_available_resources_below() {
  
  if (min_available_resources_below_ == NULL) {
    min_available_resources_below_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.min_available_resources_below)
  return min_available_resources_below_;
}
::firmament::ResourceVector* ResourceDescriptor::release_min_available_resources_below() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.min_available_resources_below)
  
  ::firmament::ResourceVector* temp = min_available_resources_below_;
  min_available_resources_below_ = NULL;
  return temp;
}
void ResourceDescriptor::set_allocated_min_available_resources_below(::firmament::ResourceVector* min_available_resources_below) {
  delete min_available_resources_below_;
  min_available_resources_below_ = min_available_resources_below;
  if (min_available_resources_below) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.min_available_resources_below)
}

// optional .firmament.ResourceVector max_available_resources_below = 15;
bool ResourceDescriptor::has_max_available_resources_below() const {
  return this != internal_default_instance() && max_available_resources_below_ != NULL;
}
void ResourceDescriptor::clear_max_available_resources_below() {
  if (GetArenaNoVirtual() == NULL && max_available_resources_below_ != NULL) delete max_available_resources_below_;
  max_available_resources_below_ = NULL;
}
const ::firmament::ResourceVector& ResourceDescriptor::max_available_resources_below() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.max_available_resources_below)
  return max_available_resources_below_ != NULL ? *max_available_resources_below_
                         : *::firmament::ResourceVector::internal_default_instance();
}
::firmament::ResourceVector* ResourceDescriptor::mutable_max_available_resources_below() {
  
  if (max_available_resources_below_ == NULL) {
    max_available_resources_below_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.max_available_resources_below)
  return max_available_resources_below_;
}
::firmament::ResourceVector* ResourceDescriptor::release_max_available_resources_below() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.max_available_resources_below)
  
  ::firmament::ResourceVector* temp = max_available_resources_below_;
  max_available_resources_below_ = NULL;
  return temp;
}
void ResourceDescriptor::set_allocated_max_available_resources_below(::firmament::ResourceVector* max_available_resources_below) {
  delete max_available_resources_below_;
  max_available_resources_below_ = max_available_resources_below;
  if (max_available_resources_below) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.max_available_resources_below)
}

// optional .firmament.ResourceVector min_unreserved_resources_below = 16;
bool ResourceDescriptor::has_min_unreserved_resources_below() const {
  return this != internal_default_instance() && min_unreserved_resources_below_ != NULL;
}
void ResourceDescriptor::clear_min_unreserved_resources_below() {
  if (GetArenaNoVirtual() == NULL && min_unreserved_resources_below_ != NULL) delete min_unreserved_resources_below_;
  min_unreserved_resources_below_ = NULL;
}
const ::firmament::ResourceVector& ResourceDescriptor::min_unreserved_resources_below() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.min_unreserved_resources_below)
  return min_unreserved_resources_below_ != NULL ? *min_unreserved_resources_below_
                         : *::firmament::ResourceVector::internal_default_instance();
}
::firmament::ResourceVector* ResourceDescriptor::mutable_min_unreserved_resources_below() {
  
  if (min_unreserved_resources_below_ == NULL) {
    min_unreserved_resources_below_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.min_unreserved_resources_below)
  return min_unreserved_resources_below_;
}
::firmament::ResourceVector* ResourceDescriptor::release_min_unreserved_resources_below() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.min_unreserved_resources_below)
  
  ::firmament::ResourceVector* temp = min_unreserved_resources_below_;
  min_unreserved_resources_below_ = NULL;
  return temp;
}
void ResourceDescriptor::set_allocated_min_unreserved_resources_below(::firmament::ResourceVector* min_unreserved_resources_below) {
  delete min_unreserved_resources_below_;
  min_unreserved_resources_below_ = min_unreserved_resources_below;
  if (min_unreserved_resources_below) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.min_unreserved_resources_below)
}

// optional .firmament.ResourceVector max_unreserved_resources_below = 17;
bool ResourceDescriptor::has_max_unreserved_resources_below() const {
  return this != internal_default_instance() && max_unreserved_resources_below_ != NULL;
}
void ResourceDescriptor::clear_max_unreserved_resources_below() {
  if (GetArenaNoVirtual() == NULL && max_unreserved_resources_below_ != NULL) delete max_unreserved_resources_below_;
  max_unreserved_resources_below_ = NULL;
}
const ::firmament::ResourceVector& ResourceDescriptor::max_unreserved_resources_below() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.max_unreserved_resources_below)
  return max_unreserved_resources_below_ != NULL ? *max_unreserved_resources_below_
                         : *::firmament::ResourceVector::internal_default_instance();
}
::firmament::ResourceVector* ResourceDescriptor::mutable_max_unreserved_resources_below() {
  
  if (max_unreserved_resources_below_ == NULL) {
    max_unreserved_resources_below_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.max_unreserved_resources_below)
  return max_unreserved_resources_below_;
}
::firmament::ResourceVector* ResourceDescriptor::release_max_unreserved_resources_below() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.max_unreserved_resources_below)
  
  ::firmament::ResourceVector* temp = max_unreserved_resources_below_;
  max_unreserved_resources_below_ = NULL;
  return temp;
}
void ResourceDescriptor::set_allocated_max_unreserved_resources_below(::firmament::ResourceVector* max_unreserved_resources_below) {
  delete max_unreserved_resources_below_;
  max_unreserved_resources_below_ = max_unreserved_resources_below;
  if (max_unreserved_resources_below) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.max_unreserved_resources_below)
}

// optional .firmament.ResourceVector resource_capacity = 18;
bool ResourceDescriptor::has_resource_capacity() const {
  return this != internal_default_instance() && resource_capacity_ != NULL;
}
void ResourceDescriptor::clear_resource_capacity() {
  if (GetArenaNoVirtual() == NULL && resource_capacity_ != NULL) delete resource_capacity_;
  resource_capacity_ = NULL;
}
const ::firmament::ResourceVector& ResourceDescriptor::resource_capacity() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.resource_capacity)
  return resource_capacity_ != NULL ? *resource_capacity_
                         : *::firmament::ResourceVector::internal_default_instance();
}
::firmament::ResourceVector* ResourceDescriptor::mutable_resource_capacity() {
  
  if (resource_capacity_ == NULL) {
    resource_capacity_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.resource_capacity)
  return resource_capacity_;
}
::firmament::ResourceVector* ResourceDescriptor::release_resource_capacity() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.resource_capacity)
  
  ::firmament::ResourceVector* temp = resource_capacity_;
  resource_capacity_ = NULL;
  return temp;
}
void ResourceDescriptor::set_allocated_resource_capacity(::firmament::ResourceVector* resource_capacity) {
  delete resource_capacity_;
  resource_capacity_ = resource_capacity;
  if (resource_capacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.resource_capacity)
}

// optional .firmament.WhareMapStats whare_map_stats = 19;
bool ResourceDescriptor::has_whare_map_stats() const {
  return this != internal_default_instance() && whare_map_stats_ != NULL;
}
void ResourceDescriptor::clear_whare_map_stats() {
  if (GetArenaNoVirtual() == NULL && whare_map_stats_ != NULL) delete whare_map_stats_;
  whare_map_stats_ = NULL;
}
const ::firmament::WhareMapStats& ResourceDescriptor::whare_map_stats() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.whare_map_stats)
  return whare_map_stats_ != NULL ? *whare_map_stats_
                         : *::firmament::WhareMapStats::internal_default_instance();
}
::firmament::WhareMapStats* ResourceDescriptor::mutable_whare_map_stats() {
  
  if (whare_map_stats_ == NULL) {
    whare_map_stats_ = new ::firmament::WhareMapStats;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.whare_map_stats)
  return whare_map_stats_;
}
::firmament::WhareMapStats* ResourceDescriptor::release_whare_map_stats() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.whare_map_stats)
  
  ::firmament::WhareMapStats* temp = whare_map_stats_;
  whare_map_stats_ = NULL;
  return temp;
}
void ResourceDescriptor::set_allocated_whare_map_stats(::firmament::WhareMapStats* whare_map_stats) {
  delete whare_map_stats_;
  whare_map_stats_ = whare_map_stats;
  if (whare_map_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.whare_map_stats)
}

// optional .firmament.CoCoInterferenceScores coco_interference_scores = 20;
bool ResourceDescriptor::has_coco_interference_scores() const {
  return this != internal_default_instance() && coco_interference_scores_ != NULL;
}
void ResourceDescriptor::clear_coco_interference_scores() {
  if (GetArenaNoVirtual() == NULL && coco_interference_scores_ != NULL) delete coco_interference_scores_;
  coco_interference_scores_ = NULL;
}
const ::firmament::CoCoInterferenceScores& ResourceDescriptor::coco_interference_scores() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.coco_interference_scores)
  return coco_interference_scores_ != NULL ? *coco_interference_scores_
                         : *::firmament::CoCoInterferenceScores::internal_default_instance();
}
::firmament::CoCoInterferenceScores* ResourceDescriptor::mutable_coco_interference_scores() {
  
  if (coco_interference_scores_ == NULL) {
    coco_interference_scores_ = new ::firmament::CoCoInterferenceScores;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.coco_interference_scores)
  return coco_interference_scores_;
}
::firmament::CoCoInterferenceScores* ResourceDescriptor::release_coco_interference_scores() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.coco_interference_scores)
  
  ::firmament::CoCoInterferenceScores* temp = coco_interference_scores_;
  coco_interference_scores_ = NULL;
  return temp;
}
void ResourceDescriptor::set_allocated_coco_interference_scores(::firmament::CoCoInterferenceScores* coco_interference_scores) {
  delete coco_interference_scores_;
  coco_interference_scores_ = coco_interference_scores;
  if (coco_interference_scores) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.coco_interference_scores)
}

// optional uint64 trace_machine_id = 21;
void ResourceDescriptor::clear_trace_machine_id() {
  trace_machine_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResourceDescriptor::trace_machine_id() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.trace_machine_id)
  return trace_machine_id_;
}
void ResourceDescriptor::set_trace_machine_id(::google::protobuf::uint64 value) {
  
  trace_machine_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.trace_machine_id)
}

// repeated .firmament.Label labels = 32;
int ResourceDescriptor::labels_size() const {
  return labels_.size();
}
void ResourceDescriptor::clear_labels() {
  labels_.Clear();
}
const ::firmament::Label& ResourceDescriptor::labels(int index) const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.labels)
  return labels_.Get(index);
}
::firmament::Label* ResourceDescriptor::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.labels)
  return labels_.Mutable(index);
}
::firmament::Label* ResourceDescriptor::add_labels() {
  // @@protoc_insertion_point(field_add:firmament.ResourceDescriptor.labels)
  return labels_.Add();
}
::google::protobuf::RepeatedPtrField< ::firmament::Label >*
ResourceDescriptor::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:firmament.ResourceDescriptor.labels)
  return &labels_;
}
const ::google::protobuf::RepeatedPtrField< ::firmament::Label >&
ResourceDescriptor::labels() const {
  // @@protoc_insertion_point(field_list:firmament.ResourceDescriptor.labels)
  return labels_;
}

inline const ResourceDescriptor* ResourceDescriptor::internal_default_instance() {
  return &ResourceDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
