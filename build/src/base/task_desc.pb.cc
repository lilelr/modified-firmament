// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/task_desc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/task_desc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* TaskDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskDescriptor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskDescriptor_TaskState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskDescriptor_TaskType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2ftask_5fdesc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_base_2ftask_5fdesc_2eproto() {
  protobuf_AddDesc_base_2ftask_5fdesc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/task_desc.proto");
  GOOGLE_CHECK(file != NULL);
  TaskDescriptor_descriptor_ = file->message_type(0);
  static const int TaskDescriptor_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, dependencies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, outputs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, binary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, spawned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, scheduled_to_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, last_heartbeat_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, last_heartbeat_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, delegated_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, delegated_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, submit_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, finish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, total_unscheduled_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, total_run_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, relative_deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, absolute_deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, input_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, inject_task_lib_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, resource_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, task_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, final_report_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, trace_job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, trace_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, labels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, label_selectors_),
  };
  TaskDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskDescriptor_descriptor_,
      TaskDescriptor::internal_default_instance(),
      TaskDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskDescriptor, _internal_metadata_));
  TaskDescriptor_TaskState_descriptor_ = TaskDescriptor_descriptor_->enum_type(0);
  TaskDescriptor_TaskType_descriptor_ = TaskDescriptor_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2ftask_5fdesc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskDescriptor_descriptor_, TaskDescriptor::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2ftask_5fdesc_2eproto() {
  TaskDescriptor_default_instance_.Shutdown();
  delete TaskDescriptor_reflection_;
}

void protobuf_InitDefaults_base_2ftask_5fdesc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::firmament::protobuf_InitDefaults_base_2flabel_2eproto();
  ::firmament::protobuf_InitDefaults_base_2flabel_5fselector_2eproto();
  ::firmament::protobuf_InitDefaults_base_2freference_5fdesc_2eproto();
  ::firmament::protobuf_InitDefaults_base_2fresource_5fvector_2eproto();
  ::firmament::protobuf_InitDefaults_base_2ftask_5ffinal_5freport_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  TaskDescriptor_default_instance_.DefaultConstruct();
  TaskDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_base_2ftask_5fdesc_2eproto_once_);
void protobuf_InitDefaults_base_2ftask_5fdesc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_base_2ftask_5fdesc_2eproto_once_,
                 &protobuf_InitDefaults_base_2ftask_5fdesc_2eproto_impl);
}
void protobuf_AddDesc_base_2ftask_5fdesc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_base_2ftask_5fdesc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024base/task_desc.proto\022\tfirmament\032\020base/"
    "label.proto\032\031base/label_selector.proto\032\031"
    "base/reference_desc.proto\032\032base/resource"
    "_vector.proto\032\034base/task_final_report.pr"
    "oto\"\243\t\n\016TaskDescriptor\022\013\n\003uid\030\001 \001(\004\022\014\n\004n"
    "ame\030\002 \001(\t\0222\n\005state\030\003 \001(\0162#.firmament.Tas"
    "kDescriptor.TaskState\022\016\n\006job_id\030\004 \001(\t\022\r\n"
    "\005index\030\005 \001(\004\0224\n\014dependencies\030\006 \003(\0132\036.fir"
    "mament.ReferenceDescriptor\022/\n\007outputs\030\007 "
    "\003(\0132\036.firmament.ReferenceDescriptor\022\016\n\006b"
    "inary\030\010 \001(\t\022\014\n\004args\030\t \003(\t\022*\n\007spawned\030\n \003"
    "(\0132\031.firmament.TaskDescriptor\022\035\n\025schedul"
    "ed_to_resource\030\013 \001(\t\022\037\n\027last_heartbeat_l"
    "ocation\030\014 \001(\t\022\033\n\023last_heartbeat_time\030\r \001"
    "(\004\022\024\n\014delegated_to\030\016 \001(\t\022\026\n\016delegated_fr"
    "om\030\017 \001(\t\022\023\n\013submit_time\030\020 \001(\004\022\022\n\nstart_t"
    "ime\030\021 \001(\004\022\023\n\013finish_time\030\022 \001(\004\022\036\n\026total_"
    "unscheduled_time\030\023 \001(\004\022\026\n\016total_run_time"
    "\030\024 \001(\004\022\031\n\021relative_deadline\030\025 \001(\004\022\031\n\021abs"
    "olute_deadline\030\026 \001(\004\022\014\n\004port\030\027 \001(\004\022\022\n\nin"
    "put_size\030\030 \001(\004\022\027\n\017inject_task_lib\030\031 \001(\010\022"
    "3\n\020resource_request\030\032 \001(\0132\031.firmament.Re"
    "sourceVector\022\020\n\010priority\030\033 \001(\r\0225\n\ttask_t"
    "ype\030\034 \001(\0162\".firmament.TaskDescriptor.Tas"
    "kType\0220\n\014final_report\030\035 \001(\0132\032.firmament."
    "TaskFinalReport\022\024\n\014trace_job_id\030\036 \001(\004\022\025\n"
    "\rtrace_task_id\030\037 \001(\004\022 \n\006labels\030  \003(\0132\020.f"
    "irmament.Label\0221\n\017label_selectors\030! \003(\0132"
    "\030.firmament.LabelSelector\"\223\001\n\tTaskState\022"
    "\013\n\007CREATED\020\000\022\014\n\010BLOCKING\020\001\022\014\n\010RUNNABLE\020\002"
    "\022\014\n\010ASSIGNED\020\003\022\013\n\007RUNNING\020\004\022\r\n\tCOMPLETED"
    "\020\005\022\n\n\006FAILED\020\006\022\013\n\007ABORTED\020\007\022\r\n\tDELEGATED"
    "\020\010\022\013\n\007UNKNOWN\020\t\"8\n\010TaskType\022\t\n\005SHEEP\020\000\022\n"
    "\n\006RABBIT\020\001\022\t\n\005DEVIL\020\002\022\n\n\006TURTLE\020\003b\006proto"
    "3", 1361);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/task_desc.proto", &protobuf_RegisterTypes);
  ::firmament::protobuf_AddDesc_base_2flabel_2eproto();
  ::firmament::protobuf_AddDesc_base_2flabel_5fselector_2eproto();
  ::firmament::protobuf_AddDesc_base_2freference_5fdesc_2eproto();
  ::firmament::protobuf_AddDesc_base_2fresource_5fvector_2eproto();
  ::firmament::protobuf_AddDesc_base_2ftask_5ffinal_5freport_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2ftask_5fdesc_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_base_2ftask_5fdesc_2eproto_once_);
void protobuf_AddDesc_base_2ftask_5fdesc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_base_2ftask_5fdesc_2eproto_once_,
                 &protobuf_AddDesc_base_2ftask_5fdesc_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2ftask_5fdesc_2eproto {
  StaticDescriptorInitializer_base_2ftask_5fdesc_2eproto() {
    protobuf_AddDesc_base_2ftask_5fdesc_2eproto();
  }
} static_descriptor_initializer_base_2ftask_5fdesc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* TaskDescriptor_TaskState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskDescriptor_TaskState_descriptor_;
}
bool TaskDescriptor_TaskState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TaskDescriptor_TaskState TaskDescriptor::CREATED;
const TaskDescriptor_TaskState TaskDescriptor::BLOCKING;
const TaskDescriptor_TaskState TaskDescriptor::RUNNABLE;
const TaskDescriptor_TaskState TaskDescriptor::ASSIGNED;
const TaskDescriptor_TaskState TaskDescriptor::RUNNING;
const TaskDescriptor_TaskState TaskDescriptor::COMPLETED;
const TaskDescriptor_TaskState TaskDescriptor::FAILED;
const TaskDescriptor_TaskState TaskDescriptor::ABORTED;
const TaskDescriptor_TaskState TaskDescriptor::DELEGATED;
const TaskDescriptor_TaskState TaskDescriptor::UNKNOWN;
const TaskDescriptor_TaskState TaskDescriptor::TaskState_MIN;
const TaskDescriptor_TaskState TaskDescriptor::TaskState_MAX;
const int TaskDescriptor::TaskState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TaskDescriptor_TaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskDescriptor_TaskType_descriptor_;
}
bool TaskDescriptor_TaskType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TaskDescriptor_TaskType TaskDescriptor::SHEEP;
const TaskDescriptor_TaskType TaskDescriptor::RABBIT;
const TaskDescriptor_TaskType TaskDescriptor::DEVIL;
const TaskDescriptor_TaskType TaskDescriptor::TURTLE;
const TaskDescriptor_TaskType TaskDescriptor::TaskType_MIN;
const TaskDescriptor_TaskType TaskDescriptor::TaskType_MAX;
const int TaskDescriptor::TaskType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskDescriptor::kUidFieldNumber;
const int TaskDescriptor::kNameFieldNumber;
const int TaskDescriptor::kStateFieldNumber;
const int TaskDescriptor::kJobIdFieldNumber;
const int TaskDescriptor::kIndexFieldNumber;
const int TaskDescriptor::kDependenciesFieldNumber;
const int TaskDescriptor::kOutputsFieldNumber;
const int TaskDescriptor::kBinaryFieldNumber;
const int TaskDescriptor::kArgsFieldNumber;
const int TaskDescriptor::kSpawnedFieldNumber;
const int TaskDescriptor::kScheduledToResourceFieldNumber;
const int TaskDescriptor::kLastHeartbeatLocationFieldNumber;
const int TaskDescriptor::kLastHeartbeatTimeFieldNumber;
const int TaskDescriptor::kDelegatedToFieldNumber;
const int TaskDescriptor::kDelegatedFromFieldNumber;
const int TaskDescriptor::kSubmitTimeFieldNumber;
const int TaskDescriptor::kStartTimeFieldNumber;
const int TaskDescriptor::kFinishTimeFieldNumber;
const int TaskDescriptor::kTotalUnscheduledTimeFieldNumber;
const int TaskDescriptor::kTotalRunTimeFieldNumber;
const int TaskDescriptor::kRelativeDeadlineFieldNumber;
const int TaskDescriptor::kAbsoluteDeadlineFieldNumber;
const int TaskDescriptor::kPortFieldNumber;
const int TaskDescriptor::kInputSizeFieldNumber;
const int TaskDescriptor::kInjectTaskLibFieldNumber;
const int TaskDescriptor::kResourceRequestFieldNumber;
const int TaskDescriptor::kPriorityFieldNumber;
const int TaskDescriptor::kTaskTypeFieldNumber;
const int TaskDescriptor::kFinalReportFieldNumber;
const int TaskDescriptor::kTraceJobIdFieldNumber;
const int TaskDescriptor::kTraceTaskIdFieldNumber;
const int TaskDescriptor::kLabelsFieldNumber;
const int TaskDescriptor::kLabelSelectorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskDescriptor::TaskDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_base_2ftask_5fdesc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.TaskDescriptor)
}

void TaskDescriptor::InitAsDefaultInstance() {
  resource_request_ = const_cast< ::firmament::ResourceVector*>(
      ::firmament::ResourceVector::internal_default_instance());
  final_report_ = const_cast< ::firmament::TaskFinalReport*>(
      ::firmament::TaskFinalReport::internal_default_instance());
}

TaskDescriptor::TaskDescriptor(const TaskDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.TaskDescriptor)
}

void TaskDescriptor::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scheduled_to_resource_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_heartbeat_location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delegated_to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delegated_from_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_request_ = NULL;
  final_report_ = NULL;
  ::memset(&uid_, 0, reinterpret_cast<char*>(&trace_task_id_) -
    reinterpret_cast<char*>(&uid_) + sizeof(trace_task_id_));
  _cached_size_ = 0;
}

TaskDescriptor::~TaskDescriptor() {
  // @@protoc_insertion_point(destructor:firmament.TaskDescriptor)
  SharedDtor();
}

void TaskDescriptor::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  job_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scheduled_to_resource_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_heartbeat_location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delegated_to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delegated_from_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &TaskDescriptor_default_instance_.get()) {
    delete resource_request_;
    delete final_report_;
  }
}

void TaskDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskDescriptor_descriptor_;
}

const TaskDescriptor& TaskDescriptor::default_instance() {
  protobuf_InitDefaults_base_2ftask_5fdesc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TaskDescriptor> TaskDescriptor_default_instance_;

TaskDescriptor* TaskDescriptor::New(::google::protobuf::Arena* arena) const {
  TaskDescriptor* n = new TaskDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.TaskDescriptor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaskDescriptor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskDescriptor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, index_);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scheduled_to_resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_heartbeat_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  last_heartbeat_time_ = GOOGLE_ULONGLONG(0);
  delegated_to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  delegated_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  submit_time_ = GOOGLE_ULONGLONG(0);
  ZR_(start_time_, input_size_);
  ZR_(priority_, trace_task_id_);
  inject_task_lib_ = false;
  if (GetArenaNoVirtual() == NULL && resource_request_ != NULL) delete resource_request_;
  resource_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && final_report_ != NULL) delete final_report_;
  final_report_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  dependencies_.Clear();
  outputs_.Clear();
  args_.Clear();
  spawned_.Clear();
  labels_.Clear();
  label_selectors_.Clear();
}

bool TaskDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.TaskDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.TaskDescriptor.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .firmament.TaskDescriptor.TaskState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::firmament::TaskDescriptor_TaskState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_job_id;
        break;
      }

      // optional string job_id = 4;
      case 4: {
        if (tag == 34) {
         parse_job_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->job_id().data(), this->job_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.TaskDescriptor.job_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_index;
        break;
      }

      // optional uint64 index = 5;
      case 5: {
        if (tag == 40) {
         parse_index:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_dependencies;
        break;
      }

      // repeated .firmament.ReferenceDescriptor dependencies = 6;
      case 6: {
        if (tag == 50) {
         parse_dependencies:
          DO_(input->IncrementRecursionDepth());
         parse_loop_dependencies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dependencies()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_dependencies;
        if (input->ExpectTag(58)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .firmament.ReferenceDescriptor outputs = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_outputs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_outputs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(66)) goto parse_binary;
        break;
      }

      // optional string binary = 8;
      case 8: {
        if (tag == 66) {
         parse_binary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_binary()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->binary().data(), this->binary().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.TaskDescriptor.binary"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_args;
        break;
      }

      // repeated string args = 9;
      case 9: {
        if (tag == 74) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.TaskDescriptor.args"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_args;
        if (input->ExpectTag(82)) goto parse_spawned;
        break;
      }

      // repeated .firmament.TaskDescriptor spawned = 10;
      case 10: {
        if (tag == 82) {
         parse_spawned:
          DO_(input->IncrementRecursionDepth());
         parse_loop_spawned:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_spawned()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_spawned;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(90)) goto parse_scheduled_to_resource;
        break;
      }

      // optional string scheduled_to_resource = 11;
      case 11: {
        if (tag == 90) {
         parse_scheduled_to_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scheduled_to_resource()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scheduled_to_resource().data(), this->scheduled_to_resource().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.TaskDescriptor.scheduled_to_resource"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_last_heartbeat_location;
        break;
      }

      // optional string last_heartbeat_location = 12;
      case 12: {
        if (tag == 98) {
         parse_last_heartbeat_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_heartbeat_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->last_heartbeat_location().data(), this->last_heartbeat_location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.TaskDescriptor.last_heartbeat_location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_last_heartbeat_time;
        break;
      }

      // optional uint64 last_heartbeat_time = 13;
      case 13: {
        if (tag == 104) {
         parse_last_heartbeat_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_heartbeat_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_delegated_to;
        break;
      }

      // optional string delegated_to = 14;
      case 14: {
        if (tag == 114) {
         parse_delegated_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delegated_to()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->delegated_to().data(), this->delegated_to().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.TaskDescriptor.delegated_to"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_delegated_from;
        break;
      }

      // optional string delegated_from = 15;
      case 15: {
        if (tag == 122) {
         parse_delegated_from:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_delegated_from()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->delegated_from().data(), this->delegated_from().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.TaskDescriptor.delegated_from"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_submit_time;
        break;
      }

      // optional uint64 submit_time = 16;
      case 16: {
        if (tag == 128) {
         parse_submit_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &submit_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 17;
      case 17: {
        if (tag == 136) {
         parse_start_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_finish_time;
        break;
      }

      // optional uint64 finish_time = 18;
      case 18: {
        if (tag == 144) {
         parse_finish_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finish_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_total_unscheduled_time;
        break;
      }

      // optional uint64 total_unscheduled_time = 19;
      case 19: {
        if (tag == 152) {
         parse_total_unscheduled_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_unscheduled_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_total_run_time;
        break;
      }

      // optional uint64 total_run_time = 20;
      case 20: {
        if (tag == 160) {
         parse_total_run_time:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_run_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_relative_deadline;
        break;
      }

      // optional uint64 relative_deadline = 21;
      case 21: {
        if (tag == 168) {
         parse_relative_deadline:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &relative_deadline_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_absolute_deadline;
        break;
      }

      // optional uint64 absolute_deadline = 22;
      case 22: {
        if (tag == 176) {
         parse_absolute_deadline:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &absolute_deadline_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_port;
        break;
      }

      // optional uint64 port = 23;
      case 23: {
        if (tag == 184) {
         parse_port:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_input_size;
        break;
      }

      // optional uint64 input_size = 24;
      case 24: {
        if (tag == 192) {
         parse_input_size:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &input_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_inject_task_lib;
        break;
      }

      // optional bool inject_task_lib = 25;
      case 25: {
        if (tag == 200) {
         parse_inject_task_lib:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inject_task_lib_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_resource_request;
        break;
      }

      // optional .firmament.ResourceVector resource_request = 26;
      case 26: {
        if (tag == 210) {
         parse_resource_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 27;
      case 27: {
        if (tag == 216) {
         parse_priority:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_task_type;
        break;
      }

      // optional .firmament.TaskDescriptor.TaskType task_type = 28;
      case 28: {
        if (tag == 224) {
         parse_task_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_task_type(static_cast< ::firmament::TaskDescriptor_TaskType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_final_report;
        break;
      }

      // optional .firmament.TaskFinalReport final_report = 29;
      case 29: {
        if (tag == 234) {
         parse_final_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_final_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_trace_job_id;
        break;
      }

      // optional uint64 trace_job_id = 30;
      case 30: {
        if (tag == 240) {
         parse_trace_job_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_job_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_trace_task_id;
        break;
      }

      // optional uint64 trace_task_id = 31;
      case 31: {
        if (tag == 248) {
         parse_trace_task_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trace_task_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_labels;
        break;
      }

      // repeated .firmament.Label labels = 32;
      case 32: {
        if (tag == 258) {
         parse_labels:
          DO_(input->IncrementRecursionDepth());
         parse_loop_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_labels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_loop_labels;
        if (input->ExpectTag(266)) goto parse_loop_label_selectors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .firmament.LabelSelector label_selectors = 33;
      case 33: {
        if (tag == 266) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_label_selectors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_label_selectors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_loop_label_selectors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.TaskDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.TaskDescriptor)
  return false;
#undef DO_
}

void TaskDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.TaskDescriptor)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .firmament.TaskDescriptor.TaskState state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional string job_id = 4;
  if (this->job_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.job_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->job_id(), output);
  }

  // optional uint64 index = 5;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->index(), output);
  }

  // repeated .firmament.ReferenceDescriptor dependencies = 6;
  for (unsigned int i = 0, n = this->dependencies_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->dependencies(i), output);
  }

  // repeated .firmament.ReferenceDescriptor outputs = 7;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->outputs(i), output);
  }

  // optional string binary = 8;
  if (this->binary().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->binary().data(), this->binary().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.binary");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->binary(), output);
  }

  // repeated string args = 9;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->args(i), output);
  }

  // repeated .firmament.TaskDescriptor spawned = 10;
  for (unsigned int i = 0, n = this->spawned_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->spawned(i), output);
  }

  // optional string scheduled_to_resource = 11;
  if (this->scheduled_to_resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scheduled_to_resource().data(), this->scheduled_to_resource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.scheduled_to_resource");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->scheduled_to_resource(), output);
  }

  // optional string last_heartbeat_location = 12;
  if (this->last_heartbeat_location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_heartbeat_location().data(), this->last_heartbeat_location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.last_heartbeat_location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->last_heartbeat_location(), output);
  }

  // optional uint64 last_heartbeat_time = 13;
  if (this->last_heartbeat_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->last_heartbeat_time(), output);
  }

  // optional string delegated_to = 14;
  if (this->delegated_to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delegated_to().data(), this->delegated_to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.delegated_to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->delegated_to(), output);
  }

  // optional string delegated_from = 15;
  if (this->delegated_from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delegated_from().data(), this->delegated_from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.delegated_from");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->delegated_from(), output);
  }

  // optional uint64 submit_time = 16;
  if (this->submit_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->submit_time(), output);
  }

  // optional uint64 start_time = 17;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->start_time(), output);
  }

  // optional uint64 finish_time = 18;
  if (this->finish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->finish_time(), output);
  }

  // optional uint64 total_unscheduled_time = 19;
  if (this->total_unscheduled_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->total_unscheduled_time(), output);
  }

  // optional uint64 total_run_time = 20;
  if (this->total_run_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->total_run_time(), output);
  }

  // optional uint64 relative_deadline = 21;
  if (this->relative_deadline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->relative_deadline(), output);
  }

  // optional uint64 absolute_deadline = 22;
  if (this->absolute_deadline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(22, this->absolute_deadline(), output);
  }

  // optional uint64 port = 23;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->port(), output);
  }

  // optional uint64 input_size = 24;
  if (this->input_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(24, this->input_size(), output);
  }

  // optional bool inject_task_lib = 25;
  if (this->inject_task_lib() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->inject_task_lib(), output);
  }

  // optional .firmament.ResourceVector resource_request = 26;
  if (this->has_resource_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->resource_request_, output);
  }

  // optional uint32 priority = 27;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->priority(), output);
  }

  // optional .firmament.TaskDescriptor.TaskType task_type = 28;
  if (this->task_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      28, this->task_type(), output);
  }

  // optional .firmament.TaskFinalReport final_report = 29;
  if (this->has_final_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *this->final_report_, output);
  }

  // optional uint64 trace_job_id = 30;
  if (this->trace_job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(30, this->trace_job_id(), output);
  }

  // optional uint64 trace_task_id = 31;
  if (this->trace_task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(31, this->trace_task_id(), output);
  }

  // repeated .firmament.Label labels = 32;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->labels(i), output);
  }

  // repeated .firmament.LabelSelector label_selectors = 33;
  for (unsigned int i = 0, n = this->label_selectors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->label_selectors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.TaskDescriptor)
}

::google::protobuf::uint8* TaskDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.TaskDescriptor)
  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .firmament.TaskDescriptor.TaskState state = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional string job_id = 4;
  if (this->job_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->job_id().data(), this->job_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.job_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->job_id(), target);
  }

  // optional uint64 index = 5;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->index(), target);
  }

  // repeated .firmament.ReferenceDescriptor dependencies = 6;
  for (unsigned int i = 0, n = this->dependencies_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->dependencies(i), false, target);
  }

  // repeated .firmament.ReferenceDescriptor outputs = 7;
  for (unsigned int i = 0, n = this->outputs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->outputs(i), false, target);
  }

  // optional string binary = 8;
  if (this->binary().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->binary().data(), this->binary().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.binary");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->binary(), target);
  }

  // repeated string args = 9;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->args(i), target);
  }

  // repeated .firmament.TaskDescriptor spawned = 10;
  for (unsigned int i = 0, n = this->spawned_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->spawned(i), false, target);
  }

  // optional string scheduled_to_resource = 11;
  if (this->scheduled_to_resource().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scheduled_to_resource().data(), this->scheduled_to_resource().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.scheduled_to_resource");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->scheduled_to_resource(), target);
  }

  // optional string last_heartbeat_location = 12;
  if (this->last_heartbeat_location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->last_heartbeat_location().data(), this->last_heartbeat_location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.last_heartbeat_location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->last_heartbeat_location(), target);
  }

  // optional uint64 last_heartbeat_time = 13;
  if (this->last_heartbeat_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->last_heartbeat_time(), target);
  }

  // optional string delegated_to = 14;
  if (this->delegated_to().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delegated_to().data(), this->delegated_to().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.delegated_to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->delegated_to(), target);
  }

  // optional string delegated_from = 15;
  if (this->delegated_from().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->delegated_from().data(), this->delegated_from().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskDescriptor.delegated_from");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->delegated_from(), target);
  }

  // optional uint64 submit_time = 16;
  if (this->submit_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->submit_time(), target);
  }

  // optional uint64 start_time = 17;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->start_time(), target);
  }

  // optional uint64 finish_time = 18;
  if (this->finish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->finish_time(), target);
  }

  // optional uint64 total_unscheduled_time = 19;
  if (this->total_unscheduled_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->total_unscheduled_time(), target);
  }

  // optional uint64 total_run_time = 20;
  if (this->total_run_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->total_run_time(), target);
  }

  // optional uint64 relative_deadline = 21;
  if (this->relative_deadline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->relative_deadline(), target);
  }

  // optional uint64 absolute_deadline = 22;
  if (this->absolute_deadline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(22, this->absolute_deadline(), target);
  }

  // optional uint64 port = 23;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->port(), target);
  }

  // optional uint64 input_size = 24;
  if (this->input_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(24, this->input_size(), target);
  }

  // optional bool inject_task_lib = 25;
  if (this->inject_task_lib() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->inject_task_lib(), target);
  }

  // optional .firmament.ResourceVector resource_request = 26;
  if (this->has_resource_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->resource_request_, false, target);
  }

  // optional uint32 priority = 27;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->priority(), target);
  }

  // optional .firmament.TaskDescriptor.TaskType task_type = 28;
  if (this->task_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      28, this->task_type(), target);
  }

  // optional .firmament.TaskFinalReport final_report = 29;
  if (this->has_final_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *this->final_report_, false, target);
  }

  // optional uint64 trace_job_id = 30;
  if (this->trace_job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(30, this->trace_job_id(), target);
  }

  // optional uint64 trace_task_id = 31;
  if (this->trace_task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(31, this->trace_task_id(), target);
  }

  // repeated .firmament.Label labels = 32;
  for (unsigned int i = 0, n = this->labels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, this->labels(i), false, target);
  }

  // repeated .firmament.LabelSelector label_selectors = 33;
  for (unsigned int i = 0, n = this->label_selectors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, this->label_selectors(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.TaskDescriptor)
  return target;
}

size_t TaskDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.TaskDescriptor)
  size_t total_size = 0;

  // optional uint64 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uid());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .firmament.TaskDescriptor.TaskState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional string job_id = 4;
  if (this->job_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->job_id());
  }

  // optional uint64 index = 5;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->index());
  }

  // optional string binary = 8;
  if (this->binary().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->binary());
  }

  // optional string scheduled_to_resource = 11;
  if (this->scheduled_to_resource().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scheduled_to_resource());
  }

  // optional string last_heartbeat_location = 12;
  if (this->last_heartbeat_location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->last_heartbeat_location());
  }

  // optional uint64 last_heartbeat_time = 13;
  if (this->last_heartbeat_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->last_heartbeat_time());
  }

  // optional string delegated_to = 14;
  if (this->delegated_to().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->delegated_to());
  }

  // optional string delegated_from = 15;
  if (this->delegated_from().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->delegated_from());
  }

  // optional uint64 submit_time = 16;
  if (this->submit_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->submit_time());
  }

  // optional uint64 start_time = 17;
  if (this->start_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->start_time());
  }

  // optional uint64 finish_time = 18;
  if (this->finish_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->finish_time());
  }

  // optional uint64 total_unscheduled_time = 19;
  if (this->total_unscheduled_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_unscheduled_time());
  }

  // optional uint64 total_run_time = 20;
  if (this->total_run_time() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_run_time());
  }

  // optional uint64 relative_deadline = 21;
  if (this->relative_deadline() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->relative_deadline());
  }

  // optional uint64 absolute_deadline = 22;
  if (this->absolute_deadline() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->absolute_deadline());
  }

  // optional uint64 port = 23;
  if (this->port() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->port());
  }

  // optional uint64 input_size = 24;
  if (this->input_size() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->input_size());
  }

  // optional bool inject_task_lib = 25;
  if (this->inject_task_lib() != 0) {
    total_size += 2 + 1;
  }

  // optional .firmament.ResourceVector resource_request = 26;
  if (this->has_resource_request()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_request_);
  }

  // optional uint32 priority = 27;
  if (this->priority() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());
  }

  // optional .firmament.TaskDescriptor.TaskType task_type = 28;
  if (this->task_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->task_type());
  }

  // optional .firmament.TaskFinalReport final_report = 29;
  if (this->has_final_report()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->final_report_);
  }

  // optional uint64 trace_job_id = 30;
  if (this->trace_job_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_job_id());
  }

  // optional uint64 trace_task_id = 31;
  if (this->trace_task_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->trace_task_id());
  }

  // repeated .firmament.ReferenceDescriptor dependencies = 6;
  {
    unsigned int count = this->dependencies_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dependencies(i));
    }
  }

  // repeated .firmament.ReferenceDescriptor outputs = 7;
  {
    unsigned int count = this->outputs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outputs(i));
    }
  }

  // repeated string args = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->args_size());
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  // repeated .firmament.TaskDescriptor spawned = 10;
  {
    unsigned int count = this->spawned_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spawned(i));
    }
  }

  // repeated .firmament.Label labels = 32;
  {
    unsigned int count = this->labels_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->labels(i));
    }
  }

  // repeated .firmament.LabelSelector label_selectors = 33;
  {
    unsigned int count = this->label_selectors_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->label_selectors(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.TaskDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.TaskDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.TaskDescriptor)
    UnsafeMergeFrom(*source);
  }
}

void TaskDescriptor::MergeFrom(const TaskDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.TaskDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TaskDescriptor::UnsafeMergeFrom(const TaskDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  dependencies_.MergeFrom(from.dependencies_);
  outputs_.MergeFrom(from.outputs_);
  args_.UnsafeMergeFrom(from.args_);
  spawned_.MergeFrom(from.spawned_);
  labels_.MergeFrom(from.labels_);
  label_selectors_.MergeFrom(from.label_selectors_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.job_id().size() > 0) {

    job_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.job_id_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.binary().size() > 0) {

    binary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.binary_);
  }
  if (from.scheduled_to_resource().size() > 0) {

    scheduled_to_resource_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scheduled_to_resource_);
  }
  if (from.last_heartbeat_location().size() > 0) {

    last_heartbeat_location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.last_heartbeat_location_);
  }
  if (from.last_heartbeat_time() != 0) {
    set_last_heartbeat_time(from.last_heartbeat_time());
  }
  if (from.delegated_to().size() > 0) {

    delegated_to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delegated_to_);
  }
  if (from.delegated_from().size() > 0) {

    delegated_from_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.delegated_from_);
  }
  if (from.submit_time() != 0) {
    set_submit_time(from.submit_time());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.finish_time() != 0) {
    set_finish_time(from.finish_time());
  }
  if (from.total_unscheduled_time() != 0) {
    set_total_unscheduled_time(from.total_unscheduled_time());
  }
  if (from.total_run_time() != 0) {
    set_total_run_time(from.total_run_time());
  }
  if (from.relative_deadline() != 0) {
    set_relative_deadline(from.relative_deadline());
  }
  if (from.absolute_deadline() != 0) {
    set_absolute_deadline(from.absolute_deadline());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.input_size() != 0) {
    set_input_size(from.input_size());
  }
  if (from.inject_task_lib() != 0) {
    set_inject_task_lib(from.inject_task_lib());
  }
  if (from.has_resource_request()) {
    mutable_resource_request()->::firmament::ResourceVector::MergeFrom(from.resource_request());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.task_type() != 0) {
    set_task_type(from.task_type());
  }
  if (from.has_final_report()) {
    mutable_final_report()->::firmament::TaskFinalReport::MergeFrom(from.final_report());
  }
  if (from.trace_job_id() != 0) {
    set_trace_job_id(from.trace_job_id());
  }
  if (from.trace_task_id() != 0) {
    set_trace_task_id(from.trace_task_id());
  }
}

void TaskDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.TaskDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskDescriptor::CopyFrom(const TaskDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.TaskDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TaskDescriptor::IsInitialized() const {

  return true;
}

void TaskDescriptor::Swap(TaskDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskDescriptor::InternalSwap(TaskDescriptor* other) {
  std::swap(uid_, other->uid_);
  name_.Swap(&other->name_);
  std::swap(state_, other->state_);
  job_id_.Swap(&other->job_id_);
  std::swap(index_, other->index_);
  dependencies_.UnsafeArenaSwap(&other->dependencies_);
  outputs_.UnsafeArenaSwap(&other->outputs_);
  binary_.Swap(&other->binary_);
  args_.UnsafeArenaSwap(&other->args_);
  spawned_.UnsafeArenaSwap(&other->spawned_);
  scheduled_to_resource_.Swap(&other->scheduled_to_resource_);
  last_heartbeat_location_.Swap(&other->last_heartbeat_location_);
  std::swap(last_heartbeat_time_, other->last_heartbeat_time_);
  delegated_to_.Swap(&other->delegated_to_);
  delegated_from_.Swap(&other->delegated_from_);
  std::swap(submit_time_, other->submit_time_);
  std::swap(start_time_, other->start_time_);
  std::swap(finish_time_, other->finish_time_);
  std::swap(total_unscheduled_time_, other->total_unscheduled_time_);
  std::swap(total_run_time_, other->total_run_time_);
  std::swap(relative_deadline_, other->relative_deadline_);
  std::swap(absolute_deadline_, other->absolute_deadline_);
  std::swap(port_, other->port_);
  std::swap(input_size_, other->input_size_);
  std::swap(inject_task_lib_, other->inject_task_lib_);
  std::swap(resource_request_, other->resource_request_);
  std::swap(priority_, other->priority_);
  std::swap(task_type_, other->task_type_);
  std::swap(final_report_, other->final_report_);
  std::swap(trace_job_id_, other->trace_job_id_);
  std::swap(trace_task_id_, other->trace_task_id_);
  labels_.UnsafeArenaSwap(&other->labels_);
  label_selectors_.UnsafeArenaSwap(&other->label_selectors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskDescriptor_descriptor_;
  metadata.reflection = TaskDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskDescriptor

// optional uint64 uid = 1;
void TaskDescriptor::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::uid() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.uid)
  return uid_;
}
void TaskDescriptor::set_uid(::google::protobuf::uint64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.uid)
}

// optional string name = 2;
void TaskDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskDescriptor::name() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.name)
}
void TaskDescriptor::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.name)
}
void TaskDescriptor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.name)
}
::std::string* TaskDescriptor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.name)
}

// optional .firmament.TaskDescriptor.TaskState state = 3;
void TaskDescriptor::clear_state() {
  state_ = 0;
}
::firmament::TaskDescriptor_TaskState TaskDescriptor::state() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.state)
  return static_cast< ::firmament::TaskDescriptor_TaskState >(state_);
}
void TaskDescriptor::set_state(::firmament::TaskDescriptor_TaskState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.state)
}

// optional string job_id = 4;
void TaskDescriptor::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskDescriptor::job_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.job_id)
  return job_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_job_id(const ::std::string& value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.job_id)
}
void TaskDescriptor::set_job_id(const char* value) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.job_id)
}
void TaskDescriptor::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.job_id)
}
::std::string* TaskDescriptor::mutable_job_id() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.job_id)
  return job_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskDescriptor::release_job_id() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.job_id)
  
  return job_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_allocated_job_id(::std::string* job_id) {
  if (job_id != NULL) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.job_id)
}

// optional uint64 index = 5;
void TaskDescriptor::clear_index() {
  index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::index() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.index)
  return index_;
}
void TaskDescriptor::set_index(::google::protobuf::uint64 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.index)
}

// repeated .firmament.ReferenceDescriptor dependencies = 6;
int TaskDescriptor::dependencies_size() const {
  return dependencies_.size();
}
void TaskDescriptor::clear_dependencies() {
  dependencies_.Clear();
}
const ::firmament::ReferenceDescriptor& TaskDescriptor::dependencies(int index) const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.dependencies)
  return dependencies_.Get(index);
}
::firmament::ReferenceDescriptor* TaskDescriptor::mutable_dependencies(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.dependencies)
  return dependencies_.Mutable(index);
}
::firmament::ReferenceDescriptor* TaskDescriptor::add_dependencies() {
  // @@protoc_insertion_point(field_add:firmament.TaskDescriptor.dependencies)
  return dependencies_.Add();
}
::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor >*
TaskDescriptor::mutable_dependencies() {
  // @@protoc_insertion_point(field_mutable_list:firmament.TaskDescriptor.dependencies)
  return &dependencies_;
}
const ::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor >&
TaskDescriptor::dependencies() const {
  // @@protoc_insertion_point(field_list:firmament.TaskDescriptor.dependencies)
  return dependencies_;
}

// repeated .firmament.ReferenceDescriptor outputs = 7;
int TaskDescriptor::outputs_size() const {
  return outputs_.size();
}
void TaskDescriptor::clear_outputs() {
  outputs_.Clear();
}
const ::firmament::ReferenceDescriptor& TaskDescriptor::outputs(int index) const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.outputs)
  return outputs_.Get(index);
}
::firmament::ReferenceDescriptor* TaskDescriptor::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.outputs)
  return outputs_.Mutable(index);
}
::firmament::ReferenceDescriptor* TaskDescriptor::add_outputs() {
  // @@protoc_insertion_point(field_add:firmament.TaskDescriptor.outputs)
  return outputs_.Add();
}
::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor >*
TaskDescriptor::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:firmament.TaskDescriptor.outputs)
  return &outputs_;
}
const ::google::protobuf::RepeatedPtrField< ::firmament::ReferenceDescriptor >&
TaskDescriptor::outputs() const {
  // @@protoc_insertion_point(field_list:firmament.TaskDescriptor.outputs)
  return outputs_;
}

// optional string binary = 8;
void TaskDescriptor::clear_binary() {
  binary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskDescriptor::binary() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.binary)
  return binary_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_binary(const ::std::string& value) {
  
  binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.binary)
}
void TaskDescriptor::set_binary(const char* value) {
  
  binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.binary)
}
void TaskDescriptor::set_binary(const char* value, size_t size) {
  
  binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.binary)
}
::std::string* TaskDescriptor::mutable_binary() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.binary)
  return binary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskDescriptor::release_binary() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.binary)
  
  return binary_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_allocated_binary(::std::string* binary) {
  if (binary != NULL) {
    
  } else {
    
  }
  binary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), binary);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.binary)
}

// repeated string args = 9;
int TaskDescriptor::args_size() const {
  return args_.size();
}
void TaskDescriptor::clear_args() {
  args_.Clear();
}
const ::std::string& TaskDescriptor::args(int index) const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.args)
  return args_.Get(index);
}
::std::string* TaskDescriptor::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.args)
  return args_.Mutable(index);
}
void TaskDescriptor::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.args)
  args_.Mutable(index)->assign(value);
}
void TaskDescriptor::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.args)
}
void TaskDescriptor::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.args)
}
::std::string* TaskDescriptor::add_args() {
  // @@protoc_insertion_point(field_add_mutable:firmament.TaskDescriptor.args)
  return args_.Add();
}
void TaskDescriptor::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:firmament.TaskDescriptor.args)
}
void TaskDescriptor::add_args(const char* value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:firmament.TaskDescriptor.args)
}
void TaskDescriptor::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:firmament.TaskDescriptor.args)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TaskDescriptor::args() const {
  // @@protoc_insertion_point(field_list:firmament.TaskDescriptor.args)
  return args_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TaskDescriptor::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:firmament.TaskDescriptor.args)
  return &args_;
}

// repeated .firmament.TaskDescriptor spawned = 10;
int TaskDescriptor::spawned_size() const {
  return spawned_.size();
}
void TaskDescriptor::clear_spawned() {
  spawned_.Clear();
}
const ::firmament::TaskDescriptor& TaskDescriptor::spawned(int index) const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.spawned)
  return spawned_.Get(index);
}
::firmament::TaskDescriptor* TaskDescriptor::mutable_spawned(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.spawned)
  return spawned_.Mutable(index);
}
::firmament::TaskDescriptor* TaskDescriptor::add_spawned() {
  // @@protoc_insertion_point(field_add:firmament.TaskDescriptor.spawned)
  return spawned_.Add();
}
::google::protobuf::RepeatedPtrField< ::firmament::TaskDescriptor >*
TaskDescriptor::mutable_spawned() {
  // @@protoc_insertion_point(field_mutable_list:firmament.TaskDescriptor.spawned)
  return &spawned_;
}
const ::google::protobuf::RepeatedPtrField< ::firmament::TaskDescriptor >&
TaskDescriptor::spawned() const {
  // @@protoc_insertion_point(field_list:firmament.TaskDescriptor.spawned)
  return spawned_;
}

// optional string scheduled_to_resource = 11;
void TaskDescriptor::clear_scheduled_to_resource() {
  scheduled_to_resource_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskDescriptor::scheduled_to_resource() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.scheduled_to_resource)
  return scheduled_to_resource_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_scheduled_to_resource(const ::std::string& value) {
  
  scheduled_to_resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.scheduled_to_resource)
}
void TaskDescriptor::set_scheduled_to_resource(const char* value) {
  
  scheduled_to_resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.scheduled_to_resource)
}
void TaskDescriptor::set_scheduled_to_resource(const char* value, size_t size) {
  
  scheduled_to_resource_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.scheduled_to_resource)
}
::std::string* TaskDescriptor::mutable_scheduled_to_resource() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.scheduled_to_resource)
  return scheduled_to_resource_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskDescriptor::release_scheduled_to_resource() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.scheduled_to_resource)
  
  return scheduled_to_resource_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_allocated_scheduled_to_resource(::std::string* scheduled_to_resource) {
  if (scheduled_to_resource != NULL) {
    
  } else {
    
  }
  scheduled_to_resource_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scheduled_to_resource);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.scheduled_to_resource)
}

// optional string last_heartbeat_location = 12;
void TaskDescriptor::clear_last_heartbeat_location() {
  last_heartbeat_location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskDescriptor::last_heartbeat_location() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.last_heartbeat_location)
  return last_heartbeat_location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_last_heartbeat_location(const ::std::string& value) {
  
  last_heartbeat_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.last_heartbeat_location)
}
void TaskDescriptor::set_last_heartbeat_location(const char* value) {
  
  last_heartbeat_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.last_heartbeat_location)
}
void TaskDescriptor::set_last_heartbeat_location(const char* value, size_t size) {
  
  last_heartbeat_location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.last_heartbeat_location)
}
::std::string* TaskDescriptor::mutable_last_heartbeat_location() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.last_heartbeat_location)
  return last_heartbeat_location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskDescriptor::release_last_heartbeat_location() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.last_heartbeat_location)
  
  return last_heartbeat_location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_allocated_last_heartbeat_location(::std::string* last_heartbeat_location) {
  if (last_heartbeat_location != NULL) {
    
  } else {
    
  }
  last_heartbeat_location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), last_heartbeat_location);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.last_heartbeat_location)
}

// optional uint64 last_heartbeat_time = 13;
void TaskDescriptor::clear_last_heartbeat_time() {
  last_heartbeat_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::last_heartbeat_time() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.last_heartbeat_time)
  return last_heartbeat_time_;
}
void TaskDescriptor::set_last_heartbeat_time(::google::protobuf::uint64 value) {
  
  last_heartbeat_time_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.last_heartbeat_time)
}

// optional string delegated_to = 14;
void TaskDescriptor::clear_delegated_to() {
  delegated_to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskDescriptor::delegated_to() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.delegated_to)
  return delegated_to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_delegated_to(const ::std::string& value) {
  
  delegated_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.delegated_to)
}
void TaskDescriptor::set_delegated_to(const char* value) {
  
  delegated_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.delegated_to)
}
void TaskDescriptor::set_delegated_to(const char* value, size_t size) {
  
  delegated_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.delegated_to)
}
::std::string* TaskDescriptor::mutable_delegated_to() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.delegated_to)
  return delegated_to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskDescriptor::release_delegated_to() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.delegated_to)
  
  return delegated_to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_allocated_delegated_to(::std::string* delegated_to) {
  if (delegated_to != NULL) {
    
  } else {
    
  }
  delegated_to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delegated_to);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.delegated_to)
}

// optional string delegated_from = 15;
void TaskDescriptor::clear_delegated_from() {
  delegated_from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskDescriptor::delegated_from() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.delegated_from)
  return delegated_from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_delegated_from(const ::std::string& value) {
  
  delegated_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.delegated_from)
}
void TaskDescriptor::set_delegated_from(const char* value) {
  
  delegated_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskDescriptor.delegated_from)
}
void TaskDescriptor::set_delegated_from(const char* value, size_t size) {
  
  delegated_from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskDescriptor.delegated_from)
}
::std::string* TaskDescriptor::mutable_delegated_from() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.delegated_from)
  return delegated_from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskDescriptor::release_delegated_from() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.delegated_from)
  
  return delegated_from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskDescriptor::set_allocated_delegated_from(::std::string* delegated_from) {
  if (delegated_from != NULL) {
    
  } else {
    
  }
  delegated_from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), delegated_from);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.delegated_from)
}

// optional uint64 submit_time = 16;
void TaskDescriptor::clear_submit_time() {
  submit_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::submit_time() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.submit_time)
  return submit_time_;
}
void TaskDescriptor::set_submit_time(::google::protobuf::uint64 value) {
  
  submit_time_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.submit_time)
}

// optional uint64 start_time = 17;
void TaskDescriptor::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::start_time() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.start_time)
  return start_time_;
}
void TaskDescriptor::set_start_time(::google::protobuf::uint64 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.start_time)
}

// optional uint64 finish_time = 18;
void TaskDescriptor::clear_finish_time() {
  finish_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::finish_time() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.finish_time)
  return finish_time_;
}
void TaskDescriptor::set_finish_time(::google::protobuf::uint64 value) {
  
  finish_time_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.finish_time)
}

// optional uint64 total_unscheduled_time = 19;
void TaskDescriptor::clear_total_unscheduled_time() {
  total_unscheduled_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::total_unscheduled_time() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.total_unscheduled_time)
  return total_unscheduled_time_;
}
void TaskDescriptor::set_total_unscheduled_time(::google::protobuf::uint64 value) {
  
  total_unscheduled_time_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.total_unscheduled_time)
}

// optional uint64 total_run_time = 20;
void TaskDescriptor::clear_total_run_time() {
  total_run_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::total_run_time() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.total_run_time)
  return total_run_time_;
}
void TaskDescriptor::set_total_run_time(::google::protobuf::uint64 value) {
  
  total_run_time_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.total_run_time)
}

// optional uint64 relative_deadline = 21;
void TaskDescriptor::clear_relative_deadline() {
  relative_deadline_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::relative_deadline() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.relative_deadline)
  return relative_deadline_;
}
void TaskDescriptor::set_relative_deadline(::google::protobuf::uint64 value) {
  
  relative_deadline_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.relative_deadline)
}

// optional uint64 absolute_deadline = 22;
void TaskDescriptor::clear_absolute_deadline() {
  absolute_deadline_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::absolute_deadline() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.absolute_deadline)
  return absolute_deadline_;
}
void TaskDescriptor::set_absolute_deadline(::google::protobuf::uint64 value) {
  
  absolute_deadline_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.absolute_deadline)
}

// optional uint64 port = 23;
void TaskDescriptor::clear_port() {
  port_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::port() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.port)
  return port_;
}
void TaskDescriptor::set_port(::google::protobuf::uint64 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.port)
}

// optional uint64 input_size = 24;
void TaskDescriptor::clear_input_size() {
  input_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::input_size() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.input_size)
  return input_size_;
}
void TaskDescriptor::set_input_size(::google::protobuf::uint64 value) {
  
  input_size_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.input_size)
}

// optional bool inject_task_lib = 25;
void TaskDescriptor::clear_inject_task_lib() {
  inject_task_lib_ = false;
}
bool TaskDescriptor::inject_task_lib() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.inject_task_lib)
  return inject_task_lib_;
}
void TaskDescriptor::set_inject_task_lib(bool value) {
  
  inject_task_lib_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.inject_task_lib)
}

// optional .firmament.ResourceVector resource_request = 26;
bool TaskDescriptor::has_resource_request() const {
  return this != internal_default_instance() && resource_request_ != NULL;
}
void TaskDescriptor::clear_resource_request() {
  if (GetArenaNoVirtual() == NULL && resource_request_ != NULL) delete resource_request_;
  resource_request_ = NULL;
}
const ::firmament::ResourceVector& TaskDescriptor::resource_request() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.resource_request)
  return resource_request_ != NULL ? *resource_request_
                         : *::firmament::ResourceVector::internal_default_instance();
}
::firmament::ResourceVector* TaskDescriptor::mutable_resource_request() {
  
  if (resource_request_ == NULL) {
    resource_request_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.resource_request)
  return resource_request_;
}
::firmament::ResourceVector* TaskDescriptor::release_resource_request() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.resource_request)
  
  ::firmament::ResourceVector* temp = resource_request_;
  resource_request_ = NULL;
  return temp;
}
void TaskDescriptor::set_allocated_resource_request(::firmament::ResourceVector* resource_request) {
  delete resource_request_;
  resource_request_ = resource_request;
  if (resource_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.resource_request)
}

// optional uint32 priority = 27;
void TaskDescriptor::clear_priority() {
  priority_ = 0u;
}
::google::protobuf::uint32 TaskDescriptor::priority() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.priority)
  return priority_;
}
void TaskDescriptor::set_priority(::google::protobuf::uint32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.priority)
}

// optional .firmament.TaskDescriptor.TaskType task_type = 28;
void TaskDescriptor::clear_task_type() {
  task_type_ = 0;
}
::firmament::TaskDescriptor_TaskType TaskDescriptor::task_type() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.task_type)
  return static_cast< ::firmament::TaskDescriptor_TaskType >(task_type_);
}
void TaskDescriptor::set_task_type(::firmament::TaskDescriptor_TaskType value) {
  
  task_type_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.task_type)
}

// optional .firmament.TaskFinalReport final_report = 29;
bool TaskDescriptor::has_final_report() const {
  return this != internal_default_instance() && final_report_ != NULL;
}
void TaskDescriptor::clear_final_report() {
  if (GetArenaNoVirtual() == NULL && final_report_ != NULL) delete final_report_;
  final_report_ = NULL;
}
const ::firmament::TaskFinalReport& TaskDescriptor::final_report() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.final_report)
  return final_report_ != NULL ? *final_report_
                         : *::firmament::TaskFinalReport::internal_default_instance();
}
::firmament::TaskFinalReport* TaskDescriptor::mutable_final_report() {
  
  if (final_report_ == NULL) {
    final_report_ = new ::firmament::TaskFinalReport;
  }
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.final_report)
  return final_report_;
}
::firmament::TaskFinalReport* TaskDescriptor::release_final_report() {
  // @@protoc_insertion_point(field_release:firmament.TaskDescriptor.final_report)
  
  ::firmament::TaskFinalReport* temp = final_report_;
  final_report_ = NULL;
  return temp;
}
void TaskDescriptor::set_allocated_final_report(::firmament::TaskFinalReport* final_report) {
  delete final_report_;
  final_report_ = final_report;
  if (final_report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskDescriptor.final_report)
}

// optional uint64 trace_job_id = 30;
void TaskDescriptor::clear_trace_job_id() {
  trace_job_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::trace_job_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.trace_job_id)
  return trace_job_id_;
}
void TaskDescriptor::set_trace_job_id(::google::protobuf::uint64 value) {
  
  trace_job_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.trace_job_id)
}

// optional uint64 trace_task_id = 31;
void TaskDescriptor::clear_trace_task_id() {
  trace_task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskDescriptor::trace_task_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.trace_task_id)
  return trace_task_id_;
}
void TaskDescriptor::set_trace_task_id(::google::protobuf::uint64 value) {
  
  trace_task_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskDescriptor.trace_task_id)
}

// repeated .firmament.Label labels = 32;
int TaskDescriptor::labels_size() const {
  return labels_.size();
}
void TaskDescriptor::clear_labels() {
  labels_.Clear();
}
const ::firmament::Label& TaskDescriptor::labels(int index) const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.labels)
  return labels_.Get(index);
}
::firmament::Label* TaskDescriptor::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.labels)
  return labels_.Mutable(index);
}
::firmament::Label* TaskDescriptor::add_labels() {
  // @@protoc_insertion_point(field_add:firmament.TaskDescriptor.labels)
  return labels_.Add();
}
::google::protobuf::RepeatedPtrField< ::firmament::Label >*
TaskDescriptor::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:firmament.TaskDescriptor.labels)
  return &labels_;
}
const ::google::protobuf::RepeatedPtrField< ::firmament::Label >&
TaskDescriptor::labels() const {
  // @@protoc_insertion_point(field_list:firmament.TaskDescriptor.labels)
  return labels_;
}

// repeated .firmament.LabelSelector label_selectors = 33;
int TaskDescriptor::label_selectors_size() const {
  return label_selectors_.size();
}
void TaskDescriptor::clear_label_selectors() {
  label_selectors_.Clear();
}
const ::firmament::LabelSelector& TaskDescriptor::label_selectors(int index) const {
  // @@protoc_insertion_point(field_get:firmament.TaskDescriptor.label_selectors)
  return label_selectors_.Get(index);
}
::firmament::LabelSelector* TaskDescriptor::mutable_label_selectors(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.TaskDescriptor.label_selectors)
  return label_selectors_.Mutable(index);
}
::firmament::LabelSelector* TaskDescriptor::add_label_selectors() {
  // @@protoc_insertion_point(field_add:firmament.TaskDescriptor.label_selectors)
  return label_selectors_.Add();
}
::google::protobuf::RepeatedPtrField< ::firmament::LabelSelector >*
TaskDescriptor::mutable_label_selectors() {
  // @@protoc_insertion_point(field_mutable_list:firmament.TaskDescriptor.label_selectors)
  return &label_selectors_;
}
const ::google::protobuf::RepeatedPtrField< ::firmament::LabelSelector >&
TaskDescriptor::label_selectors() const {
  // @@protoc_insertion_point(field_list:firmament.TaskDescriptor.label_selectors)
  return label_selectors_;
}

inline const TaskDescriptor* TaskDescriptor::internal_default_instance() {
  return &TaskDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
