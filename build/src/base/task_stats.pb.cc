// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/task_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/task_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* TaskStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskStats_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2ftask_5fstats_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_base_2ftask_5fstats_2eproto() {
  protobuf_AddDesc_base_2ftask_5fstats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/task_stats.proto");
  GOOGLE_CHECK(file != NULL);
  TaskStats_descriptor_ = file->message_type(0);
  static const int TaskStats_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, cpu_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, cpu_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, cpu_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, mem_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, mem_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, mem_usage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, mem_rss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, mem_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, mem_working_set_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, mem_page_faults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, mem_page_faults_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, major_page_faults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, major_page_faults_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, net_rx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, net_rx_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, net_rx_errors_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, net_rx_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, net_tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, net_tx_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, net_tx_errors_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, net_tx_rate_),
  };
  TaskStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskStats_descriptor_,
      TaskStats::internal_default_instance(),
      TaskStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStats, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2ftask_5fstats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskStats_descriptor_, TaskStats::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2ftask_5fstats_2eproto() {
  TaskStats_default_instance_.Shutdown();
  delete TaskStats_reflection_;
}

void protobuf_InitDefaults_base_2ftask_5fstats_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  TaskStats_default_instance_.DefaultConstruct();
  TaskStats_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_base_2ftask_5fstats_2eproto_once_);
void protobuf_InitDefaults_base_2ftask_5fstats_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_base_2ftask_5fstats_2eproto_once_,
                 &protobuf_InitDefaults_base_2ftask_5fstats_2eproto_impl);
}
void protobuf_AddDesc_base_2ftask_5fstats_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_base_2ftask_5fstats_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025base/task_stats.proto\022\tfirmament\"\226\004\n\tT"
    "askStats\022\017\n\007task_id\030\001 \001(\004\022\020\n\010hostname\030\002 "
    "\001(\t\022\021\n\ttimestamp\030\003 \001(\004\022\021\n\tcpu_limit\030\004 \001("
    "\003\022\023\n\013cpu_request\030\005 \001(\003\022\021\n\tcpu_usage\030\006 \001("
    "\003\022\021\n\tmem_limit\030\007 \001(\003\022\023\n\013mem_request\030\010 \001("
    "\003\022\021\n\tmem_usage\030\t \001(\003\022\017\n\007mem_rss\030\n \001(\003\022\021\n"
    "\tmem_cache\030\013 \001(\003\022\027\n\017mem_working_set\030\014 \001("
    "\003\022\027\n\017mem_page_faults\030\r \001(\003\022\034\n\024mem_page_f"
    "aults_rate\030\016 \001(\001\022\031\n\021major_page_faults\030\017 "
    "\001(\003\022\036\n\026major_page_faults_rate\030\020 \001(\001\022\016\n\006n"
    "et_rx\030\021 \001(\003\022\025\n\rnet_rx_errors\030\022 \001(\003\022\032\n\022ne"
    "t_rx_errors_rate\030\023 \001(\001\022\023\n\013net_rx_rate\030\024 "
    "\001(\001\022\016\n\006net_tx\030\025 \001(\003\022\025\n\rnet_tx_errors\030\026 \001"
    "(\003\022\032\n\022net_tx_errors_rate\030\027 \001(\001\022\023\n\013net_tx"
    "_rate\030\030 \001(\001b\006proto3", 579);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/task_stats.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2ftask_5fstats_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_base_2ftask_5fstats_2eproto_once_);
void protobuf_AddDesc_base_2ftask_5fstats_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_base_2ftask_5fstats_2eproto_once_,
                 &protobuf_AddDesc_base_2ftask_5fstats_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2ftask_5fstats_2eproto {
  StaticDescriptorInitializer_base_2ftask_5fstats_2eproto() {
    protobuf_AddDesc_base_2ftask_5fstats_2eproto();
  }
} static_descriptor_initializer_base_2ftask_5fstats_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskStats::kTaskIdFieldNumber;
const int TaskStats::kHostnameFieldNumber;
const int TaskStats::kTimestampFieldNumber;
const int TaskStats::kCpuLimitFieldNumber;
const int TaskStats::kCpuRequestFieldNumber;
const int TaskStats::kCpuUsageFieldNumber;
const int TaskStats::kMemLimitFieldNumber;
const int TaskStats::kMemRequestFieldNumber;
const int TaskStats::kMemUsageFieldNumber;
const int TaskStats::kMemRssFieldNumber;
const int TaskStats::kMemCacheFieldNumber;
const int TaskStats::kMemWorkingSetFieldNumber;
const int TaskStats::kMemPageFaultsFieldNumber;
const int TaskStats::kMemPageFaultsRateFieldNumber;
const int TaskStats::kMajorPageFaultsFieldNumber;
const int TaskStats::kMajorPageFaultsRateFieldNumber;
const int TaskStats::kNetRxFieldNumber;
const int TaskStats::kNetRxErrorsFieldNumber;
const int TaskStats::kNetRxErrorsRateFieldNumber;
const int TaskStats::kNetRxRateFieldNumber;
const int TaskStats::kNetTxFieldNumber;
const int TaskStats::kNetTxErrorsFieldNumber;
const int TaskStats::kNetTxErrorsRateFieldNumber;
const int TaskStats::kNetTxRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskStats::TaskStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_base_2ftask_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.TaskStats)
}

void TaskStats::InitAsDefaultInstance() {
}

TaskStats::TaskStats(const TaskStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.TaskStats)
}

void TaskStats::SharedCtor() {
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, reinterpret_cast<char*>(&net_tx_rate_) -
    reinterpret_cast<char*>(&task_id_) + sizeof(net_tx_rate_));
  _cached_size_ = 0;
}

TaskStats::~TaskStats() {
  // @@protoc_insertion_point(destructor:firmament.TaskStats)
  SharedDtor();
}

void TaskStats::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStats_descriptor_;
}

const TaskStats& TaskStats::default_instance() {
  protobuf_InitDefaults_base_2ftask_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TaskStats> TaskStats_default_instance_;

TaskStats* TaskStats::New(::google::protobuf::Arena* arena) const {
  TaskStats* n = new TaskStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskStats::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.TaskStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaskStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(task_id_, mem_request_);
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(mem_usage_, major_page_faults_rate_);
  ZR_(net_rx_, net_tx_rate_);

#undef ZR_HELPER_
#undef ZR_

}

bool TaskStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.TaskStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_hostname;
        break;
      }

      // optional string hostname = 2;
      case 2: {
        if (tag == 18) {
         parse_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), this->hostname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.TaskStats.hostname"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 3;
      case 3: {
        if (tag == 24) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cpu_limit;
        break;
      }

      // optional int64 cpu_limit = 4;
      case 4: {
        if (tag == 32) {
         parse_cpu_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cpu_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cpu_request;
        break;
      }

      // optional int64 cpu_request = 5;
      case 5: {
        if (tag == 40) {
         parse_cpu_request:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cpu_request_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cpu_usage;
        break;
      }

      // optional int64 cpu_usage = 6;
      case 6: {
        if (tag == 48) {
         parse_cpu_usage:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cpu_usage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mem_limit;
        break;
      }

      // optional int64 mem_limit = 7;
      case 7: {
        if (tag == 56) {
         parse_mem_limit:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_mem_request;
        break;
      }

      // optional int64 mem_request = 8;
      case 8: {
        if (tag == 64) {
         parse_mem_request:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_request_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mem_usage;
        break;
      }

      // optional int64 mem_usage = 9;
      case 9: {
        if (tag == 72) {
         parse_mem_usage:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_usage_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mem_rss;
        break;
      }

      // optional int64 mem_rss = 10;
      case 10: {
        if (tag == 80) {
         parse_mem_rss:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_rss_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_mem_cache;
        break;
      }

      // optional int64 mem_cache = 11;
      case 11: {
        if (tag == 88) {
         parse_mem_cache:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_cache_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_mem_working_set;
        break;
      }

      // optional int64 mem_working_set = 12;
      case 12: {
        if (tag == 96) {
         parse_mem_working_set:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_working_set_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mem_page_faults;
        break;
      }

      // optional int64 mem_page_faults = 13;
      case 13: {
        if (tag == 104) {
         parse_mem_page_faults:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_page_faults_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_mem_page_faults_rate;
        break;
      }

      // optional double mem_page_faults_rate = 14;
      case 14: {
        if (tag == 113) {
         parse_mem_page_faults_rate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mem_page_faults_rate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_major_page_faults;
        break;
      }

      // optional int64 major_page_faults = 15;
      case 15: {
        if (tag == 120) {
         parse_major_page_faults:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &major_page_faults_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_major_page_faults_rate;
        break;
      }

      // optional double major_page_faults_rate = 16;
      case 16: {
        if (tag == 129) {
         parse_major_page_faults_rate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &major_page_faults_rate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_net_rx;
        break;
      }

      // optional int64 net_rx = 17;
      case 17: {
        if (tag == 136) {
         parse_net_rx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &net_rx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_net_rx_errors;
        break;
      }

      // optional int64 net_rx_errors = 18;
      case 18: {
        if (tag == 144) {
         parse_net_rx_errors:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &net_rx_errors_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_net_rx_errors_rate;
        break;
      }

      // optional double net_rx_errors_rate = 19;
      case 19: {
        if (tag == 153) {
         parse_net_rx_errors_rate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &net_rx_errors_rate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_net_rx_rate;
        break;
      }

      // optional double net_rx_rate = 20;
      case 20: {
        if (tag == 161) {
         parse_net_rx_rate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &net_rx_rate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_net_tx;
        break;
      }

      // optional int64 net_tx = 21;
      case 21: {
        if (tag == 168) {
         parse_net_tx:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &net_tx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_net_tx_errors;
        break;
      }

      // optional int64 net_tx_errors = 22;
      case 22: {
        if (tag == 176) {
         parse_net_tx_errors:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &net_tx_errors_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(185)) goto parse_net_tx_errors_rate;
        break;
      }

      // optional double net_tx_errors_rate = 23;
      case 23: {
        if (tag == 185) {
         parse_net_tx_errors_rate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &net_tx_errors_rate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(193)) goto parse_net_tx_rate;
        break;
      }

      // optional double net_tx_rate = 24;
      case 24: {
        if (tag == 193) {
         parse_net_tx_rate:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &net_tx_rate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.TaskStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.TaskStats)
  return false;
#undef DO_
}

void TaskStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.TaskStats)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // optional string hostname = 2;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskStats.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hostname(), output);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->timestamp(), output);
  }

  // optional int64 cpu_limit = 4;
  if (this->cpu_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->cpu_limit(), output);
  }

  // optional int64 cpu_request = 5;
  if (this->cpu_request() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->cpu_request(), output);
  }

  // optional int64 cpu_usage = 6;
  if (this->cpu_usage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->cpu_usage(), output);
  }

  // optional int64 mem_limit = 7;
  if (this->mem_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->mem_limit(), output);
  }

  // optional int64 mem_request = 8;
  if (this->mem_request() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->mem_request(), output);
  }

  // optional int64 mem_usage = 9;
  if (this->mem_usage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->mem_usage(), output);
  }

  // optional int64 mem_rss = 10;
  if (this->mem_rss() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->mem_rss(), output);
  }

  // optional int64 mem_cache = 11;
  if (this->mem_cache() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->mem_cache(), output);
  }

  // optional int64 mem_working_set = 12;
  if (this->mem_working_set() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->mem_working_set(), output);
  }

  // optional int64 mem_page_faults = 13;
  if (this->mem_page_faults() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->mem_page_faults(), output);
  }

  // optional double mem_page_faults_rate = 14;
  if (this->mem_page_faults_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->mem_page_faults_rate(), output);
  }

  // optional int64 major_page_faults = 15;
  if (this->major_page_faults() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->major_page_faults(), output);
  }

  // optional double major_page_faults_rate = 16;
  if (this->major_page_faults_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->major_page_faults_rate(), output);
  }

  // optional int64 net_rx = 17;
  if (this->net_rx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->net_rx(), output);
  }

  // optional int64 net_rx_errors = 18;
  if (this->net_rx_errors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->net_rx_errors(), output);
  }

  // optional double net_rx_errors_rate = 19;
  if (this->net_rx_errors_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->net_rx_errors_rate(), output);
  }

  // optional double net_rx_rate = 20;
  if (this->net_rx_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->net_rx_rate(), output);
  }

  // optional int64 net_tx = 21;
  if (this->net_tx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->net_tx(), output);
  }

  // optional int64 net_tx_errors = 22;
  if (this->net_tx_errors() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->net_tx_errors(), output);
  }

  // optional double net_tx_errors_rate = 23;
  if (this->net_tx_errors_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->net_tx_errors_rate(), output);
  }

  // optional double net_tx_rate = 24;
  if (this->net_tx_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->net_tx_rate(), output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.TaskStats)
}

::google::protobuf::uint8* TaskStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.TaskStats)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // optional string hostname = 2;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), this->hostname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskStats.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hostname(), target);
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->timestamp(), target);
  }

  // optional int64 cpu_limit = 4;
  if (this->cpu_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->cpu_limit(), target);
  }

  // optional int64 cpu_request = 5;
  if (this->cpu_request() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->cpu_request(), target);
  }

  // optional int64 cpu_usage = 6;
  if (this->cpu_usage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->cpu_usage(), target);
  }

  // optional int64 mem_limit = 7;
  if (this->mem_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->mem_limit(), target);
  }

  // optional int64 mem_request = 8;
  if (this->mem_request() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->mem_request(), target);
  }

  // optional int64 mem_usage = 9;
  if (this->mem_usage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->mem_usage(), target);
  }

  // optional int64 mem_rss = 10;
  if (this->mem_rss() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->mem_rss(), target);
  }

  // optional int64 mem_cache = 11;
  if (this->mem_cache() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->mem_cache(), target);
  }

  // optional int64 mem_working_set = 12;
  if (this->mem_working_set() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->mem_working_set(), target);
  }

  // optional int64 mem_page_faults = 13;
  if (this->mem_page_faults() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->mem_page_faults(), target);
  }

  // optional double mem_page_faults_rate = 14;
  if (this->mem_page_faults_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->mem_page_faults_rate(), target);
  }

  // optional int64 major_page_faults = 15;
  if (this->major_page_faults() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->major_page_faults(), target);
  }

  // optional double major_page_faults_rate = 16;
  if (this->major_page_faults_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->major_page_faults_rate(), target);
  }

  // optional int64 net_rx = 17;
  if (this->net_rx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->net_rx(), target);
  }

  // optional int64 net_rx_errors = 18;
  if (this->net_rx_errors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->net_rx_errors(), target);
  }

  // optional double net_rx_errors_rate = 19;
  if (this->net_rx_errors_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->net_rx_errors_rate(), target);
  }

  // optional double net_rx_rate = 20;
  if (this->net_rx_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->net_rx_rate(), target);
  }

  // optional int64 net_tx = 21;
  if (this->net_tx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->net_tx(), target);
  }

  // optional int64 net_tx_errors = 22;
  if (this->net_tx_errors() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->net_tx_errors(), target);
  }

  // optional double net_tx_errors_rate = 23;
  if (this->net_tx_errors_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->net_tx_errors_rate(), target);
  }

  // optional double net_tx_rate = 24;
  if (this->net_tx_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->net_tx_rate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.TaskStats)
  return target;
}

size_t TaskStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.TaskStats)
  size_t total_size = 0;

  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  // optional string hostname = 2;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // optional uint64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // optional int64 cpu_limit = 4;
  if (this->cpu_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cpu_limit());
  }

  // optional int64 cpu_request = 5;
  if (this->cpu_request() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cpu_request());
  }

  // optional int64 cpu_usage = 6;
  if (this->cpu_usage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cpu_usage());
  }

  // optional int64 mem_limit = 7;
  if (this->mem_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mem_limit());
  }

  // optional int64 mem_request = 8;
  if (this->mem_request() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mem_request());
  }

  // optional int64 mem_usage = 9;
  if (this->mem_usage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mem_usage());
  }

  // optional int64 mem_rss = 10;
  if (this->mem_rss() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mem_rss());
  }

  // optional int64 mem_cache = 11;
  if (this->mem_cache() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mem_cache());
  }

  // optional int64 mem_working_set = 12;
  if (this->mem_working_set() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mem_working_set());
  }

  // optional int64 mem_page_faults = 13;
  if (this->mem_page_faults() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mem_page_faults());
  }

  // optional double mem_page_faults_rate = 14;
  if (this->mem_page_faults_rate() != 0) {
    total_size += 1 + 8;
  }

  // optional int64 major_page_faults = 15;
  if (this->major_page_faults() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->major_page_faults());
  }

  // optional double major_page_faults_rate = 16;
  if (this->major_page_faults_rate() != 0) {
    total_size += 2 + 8;
  }

  // optional int64 net_rx = 17;
  if (this->net_rx() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->net_rx());
  }

  // optional int64 net_rx_errors = 18;
  if (this->net_rx_errors() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->net_rx_errors());
  }

  // optional double net_rx_errors_rate = 19;
  if (this->net_rx_errors_rate() != 0) {
    total_size += 2 + 8;
  }

  // optional double net_rx_rate = 20;
  if (this->net_rx_rate() != 0) {
    total_size += 2 + 8;
  }

  // optional int64 net_tx = 21;
  if (this->net_tx() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->net_tx());
  }

  // optional int64 net_tx_errors = 22;
  if (this->net_tx_errors() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->net_tx_errors());
  }

  // optional double net_tx_errors_rate = 23;
  if (this->net_tx_errors_rate() != 0) {
    total_size += 2 + 8;
  }

  // optional double net_tx_rate = 24;
  if (this->net_tx_rate() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.TaskStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.TaskStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.TaskStats)
    UnsafeMergeFrom(*source);
  }
}

void TaskStats::MergeFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.TaskStats)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TaskStats::UnsafeMergeFrom(const TaskStats& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.cpu_limit() != 0) {
    set_cpu_limit(from.cpu_limit());
  }
  if (from.cpu_request() != 0) {
    set_cpu_request(from.cpu_request());
  }
  if (from.cpu_usage() != 0) {
    set_cpu_usage(from.cpu_usage());
  }
  if (from.mem_limit() != 0) {
    set_mem_limit(from.mem_limit());
  }
  if (from.mem_request() != 0) {
    set_mem_request(from.mem_request());
  }
  if (from.mem_usage() != 0) {
    set_mem_usage(from.mem_usage());
  }
  if (from.mem_rss() != 0) {
    set_mem_rss(from.mem_rss());
  }
  if (from.mem_cache() != 0) {
    set_mem_cache(from.mem_cache());
  }
  if (from.mem_working_set() != 0) {
    set_mem_working_set(from.mem_working_set());
  }
  if (from.mem_page_faults() != 0) {
    set_mem_page_faults(from.mem_page_faults());
  }
  if (from.mem_page_faults_rate() != 0) {
    set_mem_page_faults_rate(from.mem_page_faults_rate());
  }
  if (from.major_page_faults() != 0) {
    set_major_page_faults(from.major_page_faults());
  }
  if (from.major_page_faults_rate() != 0) {
    set_major_page_faults_rate(from.major_page_faults_rate());
  }
  if (from.net_rx() != 0) {
    set_net_rx(from.net_rx());
  }
  if (from.net_rx_errors() != 0) {
    set_net_rx_errors(from.net_rx_errors());
  }
  if (from.net_rx_errors_rate() != 0) {
    set_net_rx_errors_rate(from.net_rx_errors_rate());
  }
  if (from.net_rx_rate() != 0) {
    set_net_rx_rate(from.net_rx_rate());
  }
  if (from.net_tx() != 0) {
    set_net_tx(from.net_tx());
  }
  if (from.net_tx_errors() != 0) {
    set_net_tx_errors(from.net_tx_errors());
  }
  if (from.net_tx_errors_rate() != 0) {
    set_net_tx_errors_rate(from.net_tx_errors_rate());
  }
  if (from.net_tx_rate() != 0) {
    set_net_tx_rate(from.net_tx_rate());
  }
}

void TaskStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.TaskStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStats::CopyFrom(const TaskStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.TaskStats)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TaskStats::IsInitialized() const {

  return true;
}

void TaskStats::Swap(TaskStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskStats::InternalSwap(TaskStats* other) {
  std::swap(task_id_, other->task_id_);
  hostname_.Swap(&other->hostname_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(cpu_limit_, other->cpu_limit_);
  std::swap(cpu_request_, other->cpu_request_);
  std::swap(cpu_usage_, other->cpu_usage_);
  std::swap(mem_limit_, other->mem_limit_);
  std::swap(mem_request_, other->mem_request_);
  std::swap(mem_usage_, other->mem_usage_);
  std::swap(mem_rss_, other->mem_rss_);
  std::swap(mem_cache_, other->mem_cache_);
  std::swap(mem_working_set_, other->mem_working_set_);
  std::swap(mem_page_faults_, other->mem_page_faults_);
  std::swap(mem_page_faults_rate_, other->mem_page_faults_rate_);
  std::swap(major_page_faults_, other->major_page_faults_);
  std::swap(major_page_faults_rate_, other->major_page_faults_rate_);
  std::swap(net_rx_, other->net_rx_);
  std::swap(net_rx_errors_, other->net_rx_errors_);
  std::swap(net_rx_errors_rate_, other->net_rx_errors_rate_);
  std::swap(net_rx_rate_, other->net_rx_rate_);
  std::swap(net_tx_, other->net_tx_);
  std::swap(net_tx_errors_, other->net_tx_errors_);
  std::swap(net_tx_errors_rate_, other->net_tx_errors_rate_);
  std::swap(net_tx_rate_, other->net_tx_rate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskStats_descriptor_;
  metadata.reflection = TaskStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskStats

// optional uint64 task_id = 1;
void TaskStats::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskStats::task_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.task_id)
  return task_id_;
}
void TaskStats::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.task_id)
}

// optional string hostname = 2;
void TaskStats::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskStats::hostname() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskStats::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskStats.hostname)
}
void TaskStats::set_hostname(const char* value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskStats.hostname)
}
void TaskStats::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskStats.hostname)
}
::std::string* TaskStats::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskStats.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskStats::release_hostname() {
  // @@protoc_insertion_point(field_release:firmament.TaskStats.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskStats::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskStats.hostname)
}

// optional uint64 timestamp = 3;
void TaskStats::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskStats::timestamp() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.timestamp)
  return timestamp_;
}
void TaskStats::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.timestamp)
}

// optional int64 cpu_limit = 4;
void TaskStats::clear_cpu_limit() {
  cpu_limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::cpu_limit() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.cpu_limit)
  return cpu_limit_;
}
void TaskStats::set_cpu_limit(::google::protobuf::int64 value) {
  
  cpu_limit_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.cpu_limit)
}

// optional int64 cpu_request = 5;
void TaskStats::clear_cpu_request() {
  cpu_request_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::cpu_request() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.cpu_request)
  return cpu_request_;
}
void TaskStats::set_cpu_request(::google::protobuf::int64 value) {
  
  cpu_request_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.cpu_request)
}

// optional int64 cpu_usage = 6;
void TaskStats::clear_cpu_usage() {
  cpu_usage_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::cpu_usage() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.cpu_usage)
  return cpu_usage_;
}
void TaskStats::set_cpu_usage(::google::protobuf::int64 value) {
  
  cpu_usage_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.cpu_usage)
}

// optional int64 mem_limit = 7;
void TaskStats::clear_mem_limit() {
  mem_limit_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::mem_limit() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.mem_limit)
  return mem_limit_;
}
void TaskStats::set_mem_limit(::google::protobuf::int64 value) {
  
  mem_limit_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.mem_limit)
}

// optional int64 mem_request = 8;
void TaskStats::clear_mem_request() {
  mem_request_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::mem_request() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.mem_request)
  return mem_request_;
}
void TaskStats::set_mem_request(::google::protobuf::int64 value) {
  
  mem_request_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.mem_request)
}

// optional int64 mem_usage = 9;
void TaskStats::clear_mem_usage() {
  mem_usage_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::mem_usage() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.mem_usage)
  return mem_usage_;
}
void TaskStats::set_mem_usage(::google::protobuf::int64 value) {
  
  mem_usage_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.mem_usage)
}

// optional int64 mem_rss = 10;
void TaskStats::clear_mem_rss() {
  mem_rss_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::mem_rss() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.mem_rss)
  return mem_rss_;
}
void TaskStats::set_mem_rss(::google::protobuf::int64 value) {
  
  mem_rss_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.mem_rss)
}

// optional int64 mem_cache = 11;
void TaskStats::clear_mem_cache() {
  mem_cache_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::mem_cache() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.mem_cache)
  return mem_cache_;
}
void TaskStats::set_mem_cache(::google::protobuf::int64 value) {
  
  mem_cache_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.mem_cache)
}

// optional int64 mem_working_set = 12;
void TaskStats::clear_mem_working_set() {
  mem_working_set_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::mem_working_set() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.mem_working_set)
  return mem_working_set_;
}
void TaskStats::set_mem_working_set(::google::protobuf::int64 value) {
  
  mem_working_set_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.mem_working_set)
}

// optional int64 mem_page_faults = 13;
void TaskStats::clear_mem_page_faults() {
  mem_page_faults_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::mem_page_faults() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.mem_page_faults)
  return mem_page_faults_;
}
void TaskStats::set_mem_page_faults(::google::protobuf::int64 value) {
  
  mem_page_faults_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.mem_page_faults)
}

// optional double mem_page_faults_rate = 14;
void TaskStats::clear_mem_page_faults_rate() {
  mem_page_faults_rate_ = 0;
}
double TaskStats::mem_page_faults_rate() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.mem_page_faults_rate)
  return mem_page_faults_rate_;
}
void TaskStats::set_mem_page_faults_rate(double value) {
  
  mem_page_faults_rate_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.mem_page_faults_rate)
}

// optional int64 major_page_faults = 15;
void TaskStats::clear_major_page_faults() {
  major_page_faults_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::major_page_faults() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.major_page_faults)
  return major_page_faults_;
}
void TaskStats::set_major_page_faults(::google::protobuf::int64 value) {
  
  major_page_faults_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.major_page_faults)
}

// optional double major_page_faults_rate = 16;
void TaskStats::clear_major_page_faults_rate() {
  major_page_faults_rate_ = 0;
}
double TaskStats::major_page_faults_rate() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.major_page_faults_rate)
  return major_page_faults_rate_;
}
void TaskStats::set_major_page_faults_rate(double value) {
  
  major_page_faults_rate_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.major_page_faults_rate)
}

// optional int64 net_rx = 17;
void TaskStats::clear_net_rx() {
  net_rx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::net_rx() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.net_rx)
  return net_rx_;
}
void TaskStats::set_net_rx(::google::protobuf::int64 value) {
  
  net_rx_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.net_rx)
}

// optional int64 net_rx_errors = 18;
void TaskStats::clear_net_rx_errors() {
  net_rx_errors_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::net_rx_errors() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.net_rx_errors)
  return net_rx_errors_;
}
void TaskStats::set_net_rx_errors(::google::protobuf::int64 value) {
  
  net_rx_errors_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.net_rx_errors)
}

// optional double net_rx_errors_rate = 19;
void TaskStats::clear_net_rx_errors_rate() {
  net_rx_errors_rate_ = 0;
}
double TaskStats::net_rx_errors_rate() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.net_rx_errors_rate)
  return net_rx_errors_rate_;
}
void TaskStats::set_net_rx_errors_rate(double value) {
  
  net_rx_errors_rate_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.net_rx_errors_rate)
}

// optional double net_rx_rate = 20;
void TaskStats::clear_net_rx_rate() {
  net_rx_rate_ = 0;
}
double TaskStats::net_rx_rate() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.net_rx_rate)
  return net_rx_rate_;
}
void TaskStats::set_net_rx_rate(double value) {
  
  net_rx_rate_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.net_rx_rate)
}

// optional int64 net_tx = 21;
void TaskStats::clear_net_tx() {
  net_tx_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::net_tx() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.net_tx)
  return net_tx_;
}
void TaskStats::set_net_tx(::google::protobuf::int64 value) {
  
  net_tx_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.net_tx)
}

// optional int64 net_tx_errors = 22;
void TaskStats::clear_net_tx_errors() {
  net_tx_errors_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TaskStats::net_tx_errors() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.net_tx_errors)
  return net_tx_errors_;
}
void TaskStats::set_net_tx_errors(::google::protobuf::int64 value) {
  
  net_tx_errors_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.net_tx_errors)
}

// optional double net_tx_errors_rate = 23;
void TaskStats::clear_net_tx_errors_rate() {
  net_tx_errors_rate_ = 0;
}
double TaskStats::net_tx_errors_rate() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.net_tx_errors_rate)
  return net_tx_errors_rate_;
}
void TaskStats::set_net_tx_errors_rate(double value) {
  
  net_tx_errors_rate_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.net_tx_errors_rate)
}

// optional double net_tx_rate = 24;
void TaskStats::clear_net_tx_rate() {
  net_tx_rate_ = 0;
}
double TaskStats::net_tx_rate() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStats.net_tx_rate)
  return net_tx_rate_;
}
void TaskStats::set_net_tx_rate(double value) {
  
  net_tx_rate_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStats.net_tx_rate)
}

inline const TaskStats* TaskStats::internal_default_instance() {
  return &TaskStats_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
