// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/reference_desc.proto

#ifndef PROTOBUF_base_2freference_5fdesc_2eproto__INCLUDED
#define PROTOBUF_base_2freference_5fdesc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace firmament {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_base_2freference_5fdesc_2eproto();
void protobuf_InitDefaults_base_2freference_5fdesc_2eproto();
void protobuf_AssignDesc_base_2freference_5fdesc_2eproto();
void protobuf_ShutdownFile_base_2freference_5fdesc_2eproto();

class ReferenceDescriptor;

enum ReferenceDescriptor_ReferenceType {
  ReferenceDescriptor_ReferenceType_TOMBSTONE = 0,
  ReferenceDescriptor_ReferenceType_FUTURE = 1,
  ReferenceDescriptor_ReferenceType_CONCRETE = 2,
  ReferenceDescriptor_ReferenceType_STREAM = 3,
  ReferenceDescriptor_ReferenceType_VALUE = 4,
  ReferenceDescriptor_ReferenceType_ERROR = 5,
  ReferenceDescriptor_ReferenceType_ReferenceDescriptor_ReferenceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReferenceDescriptor_ReferenceType_ReferenceDescriptor_ReferenceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReferenceDescriptor_ReferenceType_IsValid(int value);
const ReferenceDescriptor_ReferenceType ReferenceDescriptor_ReferenceType_ReferenceType_MIN = ReferenceDescriptor_ReferenceType_TOMBSTONE;
const ReferenceDescriptor_ReferenceType ReferenceDescriptor_ReferenceType_ReferenceType_MAX = ReferenceDescriptor_ReferenceType_ERROR;
const int ReferenceDescriptor_ReferenceType_ReferenceType_ARRAYSIZE = ReferenceDescriptor_ReferenceType_ReferenceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReferenceDescriptor_ReferenceType_descriptor();
inline const ::std::string& ReferenceDescriptor_ReferenceType_Name(ReferenceDescriptor_ReferenceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReferenceDescriptor_ReferenceType_descriptor(), value);
}
inline bool ReferenceDescriptor_ReferenceType_Parse(
    const ::std::string& name, ReferenceDescriptor_ReferenceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReferenceDescriptor_ReferenceType>(
    ReferenceDescriptor_ReferenceType_descriptor(), name, value);
}
enum ReferenceDescriptor_ReferenceScope {
  ReferenceDescriptor_ReferenceScope_PUBLIC = 0,
  ReferenceDescriptor_ReferenceScope_PRIVATE = 1,
  ReferenceDescriptor_ReferenceScope_ReferenceDescriptor_ReferenceScope_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReferenceDescriptor_ReferenceScope_ReferenceDescriptor_ReferenceScope_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReferenceDescriptor_ReferenceScope_IsValid(int value);
const ReferenceDescriptor_ReferenceScope ReferenceDescriptor_ReferenceScope_ReferenceScope_MIN = ReferenceDescriptor_ReferenceScope_PUBLIC;
const ReferenceDescriptor_ReferenceScope ReferenceDescriptor_ReferenceScope_ReferenceScope_MAX = ReferenceDescriptor_ReferenceScope_PRIVATE;
const int ReferenceDescriptor_ReferenceScope_ReferenceScope_ARRAYSIZE = ReferenceDescriptor_ReferenceScope_ReferenceScope_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReferenceDescriptor_ReferenceScope_descriptor();
inline const ::std::string& ReferenceDescriptor_ReferenceScope_Name(ReferenceDescriptor_ReferenceScope value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReferenceDescriptor_ReferenceScope_descriptor(), value);
}
inline bool ReferenceDescriptor_ReferenceScope_Parse(
    const ::std::string& name, ReferenceDescriptor_ReferenceScope* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReferenceDescriptor_ReferenceScope>(
    ReferenceDescriptor_ReferenceScope_descriptor(), name, value);
}
// ===================================================================

class ReferenceDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firmament.ReferenceDescriptor) */ {
 public:
  ReferenceDescriptor();
  virtual ~ReferenceDescriptor();

  ReferenceDescriptor(const ReferenceDescriptor& from);

  inline ReferenceDescriptor& operator=(const ReferenceDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceDescriptor& default_instance();

  static const ReferenceDescriptor* internal_default_instance();

  void Swap(ReferenceDescriptor* other);

  // implements Message ----------------------------------------------

  inline ReferenceDescriptor* New() const { return New(NULL); }

  ReferenceDescriptor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReferenceDescriptor& from);
  void MergeFrom(const ReferenceDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReferenceDescriptor* other);
  void UnsafeMergeFrom(const ReferenceDescriptor& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReferenceDescriptor_ReferenceType ReferenceType;
  static const ReferenceType TOMBSTONE =
    ReferenceDescriptor_ReferenceType_TOMBSTONE;
  static const ReferenceType FUTURE =
    ReferenceDescriptor_ReferenceType_FUTURE;
  static const ReferenceType CONCRETE =
    ReferenceDescriptor_ReferenceType_CONCRETE;
  static const ReferenceType STREAM =
    ReferenceDescriptor_ReferenceType_STREAM;
  static const ReferenceType VALUE =
    ReferenceDescriptor_ReferenceType_VALUE;
  static const ReferenceType ERROR =
    ReferenceDescriptor_ReferenceType_ERROR;
  static inline bool ReferenceType_IsValid(int value) {
    return ReferenceDescriptor_ReferenceType_IsValid(value);
  }
  static const ReferenceType ReferenceType_MIN =
    ReferenceDescriptor_ReferenceType_ReferenceType_MIN;
  static const ReferenceType ReferenceType_MAX =
    ReferenceDescriptor_ReferenceType_ReferenceType_MAX;
  static const int ReferenceType_ARRAYSIZE =
    ReferenceDescriptor_ReferenceType_ReferenceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReferenceType_descriptor() {
    return ReferenceDescriptor_ReferenceType_descriptor();
  }
  static inline const ::std::string& ReferenceType_Name(ReferenceType value) {
    return ReferenceDescriptor_ReferenceType_Name(value);
  }
  static inline bool ReferenceType_Parse(const ::std::string& name,
      ReferenceType* value) {
    return ReferenceDescriptor_ReferenceType_Parse(name, value);
  }

  typedef ReferenceDescriptor_ReferenceScope ReferenceScope;
  static const ReferenceScope PUBLIC =
    ReferenceDescriptor_ReferenceScope_PUBLIC;
  static const ReferenceScope PRIVATE =
    ReferenceDescriptor_ReferenceScope_PRIVATE;
  static inline bool ReferenceScope_IsValid(int value) {
    return ReferenceDescriptor_ReferenceScope_IsValid(value);
  }
  static const ReferenceScope ReferenceScope_MIN =
    ReferenceDescriptor_ReferenceScope_ReferenceScope_MIN;
  static const ReferenceScope ReferenceScope_MAX =
    ReferenceDescriptor_ReferenceScope_ReferenceScope_MAX;
  static const int ReferenceScope_ARRAYSIZE =
    ReferenceDescriptor_ReferenceScope_ReferenceScope_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ReferenceScope_descriptor() {
    return ReferenceDescriptor_ReferenceScope_descriptor();
  }
  static inline const ::std::string& ReferenceScope_Name(ReferenceScope value) {
    return ReferenceDescriptor_ReferenceScope_Name(value);
  }
  static inline bool ReferenceScope_Parse(const ::std::string& name,
      ReferenceScope* value) {
    return ReferenceDescriptor_ReferenceScope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional .firmament.ReferenceDescriptor.ReferenceType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::firmament::ReferenceDescriptor_ReferenceType type() const;
  void set_type(::firmament::ReferenceDescriptor_ReferenceType value);

  // optional .firmament.ReferenceDescriptor.ReferenceScope scope = 3;
  void clear_scope();
  static const int kScopeFieldNumber = 3;
  ::firmament::ReferenceDescriptor_ReferenceScope scope() const;
  void set_scope(::firmament::ReferenceDescriptor_ReferenceScope value);

  // optional bool non_deterministic = 4;
  void clear_non_deterministic();
  static const int kNonDeterministicFieldNumber = 4;
  bool non_deterministic() const;
  void set_non_deterministic(bool value);

  // optional uint64 size = 5;
  void clear_size();
  static const int kSizeFieldNumber = 5;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // optional string location = 6;
  void clear_location();
  static const int kLocationFieldNumber = 6;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional bytes inline_data = 7;
  void clear_inline_data();
  static const int kInlineDataFieldNumber = 7;
  const ::std::string& inline_data() const;
  void set_inline_data(const ::std::string& value);
  void set_inline_data(const char* value);
  void set_inline_data(const void* value, size_t size);
  ::std::string* mutable_inline_data();
  ::std::string* release_inline_data();
  void set_allocated_inline_data(::std::string* inline_data);

  // optional uint64 producing_task = 8;
  void clear_producing_task();
  static const int kProducingTaskFieldNumber = 8;
  ::google::protobuf::uint64 producing_task() const;
  void set_producing_task(::google::protobuf::uint64 value);

  // optional uint64 time_to_compute = 9;
  void clear_time_to_compute();
  static const int kTimeToComputeFieldNumber = 9;
  ::google::protobuf::uint64 time_to_compute() const;
  void set_time_to_compute(::google::protobuf::uint64 value);

  // optional uint64 version = 10;
  void clear_version();
  static const int kVersionFieldNumber = 10;
  ::google::protobuf::uint64 version() const;
  void set_version(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:firmament.ReferenceDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr inline_data_;
  int type_;
  int scope_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 producing_task_;
  ::google::protobuf::uint64 time_to_compute_;
  ::google::protobuf::uint64 version_;
  bool non_deterministic_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_base_2freference_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_base_2freference_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_base_2freference_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_base_2freference_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ReferenceDescriptor> ReferenceDescriptor_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ReferenceDescriptor

// optional bytes id = 1;
inline void ReferenceDescriptor::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReferenceDescriptor::id() const {
  // @@protoc_insertion_point(field_get:firmament.ReferenceDescriptor.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceDescriptor::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.ReferenceDescriptor.id)
}
inline void ReferenceDescriptor::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.ReferenceDescriptor.id)
}
inline void ReferenceDescriptor::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.ReferenceDescriptor.id)
}
inline ::std::string* ReferenceDescriptor::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:firmament.ReferenceDescriptor.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReferenceDescriptor::release_id() {
  // @@protoc_insertion_point(field_release:firmament.ReferenceDescriptor.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceDescriptor::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firmament.ReferenceDescriptor.id)
}

// optional .firmament.ReferenceDescriptor.ReferenceType type = 2;
inline void ReferenceDescriptor::clear_type() {
  type_ = 0;
}
inline ::firmament::ReferenceDescriptor_ReferenceType ReferenceDescriptor::type() const {
  // @@protoc_insertion_point(field_get:firmament.ReferenceDescriptor.type)
  return static_cast< ::firmament::ReferenceDescriptor_ReferenceType >(type_);
}
inline void ReferenceDescriptor::set_type(::firmament::ReferenceDescriptor_ReferenceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:firmament.ReferenceDescriptor.type)
}

// optional .firmament.ReferenceDescriptor.ReferenceScope scope = 3;
inline void ReferenceDescriptor::clear_scope() {
  scope_ = 0;
}
inline ::firmament::ReferenceDescriptor_ReferenceScope ReferenceDescriptor::scope() const {
  // @@protoc_insertion_point(field_get:firmament.ReferenceDescriptor.scope)
  return static_cast< ::firmament::ReferenceDescriptor_ReferenceScope >(scope_);
}
inline void ReferenceDescriptor::set_scope(::firmament::ReferenceDescriptor_ReferenceScope value) {
  
  scope_ = value;
  // @@protoc_insertion_point(field_set:firmament.ReferenceDescriptor.scope)
}

// optional bool non_deterministic = 4;
inline void ReferenceDescriptor::clear_non_deterministic() {
  non_deterministic_ = false;
}
inline bool ReferenceDescriptor::non_deterministic() const {
  // @@protoc_insertion_point(field_get:firmament.ReferenceDescriptor.non_deterministic)
  return non_deterministic_;
}
inline void ReferenceDescriptor::set_non_deterministic(bool value) {
  
  non_deterministic_ = value;
  // @@protoc_insertion_point(field_set:firmament.ReferenceDescriptor.non_deterministic)
}

// optional uint64 size = 5;
inline void ReferenceDescriptor::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReferenceDescriptor::size() const {
  // @@protoc_insertion_point(field_get:firmament.ReferenceDescriptor.size)
  return size_;
}
inline void ReferenceDescriptor::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:firmament.ReferenceDescriptor.size)
}

// optional string location = 6;
inline void ReferenceDescriptor::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReferenceDescriptor::location() const {
  // @@protoc_insertion_point(field_get:firmament.ReferenceDescriptor.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceDescriptor::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.ReferenceDescriptor.location)
}
inline void ReferenceDescriptor::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.ReferenceDescriptor.location)
}
inline void ReferenceDescriptor::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.ReferenceDescriptor.location)
}
inline ::std::string* ReferenceDescriptor::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:firmament.ReferenceDescriptor.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReferenceDescriptor::release_location() {
  // @@protoc_insertion_point(field_release:firmament.ReferenceDescriptor.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceDescriptor::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:firmament.ReferenceDescriptor.location)
}

// optional bytes inline_data = 7;
inline void ReferenceDescriptor::clear_inline_data() {
  inline_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReferenceDescriptor::inline_data() const {
  // @@protoc_insertion_point(field_get:firmament.ReferenceDescriptor.inline_data)
  return inline_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceDescriptor::set_inline_data(const ::std::string& value) {
  
  inline_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.ReferenceDescriptor.inline_data)
}
inline void ReferenceDescriptor::set_inline_data(const char* value) {
  
  inline_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.ReferenceDescriptor.inline_data)
}
inline void ReferenceDescriptor::set_inline_data(const void* value, size_t size) {
  
  inline_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.ReferenceDescriptor.inline_data)
}
inline ::std::string* ReferenceDescriptor::mutable_inline_data() {
  
  // @@protoc_insertion_point(field_mutable:firmament.ReferenceDescriptor.inline_data)
  return inline_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReferenceDescriptor::release_inline_data() {
  // @@protoc_insertion_point(field_release:firmament.ReferenceDescriptor.inline_data)
  
  return inline_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReferenceDescriptor::set_allocated_inline_data(::std::string* inline_data) {
  if (inline_data != NULL) {
    
  } else {
    
  }
  inline_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inline_data);
  // @@protoc_insertion_point(field_set_allocated:firmament.ReferenceDescriptor.inline_data)
}

// optional uint64 producing_task = 8;
inline void ReferenceDescriptor::clear_producing_task() {
  producing_task_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReferenceDescriptor::producing_task() const {
  // @@protoc_insertion_point(field_get:firmament.ReferenceDescriptor.producing_task)
  return producing_task_;
}
inline void ReferenceDescriptor::set_producing_task(::google::protobuf::uint64 value) {
  
  producing_task_ = value;
  // @@protoc_insertion_point(field_set:firmament.ReferenceDescriptor.producing_task)
}

// optional uint64 time_to_compute = 9;
inline void ReferenceDescriptor::clear_time_to_compute() {
  time_to_compute_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReferenceDescriptor::time_to_compute() const {
  // @@protoc_insertion_point(field_get:firmament.ReferenceDescriptor.time_to_compute)
  return time_to_compute_;
}
inline void ReferenceDescriptor::set_time_to_compute(::google::protobuf::uint64 value) {
  
  time_to_compute_ = value;
  // @@protoc_insertion_point(field_set:firmament.ReferenceDescriptor.time_to_compute)
}

// optional uint64 version = 10;
inline void ReferenceDescriptor::clear_version() {
  version_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ReferenceDescriptor::version() const {
  // @@protoc_insertion_point(field_get:firmament.ReferenceDescriptor.version)
  return version_;
}
inline void ReferenceDescriptor::set_version(::google::protobuf::uint64 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:firmament.ReferenceDescriptor.version)
}

inline const ReferenceDescriptor* ReferenceDescriptor::internal_default_instance() {
  return &ReferenceDescriptor_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::firmament::ReferenceDescriptor_ReferenceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firmament::ReferenceDescriptor_ReferenceType>() {
  return ::firmament::ReferenceDescriptor_ReferenceType_descriptor();
}
template <> struct is_proto_enum< ::firmament::ReferenceDescriptor_ReferenceScope> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firmament::ReferenceDescriptor_ReferenceScope>() {
  return ::firmament::ReferenceDescriptor_ReferenceScope_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2freference_5fdesc_2eproto__INCLUDED
