// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/resource_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/resource_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* ResourceStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* CpuStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CpuStats_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2fresource_5fstats_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_base_2fresource_5fstats_2eproto() {
  protobuf_AddDesc_base_2fresource_5fstats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/resource_stats.proto");
  GOOGLE_CHECK(file != NULL);
  ResourceStats_descriptor_ = file->message_type(0);
  static const int ResourceStats_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStats, resource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStats, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStats, cpus_stats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStats, mem_allocatable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStats, mem_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStats, mem_reservation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStats, mem_utilization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStats, disk_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStats, net_rx_bw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStats, net_tx_bw_),
  };
  ResourceStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceStats_descriptor_,
      ResourceStats::internal_default_instance(),
      ResourceStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResourceStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceStats, _internal_metadata_));
  CpuStats_descriptor_ = file->message_type(1);
  static const int CpuStats_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpuStats, cpu_allocatable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpuStats, cpu_capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpuStats, cpu_reservation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpuStats, cpu_utilization_),
  };
  CpuStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CpuStats_descriptor_,
      CpuStats::internal_default_instance(),
      CpuStats_offsets_,
      -1,
      -1,
      -1,
      sizeof(CpuStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CpuStats, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2fresource_5fstats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceStats_descriptor_, ResourceStats::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CpuStats_descriptor_, CpuStats::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2fresource_5fstats_2eproto() {
  ResourceStats_default_instance_.Shutdown();
  delete ResourceStats_reflection_;
  CpuStats_default_instance_.Shutdown();
  delete CpuStats_reflection_;
}

void protobuf_InitDefaults_base_2fresource_5fstats_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ResourceStats_default_instance_.DefaultConstruct();
  CpuStats_default_instance_.DefaultConstruct();
  ResourceStats_default_instance_.get_mutable()->InitAsDefaultInstance();
  CpuStats_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_base_2fresource_5fstats_2eproto_once_);
void protobuf_InitDefaults_base_2fresource_5fstats_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_base_2fresource_5fstats_2eproto_once_,
                 &protobuf_InitDefaults_base_2fresource_5fstats_2eproto_impl);
}
void protobuf_AddDesc_base_2fresource_5fstats_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_base_2fresource_5fstats_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031base/resource_stats.proto\022\tfirmament\"\370"
    "\001\n\rResourceStats\022\023\n\013resource_id\030\001 \001(\t\022\021\n"
    "\ttimestamp\030\002 \001(\004\022\'\n\ncpus_stats\030\003 \003(\0132\023.f"
    "irmament.CpuStats\022\027\n\017mem_allocatable\030\004 \001"
    "(\003\022\024\n\014mem_capacity\030\005 \001(\003\022\027\n\017mem_reservat"
    "ion\030\006 \001(\001\022\027\n\017mem_utilization\030\007 \001(\001\022\017\n\007di"
    "sk_bw\030\010 \001(\003\022\021\n\tnet_rx_bw\030\t \001(\003\022\021\n\tnet_tx"
    "_bw\030\n \001(\003\"k\n\010CpuStats\022\027\n\017cpu_allocatable"
    "\030\001 \001(\003\022\024\n\014cpu_capacity\030\002 \001(\003\022\027\n\017cpu_rese"
    "rvation\030\003 \001(\001\022\027\n\017cpu_utilization\030\004 \001(\001b\006"
    "proto3", 406);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/resource_stats.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2fresource_5fstats_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_base_2fresource_5fstats_2eproto_once_);
void protobuf_AddDesc_base_2fresource_5fstats_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_base_2fresource_5fstats_2eproto_once_,
                 &protobuf_AddDesc_base_2fresource_5fstats_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2fresource_5fstats_2eproto {
  StaticDescriptorInitializer_base_2fresource_5fstats_2eproto() {
    protobuf_AddDesc_base_2fresource_5fstats_2eproto();
  }
} static_descriptor_initializer_base_2fresource_5fstats_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceStats::kResourceIdFieldNumber;
const int ResourceStats::kTimestampFieldNumber;
const int ResourceStats::kCpusStatsFieldNumber;
const int ResourceStats::kMemAllocatableFieldNumber;
const int ResourceStats::kMemCapacityFieldNumber;
const int ResourceStats::kMemReservationFieldNumber;
const int ResourceStats::kMemUtilizationFieldNumber;
const int ResourceStats::kDiskBwFieldNumber;
const int ResourceStats::kNetRxBwFieldNumber;
const int ResourceStats::kNetTxBwFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceStats::ResourceStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_base_2fresource_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.ResourceStats)
}

void ResourceStats::InitAsDefaultInstance() {
}

ResourceStats::ResourceStats(const ResourceStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.ResourceStats)
}

void ResourceStats::SharedCtor() {
  resource_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&net_tx_bw_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(net_tx_bw_));
  _cached_size_ = 0;
}

ResourceStats::~ResourceStats() {
  // @@protoc_insertion_point(destructor:firmament.ResourceStats)
  SharedDtor();
}

void ResourceStats::SharedDtor() {
  resource_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResourceStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceStats_descriptor_;
}

const ResourceStats& ResourceStats::default_instance() {
  protobuf_InitDefaults_base_2fresource_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResourceStats> ResourceStats_default_instance_;

ResourceStats* ResourceStats::New(::google::protobuf::Arena* arena) const {
  ResourceStats* n = new ResourceStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceStats::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.ResourceStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResourceStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResourceStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(timestamp_, disk_bw_);
  resource_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ZR_(net_rx_bw_, net_tx_bw_);

#undef ZR_HELPER_
#undef ZR_

  cpus_stats_.Clear();
}

bool ResourceStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.ResourceStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string resource_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resource_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resource_id().data(), this->resource_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.ResourceStats.resource_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cpus_stats;
        break;
      }

      // repeated .firmament.CpuStats cpus_stats = 3;
      case 3: {
        if (tag == 26) {
         parse_cpus_stats:
          DO_(input->IncrementRecursionDepth());
         parse_loop_cpus_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cpus_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_cpus_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_mem_allocatable;
        break;
      }

      // optional int64 mem_allocatable = 4;
      case 4: {
        if (tag == 32) {
         parse_mem_allocatable:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_allocatable_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mem_capacity;
        break;
      }

      // optional int64 mem_capacity = 5;
      case 5: {
        if (tag == 40) {
         parse_mem_capacity:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mem_capacity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_mem_reservation;
        break;
      }

      // optional double mem_reservation = 6;
      case 6: {
        if (tag == 49) {
         parse_mem_reservation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mem_reservation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_mem_utilization;
        break;
      }

      // optional double mem_utilization = 7;
      case 7: {
        if (tag == 57) {
         parse_mem_utilization:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mem_utilization_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_disk_bw;
        break;
      }

      // optional int64 disk_bw = 8;
      case 8: {
        if (tag == 64) {
         parse_disk_bw:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &disk_bw_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_net_rx_bw;
        break;
      }

      // optional int64 net_rx_bw = 9;
      case 9: {
        if (tag == 72) {
         parse_net_rx_bw:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &net_rx_bw_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_net_tx_bw;
        break;
      }

      // optional int64 net_tx_bw = 10;
      case 10: {
        if (tag == 80) {
         parse_net_tx_bw:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &net_tx_bw_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.ResourceStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.ResourceStats)
  return false;
#undef DO_
}

void ResourceStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.ResourceStats)
  // optional string resource_id = 1;
  if (this->resource_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource_id().data(), this->resource_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.ResourceStats.resource_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resource_id(), output);
  }

  // optional uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  // repeated .firmament.CpuStats cpus_stats = 3;
  for (unsigned int i = 0, n = this->cpus_stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cpus_stats(i), output);
  }

  // optional int64 mem_allocatable = 4;
  if (this->mem_allocatable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->mem_allocatable(), output);
  }

  // optional int64 mem_capacity = 5;
  if (this->mem_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->mem_capacity(), output);
  }

  // optional double mem_reservation = 6;
  if (this->mem_reservation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->mem_reservation(), output);
  }

  // optional double mem_utilization = 7;
  if (this->mem_utilization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->mem_utilization(), output);
  }

  // optional int64 disk_bw = 8;
  if (this->disk_bw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->disk_bw(), output);
  }

  // optional int64 net_rx_bw = 9;
  if (this->net_rx_bw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->net_rx_bw(), output);
  }

  // optional int64 net_tx_bw = 10;
  if (this->net_tx_bw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->net_tx_bw(), output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.ResourceStats)
}

::google::protobuf::uint8* ResourceStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.ResourceStats)
  // optional string resource_id = 1;
  if (this->resource_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resource_id().data(), this->resource_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.ResourceStats.resource_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resource_id(), target);
  }

  // optional uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // repeated .firmament.CpuStats cpus_stats = 3;
  for (unsigned int i = 0, n = this->cpus_stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->cpus_stats(i), false, target);
  }

  // optional int64 mem_allocatable = 4;
  if (this->mem_allocatable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->mem_allocatable(), target);
  }

  // optional int64 mem_capacity = 5;
  if (this->mem_capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->mem_capacity(), target);
  }

  // optional double mem_reservation = 6;
  if (this->mem_reservation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->mem_reservation(), target);
  }

  // optional double mem_utilization = 7;
  if (this->mem_utilization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->mem_utilization(), target);
  }

  // optional int64 disk_bw = 8;
  if (this->disk_bw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->disk_bw(), target);
  }

  // optional int64 net_rx_bw = 9;
  if (this->net_rx_bw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->net_rx_bw(), target);
  }

  // optional int64 net_tx_bw = 10;
  if (this->net_tx_bw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->net_tx_bw(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.ResourceStats)
  return target;
}

size_t ResourceStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.ResourceStats)
  size_t total_size = 0;

  // optional string resource_id = 1;
  if (this->resource_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resource_id());
  }

  // optional uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // optional int64 mem_allocatable = 4;
  if (this->mem_allocatable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mem_allocatable());
  }

  // optional int64 mem_capacity = 5;
  if (this->mem_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mem_capacity());
  }

  // optional double mem_reservation = 6;
  if (this->mem_reservation() != 0) {
    total_size += 1 + 8;
  }

  // optional double mem_utilization = 7;
  if (this->mem_utilization() != 0) {
    total_size += 1 + 8;
  }

  // optional int64 disk_bw = 8;
  if (this->disk_bw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->disk_bw());
  }

  // optional int64 net_rx_bw = 9;
  if (this->net_rx_bw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->net_rx_bw());
  }

  // optional int64 net_tx_bw = 10;
  if (this->net_tx_bw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->net_tx_bw());
  }

  // repeated .firmament.CpuStats cpus_stats = 3;
  {
    unsigned int count = this->cpus_stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cpus_stats(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.ResourceStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResourceStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.ResourceStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.ResourceStats)
    UnsafeMergeFrom(*source);
  }
}

void ResourceStats::MergeFrom(const ResourceStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.ResourceStats)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResourceStats::UnsafeMergeFrom(const ResourceStats& from) {
  GOOGLE_DCHECK(&from != this);
  cpus_stats_.MergeFrom(from.cpus_stats_);
  if (from.resource_id().size() > 0) {

    resource_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resource_id_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.mem_allocatable() != 0) {
    set_mem_allocatable(from.mem_allocatable());
  }
  if (from.mem_capacity() != 0) {
    set_mem_capacity(from.mem_capacity());
  }
  if (from.mem_reservation() != 0) {
    set_mem_reservation(from.mem_reservation());
  }
  if (from.mem_utilization() != 0) {
    set_mem_utilization(from.mem_utilization());
  }
  if (from.disk_bw() != 0) {
    set_disk_bw(from.disk_bw());
  }
  if (from.net_rx_bw() != 0) {
    set_net_rx_bw(from.net_rx_bw());
  }
  if (from.net_tx_bw() != 0) {
    set_net_tx_bw(from.net_tx_bw());
  }
}

void ResourceStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.ResourceStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceStats::CopyFrom(const ResourceStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.ResourceStats)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResourceStats::IsInitialized() const {

  return true;
}

void ResourceStats::Swap(ResourceStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceStats::InternalSwap(ResourceStats* other) {
  resource_id_.Swap(&other->resource_id_);
  std::swap(timestamp_, other->timestamp_);
  cpus_stats_.UnsafeArenaSwap(&other->cpus_stats_);
  std::swap(mem_allocatable_, other->mem_allocatable_);
  std::swap(mem_capacity_, other->mem_capacity_);
  std::swap(mem_reservation_, other->mem_reservation_);
  std::swap(mem_utilization_, other->mem_utilization_);
  std::swap(disk_bw_, other->disk_bw_);
  std::swap(net_rx_bw_, other->net_rx_bw_);
  std::swap(net_tx_bw_, other->net_tx_bw_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceStats_descriptor_;
  metadata.reflection = ResourceStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceStats

// optional string resource_id = 1;
void ResourceStats::clear_resource_id() {
  resource_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResourceStats::resource_id() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceStats.resource_id)
  return resource_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResourceStats::set_resource_id(const ::std::string& value) {
  
  resource_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.ResourceStats.resource_id)
}
void ResourceStats::set_resource_id(const char* value) {
  
  resource_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.ResourceStats.resource_id)
}
void ResourceStats::set_resource_id(const char* value, size_t size) {
  
  resource_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.ResourceStats.resource_id)
}
::std::string* ResourceStats::mutable_resource_id() {
  
  // @@protoc_insertion_point(field_mutable:firmament.ResourceStats.resource_id)
  return resource_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResourceStats::release_resource_id() {
  // @@protoc_insertion_point(field_release:firmament.ResourceStats.resource_id)
  
  return resource_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResourceStats::set_allocated_resource_id(::std::string* resource_id) {
  if (resource_id != NULL) {
    
  } else {
    
  }
  resource_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_id);
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceStats.resource_id)
}

// optional uint64 timestamp = 2;
void ResourceStats::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResourceStats::timestamp() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceStats.timestamp)
  return timestamp_;
}
void ResourceStats::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceStats.timestamp)
}

// repeated .firmament.CpuStats cpus_stats = 3;
int ResourceStats::cpus_stats_size() const {
  return cpus_stats_.size();
}
void ResourceStats::clear_cpus_stats() {
  cpus_stats_.Clear();
}
const ::firmament::CpuStats& ResourceStats::cpus_stats(int index) const {
  // @@protoc_insertion_point(field_get:firmament.ResourceStats.cpus_stats)
  return cpus_stats_.Get(index);
}
::firmament::CpuStats* ResourceStats::mutable_cpus_stats(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.ResourceStats.cpus_stats)
  return cpus_stats_.Mutable(index);
}
::firmament::CpuStats* ResourceStats::add_cpus_stats() {
  // @@protoc_insertion_point(field_add:firmament.ResourceStats.cpus_stats)
  return cpus_stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::firmament::CpuStats >*
ResourceStats::mutable_cpus_stats() {
  // @@protoc_insertion_point(field_mutable_list:firmament.ResourceStats.cpus_stats)
  return &cpus_stats_;
}
const ::google::protobuf::RepeatedPtrField< ::firmament::CpuStats >&
ResourceStats::cpus_stats() const {
  // @@protoc_insertion_point(field_list:firmament.ResourceStats.cpus_stats)
  return cpus_stats_;
}

// optional int64 mem_allocatable = 4;
void ResourceStats::clear_mem_allocatable() {
  mem_allocatable_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResourceStats::mem_allocatable() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceStats.mem_allocatable)
  return mem_allocatable_;
}
void ResourceStats::set_mem_allocatable(::google::protobuf::int64 value) {
  
  mem_allocatable_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceStats.mem_allocatable)
}

// optional int64 mem_capacity = 5;
void ResourceStats::clear_mem_capacity() {
  mem_capacity_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResourceStats::mem_capacity() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceStats.mem_capacity)
  return mem_capacity_;
}
void ResourceStats::set_mem_capacity(::google::protobuf::int64 value) {
  
  mem_capacity_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceStats.mem_capacity)
}

// optional double mem_reservation = 6;
void ResourceStats::clear_mem_reservation() {
  mem_reservation_ = 0;
}
double ResourceStats::mem_reservation() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceStats.mem_reservation)
  return mem_reservation_;
}
void ResourceStats::set_mem_reservation(double value) {
  
  mem_reservation_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceStats.mem_reservation)
}

// optional double mem_utilization = 7;
void ResourceStats::clear_mem_utilization() {
  mem_utilization_ = 0;
}
double ResourceStats::mem_utilization() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceStats.mem_utilization)
  return mem_utilization_;
}
void ResourceStats::set_mem_utilization(double value) {
  
  mem_utilization_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceStats.mem_utilization)
}

// optional int64 disk_bw = 8;
void ResourceStats::clear_disk_bw() {
  disk_bw_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResourceStats::disk_bw() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceStats.disk_bw)
  return disk_bw_;
}
void ResourceStats::set_disk_bw(::google::protobuf::int64 value) {
  
  disk_bw_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceStats.disk_bw)
}

// optional int64 net_rx_bw = 9;
void ResourceStats::clear_net_rx_bw() {
  net_rx_bw_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResourceStats::net_rx_bw() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceStats.net_rx_bw)
  return net_rx_bw_;
}
void ResourceStats::set_net_rx_bw(::google::protobuf::int64 value) {
  
  net_rx_bw_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceStats.net_rx_bw)
}

// optional int64 net_tx_bw = 10;
void ResourceStats::clear_net_tx_bw() {
  net_tx_bw_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ResourceStats::net_tx_bw() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceStats.net_tx_bw)
  return net_tx_bw_;
}
void ResourceStats::set_net_tx_bw(::google::protobuf::int64 value) {
  
  net_tx_bw_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceStats.net_tx_bw)
}

inline const ResourceStats* ResourceStats::internal_default_instance() {
  return &ResourceStats_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CpuStats::kCpuAllocatableFieldNumber;
const int CpuStats::kCpuCapacityFieldNumber;
const int CpuStats::kCpuReservationFieldNumber;
const int CpuStats::kCpuUtilizationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CpuStats::CpuStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_base_2fresource_5fstats_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.CpuStats)
}

void CpuStats::InitAsDefaultInstance() {
}

CpuStats::CpuStats(const CpuStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.CpuStats)
}

void CpuStats::SharedCtor() {
  ::memset(&cpu_allocatable_, 0, reinterpret_cast<char*>(&cpu_utilization_) -
    reinterpret_cast<char*>(&cpu_allocatable_) + sizeof(cpu_utilization_));
  _cached_size_ = 0;
}

CpuStats::~CpuStats() {
  // @@protoc_insertion_point(destructor:firmament.CpuStats)
  SharedDtor();
}

void CpuStats::SharedDtor() {
}

void CpuStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CpuStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CpuStats_descriptor_;
}

const CpuStats& CpuStats::default_instance() {
  protobuf_InitDefaults_base_2fresource_5fstats_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CpuStats> CpuStats_default_instance_;

CpuStats* CpuStats::New(::google::protobuf::Arena* arena) const {
  CpuStats* n = new CpuStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CpuStats::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.CpuStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CpuStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CpuStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cpu_allocatable_, cpu_utilization_);

#undef ZR_HELPER_
#undef ZR_

}

bool CpuStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.CpuStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 cpu_allocatable = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cpu_allocatable_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cpu_capacity;
        break;
      }

      // optional int64 cpu_capacity = 2;
      case 2: {
        if (tag == 16) {
         parse_cpu_capacity:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cpu_capacity_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_cpu_reservation;
        break;
      }

      // optional double cpu_reservation = 3;
      case 3: {
        if (tag == 25) {
         parse_cpu_reservation:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_reservation_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_cpu_utilization;
        break;
      }

      // optional double cpu_utilization = 4;
      case 4: {
        if (tag == 33) {
         parse_cpu_utilization:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_utilization_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.CpuStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.CpuStats)
  return false;
#undef DO_
}

void CpuStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.CpuStats)
  // optional int64 cpu_allocatable = 1;
  if (this->cpu_allocatable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cpu_allocatable(), output);
  }

  // optional int64 cpu_capacity = 2;
  if (this->cpu_capacity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cpu_capacity(), output);
  }

  // optional double cpu_reservation = 3;
  if (this->cpu_reservation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cpu_reservation(), output);
  }

  // optional double cpu_utilization = 4;
  if (this->cpu_utilization() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->cpu_utilization(), output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.CpuStats)
}

::google::protobuf::uint8* CpuStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.CpuStats)
  // optional int64 cpu_allocatable = 1;
  if (this->cpu_allocatable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cpu_allocatable(), target);
  }

  // optional int64 cpu_capacity = 2;
  if (this->cpu_capacity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cpu_capacity(), target);
  }

  // optional double cpu_reservation = 3;
  if (this->cpu_reservation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cpu_reservation(), target);
  }

  // optional double cpu_utilization = 4;
  if (this->cpu_utilization() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->cpu_utilization(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.CpuStats)
  return target;
}

size_t CpuStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.CpuStats)
  size_t total_size = 0;

  // optional int64 cpu_allocatable = 1;
  if (this->cpu_allocatable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cpu_allocatable());
  }

  // optional int64 cpu_capacity = 2;
  if (this->cpu_capacity() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cpu_capacity());
  }

  // optional double cpu_reservation = 3;
  if (this->cpu_reservation() != 0) {
    total_size += 1 + 8;
  }

  // optional double cpu_utilization = 4;
  if (this->cpu_utilization() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CpuStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.CpuStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CpuStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CpuStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.CpuStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.CpuStats)
    UnsafeMergeFrom(*source);
  }
}

void CpuStats::MergeFrom(const CpuStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.CpuStats)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CpuStats::UnsafeMergeFrom(const CpuStats& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.cpu_allocatable() != 0) {
    set_cpu_allocatable(from.cpu_allocatable());
  }
  if (from.cpu_capacity() != 0) {
    set_cpu_capacity(from.cpu_capacity());
  }
  if (from.cpu_reservation() != 0) {
    set_cpu_reservation(from.cpu_reservation());
  }
  if (from.cpu_utilization() != 0) {
    set_cpu_utilization(from.cpu_utilization());
  }
}

void CpuStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.CpuStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CpuStats::CopyFrom(const CpuStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.CpuStats)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CpuStats::IsInitialized() const {

  return true;
}

void CpuStats::Swap(CpuStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CpuStats::InternalSwap(CpuStats* other) {
  std::swap(cpu_allocatable_, other->cpu_allocatable_);
  std::swap(cpu_capacity_, other->cpu_capacity_);
  std::swap(cpu_reservation_, other->cpu_reservation_);
  std::swap(cpu_utilization_, other->cpu_utilization_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CpuStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CpuStats_descriptor_;
  metadata.reflection = CpuStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CpuStats

// optional int64 cpu_allocatable = 1;
void CpuStats::clear_cpu_allocatable() {
  cpu_allocatable_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CpuStats::cpu_allocatable() const {
  // @@protoc_insertion_point(field_get:firmament.CpuStats.cpu_allocatable)
  return cpu_allocatable_;
}
void CpuStats::set_cpu_allocatable(::google::protobuf::int64 value) {
  
  cpu_allocatable_ = value;
  // @@protoc_insertion_point(field_set:firmament.CpuStats.cpu_allocatable)
}

// optional int64 cpu_capacity = 2;
void CpuStats::clear_cpu_capacity() {
  cpu_capacity_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 CpuStats::cpu_capacity() const {
  // @@protoc_insertion_point(field_get:firmament.CpuStats.cpu_capacity)
  return cpu_capacity_;
}
void CpuStats::set_cpu_capacity(::google::protobuf::int64 value) {
  
  cpu_capacity_ = value;
  // @@protoc_insertion_point(field_set:firmament.CpuStats.cpu_capacity)
}

// optional double cpu_reservation = 3;
void CpuStats::clear_cpu_reservation() {
  cpu_reservation_ = 0;
}
double CpuStats::cpu_reservation() const {
  // @@protoc_insertion_point(field_get:firmament.CpuStats.cpu_reservation)
  return cpu_reservation_;
}
void CpuStats::set_cpu_reservation(double value) {
  
  cpu_reservation_ = value;
  // @@protoc_insertion_point(field_set:firmament.CpuStats.cpu_reservation)
}

// optional double cpu_utilization = 4;
void CpuStats::clear_cpu_utilization() {
  cpu_utilization_ = 0;
}
double CpuStats::cpu_utilization() const {
  // @@protoc_insertion_point(field_get:firmament.CpuStats.cpu_utilization)
  return cpu_utilization_;
}
void CpuStats::set_cpu_utilization(double value) {
  
  cpu_utilization_ = value;
  // @@protoc_insertion_point(field_set:firmament.CpuStats.cpu_utilization)
}

inline const CpuStats* CpuStats::internal_default_instance() {
  return &CpuStats_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
