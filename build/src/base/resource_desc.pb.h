// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/resource_desc.proto

#ifndef PROTOBUF_base_2fresource_5fdesc_2eproto__INCLUDED
#define PROTOBUF_base_2fresource_5fdesc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/coco_interference_scores.pb.h"
#include "base/label.pb.h"
#include "base/resource_vector.pb.h"
#include "base/whare_map_stats.pb.h"
// @@protoc_insertion_point(includes)

namespace firmament {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_base_2fresource_5fdesc_2eproto();
void protobuf_InitDefaults_base_2fresource_5fdesc_2eproto();
void protobuf_AssignDesc_base_2fresource_5fdesc_2eproto();
void protobuf_ShutdownFile_base_2fresource_5fdesc_2eproto();

class ResourceDescriptor;

enum ResourceDescriptor_ResourceState {
  ResourceDescriptor_ResourceState_RESOURCE_UNKNOWN = 0,
  ResourceDescriptor_ResourceState_RESOURCE_IDLE = 1,
  ResourceDescriptor_ResourceState_RESOURCE_BUSY = 2,
  ResourceDescriptor_ResourceState_RESOURCE_LOST = 3,
  ResourceDescriptor_ResourceState_ResourceDescriptor_ResourceState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResourceDescriptor_ResourceState_ResourceDescriptor_ResourceState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResourceDescriptor_ResourceState_IsValid(int value);
const ResourceDescriptor_ResourceState ResourceDescriptor_ResourceState_ResourceState_MIN = ResourceDescriptor_ResourceState_RESOURCE_UNKNOWN;
const ResourceDescriptor_ResourceState ResourceDescriptor_ResourceState_ResourceState_MAX = ResourceDescriptor_ResourceState_RESOURCE_LOST;
const int ResourceDescriptor_ResourceState_ResourceState_ARRAYSIZE = ResourceDescriptor_ResourceState_ResourceState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResourceDescriptor_ResourceState_descriptor();
inline const ::std::string& ResourceDescriptor_ResourceState_Name(ResourceDescriptor_ResourceState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResourceDescriptor_ResourceState_descriptor(), value);
}
inline bool ResourceDescriptor_ResourceState_Parse(
    const ::std::string& name, ResourceDescriptor_ResourceState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResourceDescriptor_ResourceState>(
    ResourceDescriptor_ResourceState_descriptor(), name, value);
}
enum ResourceDescriptor_ResourceType {
  ResourceDescriptor_ResourceType_RESOURCE_PU = 0,
  ResourceDescriptor_ResourceType_RESOURCE_CORE = 1,
  ResourceDescriptor_ResourceType_RESOURCE_CACHE = 2,
  ResourceDescriptor_ResourceType_RESOURCE_NIC = 3,
  ResourceDescriptor_ResourceType_RESOURCE_DISK = 4,
  ResourceDescriptor_ResourceType_RESOURCE_SSD = 5,
  ResourceDescriptor_ResourceType_RESOURCE_MACHINE = 6,
  ResourceDescriptor_ResourceType_RESOURCE_LOGICAL = 7,
  ResourceDescriptor_ResourceType_RESOURCE_NUMA_NODE = 8,
  ResourceDescriptor_ResourceType_RESOURCE_SOCKET = 9,
  ResourceDescriptor_ResourceType_RESOURCE_COORDINATOR = 10,
  ResourceDescriptor_ResourceType_ResourceDescriptor_ResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResourceDescriptor_ResourceType_ResourceDescriptor_ResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResourceDescriptor_ResourceType_IsValid(int value);
const ResourceDescriptor_ResourceType ResourceDescriptor_ResourceType_ResourceType_MIN = ResourceDescriptor_ResourceType_RESOURCE_PU;
const ResourceDescriptor_ResourceType ResourceDescriptor_ResourceType_ResourceType_MAX = ResourceDescriptor_ResourceType_RESOURCE_COORDINATOR;
const int ResourceDescriptor_ResourceType_ResourceType_ARRAYSIZE = ResourceDescriptor_ResourceType_ResourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResourceDescriptor_ResourceType_descriptor();
inline const ::std::string& ResourceDescriptor_ResourceType_Name(ResourceDescriptor_ResourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResourceDescriptor_ResourceType_descriptor(), value);
}
inline bool ResourceDescriptor_ResourceType_Parse(
    const ::std::string& name, ResourceDescriptor_ResourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResourceDescriptor_ResourceType>(
    ResourceDescriptor_ResourceType_descriptor(), name, value);
}
// ===================================================================

class ResourceDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firmament.ResourceDescriptor) */ {
 public:
  ResourceDescriptor();
  virtual ~ResourceDescriptor();

  ResourceDescriptor(const ResourceDescriptor& from);

  inline ResourceDescriptor& operator=(const ResourceDescriptor& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceDescriptor& default_instance();

  static const ResourceDescriptor* internal_default_instance();

  void Swap(ResourceDescriptor* other);

  // implements Message ----------------------------------------------

  inline ResourceDescriptor* New() const { return New(NULL); }

  ResourceDescriptor* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourceDescriptor& from);
  void MergeFrom(const ResourceDescriptor& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourceDescriptor* other);
  void UnsafeMergeFrom(const ResourceDescriptor& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResourceDescriptor_ResourceState ResourceState;
  static const ResourceState RESOURCE_UNKNOWN =
    ResourceDescriptor_ResourceState_RESOURCE_UNKNOWN;
  static const ResourceState RESOURCE_IDLE =
    ResourceDescriptor_ResourceState_RESOURCE_IDLE;
  static const ResourceState RESOURCE_BUSY =
    ResourceDescriptor_ResourceState_RESOURCE_BUSY;
  static const ResourceState RESOURCE_LOST =
    ResourceDescriptor_ResourceState_RESOURCE_LOST;
  static inline bool ResourceState_IsValid(int value) {
    return ResourceDescriptor_ResourceState_IsValid(value);
  }
  static const ResourceState ResourceState_MIN =
    ResourceDescriptor_ResourceState_ResourceState_MIN;
  static const ResourceState ResourceState_MAX =
    ResourceDescriptor_ResourceState_ResourceState_MAX;
  static const int ResourceState_ARRAYSIZE =
    ResourceDescriptor_ResourceState_ResourceState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResourceState_descriptor() {
    return ResourceDescriptor_ResourceState_descriptor();
  }
  static inline const ::std::string& ResourceState_Name(ResourceState value) {
    return ResourceDescriptor_ResourceState_Name(value);
  }
  static inline bool ResourceState_Parse(const ::std::string& name,
      ResourceState* value) {
    return ResourceDescriptor_ResourceState_Parse(name, value);
  }

  typedef ResourceDescriptor_ResourceType ResourceType;
  static const ResourceType RESOURCE_PU =
    ResourceDescriptor_ResourceType_RESOURCE_PU;
  static const ResourceType RESOURCE_CORE =
    ResourceDescriptor_ResourceType_RESOURCE_CORE;
  static const ResourceType RESOURCE_CACHE =
    ResourceDescriptor_ResourceType_RESOURCE_CACHE;
  static const ResourceType RESOURCE_NIC =
    ResourceDescriptor_ResourceType_RESOURCE_NIC;
  static const ResourceType RESOURCE_DISK =
    ResourceDescriptor_ResourceType_RESOURCE_DISK;
  static const ResourceType RESOURCE_SSD =
    ResourceDescriptor_ResourceType_RESOURCE_SSD;
  static const ResourceType RESOURCE_MACHINE =
    ResourceDescriptor_ResourceType_RESOURCE_MACHINE;
  static const ResourceType RESOURCE_LOGICAL =
    ResourceDescriptor_ResourceType_RESOURCE_LOGICAL;
  static const ResourceType RESOURCE_NUMA_NODE =
    ResourceDescriptor_ResourceType_RESOURCE_NUMA_NODE;
  static const ResourceType RESOURCE_SOCKET =
    ResourceDescriptor_ResourceType_RESOURCE_SOCKET;
  static const ResourceType RESOURCE_COORDINATOR =
    ResourceDescriptor_ResourceType_RESOURCE_COORDINATOR;
  static inline bool ResourceType_IsValid(int value) {
    return ResourceDescriptor_ResourceType_IsValid(value);
  }
  static const ResourceType ResourceType_MIN =
    ResourceDescriptor_ResourceType_ResourceType_MIN;
  static const ResourceType ResourceType_MAX =
    ResourceDescriptor_ResourceType_ResourceType_MAX;
  static const int ResourceType_ARRAYSIZE =
    ResourceDescriptor_ResourceType_ResourceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResourceType_descriptor() {
    return ResourceDescriptor_ResourceType_descriptor();
  }
  static inline const ::std::string& ResourceType_Name(ResourceType value) {
    return ResourceDescriptor_ResourceType_Name(value);
  }
  static inline bool ResourceType_Parse(const ::std::string& name,
      ResourceType* value) {
    return ResourceDescriptor_ResourceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string friendly_name = 2;
  void clear_friendly_name();
  static const int kFriendlyNameFieldNumber = 2;
  const ::std::string& friendly_name() const;
  void set_friendly_name(const ::std::string& value);
  void set_friendly_name(const char* value);
  void set_friendly_name(const char* value, size_t size);
  ::std::string* mutable_friendly_name();
  ::std::string* release_friendly_name();
  void set_allocated_friendly_name(::std::string* friendly_name);

  // optional string descriptive_name = 3;
  void clear_descriptive_name();
  static const int kDescriptiveNameFieldNumber = 3;
  const ::std::string& descriptive_name() const;
  void set_descriptive_name(const ::std::string& value);
  void set_descriptive_name(const char* value);
  void set_descriptive_name(const char* value, size_t size);
  ::std::string* mutable_descriptive_name();
  ::std::string* release_descriptive_name();
  void set_allocated_descriptive_name(::std::string* descriptive_name);

  // optional .firmament.ResourceDescriptor.ResourceState state = 4;
  void clear_state();
  static const int kStateFieldNumber = 4;
  ::firmament::ResourceDescriptor_ResourceState state() const;
  void set_state(::firmament::ResourceDescriptor_ResourceState value);

  // optional uint64 task_capacity = 5;
  void clear_task_capacity();
  static const int kTaskCapacityFieldNumber = 5;
  ::google::protobuf::uint64 task_capacity() const;
  void set_task_capacity(::google::protobuf::uint64 value);

  // optional uint64 last_heartbeat = 6;
  void clear_last_heartbeat();
  static const int kLastHeartbeatFieldNumber = 6;
  ::google::protobuf::uint64 last_heartbeat() const;
  void set_last_heartbeat(::google::protobuf::uint64 value);

  // optional .firmament.ResourceDescriptor.ResourceType type = 7;
  void clear_type();
  static const int kTypeFieldNumber = 7;
  ::firmament::ResourceDescriptor_ResourceType type() const;
  void set_type(::firmament::ResourceDescriptor_ResourceType value);

  // optional bool schedulable = 8;
  void clear_schedulable();
  static const int kSchedulableFieldNumber = 8;
  bool schedulable() const;
  void set_schedulable(bool value);

  // repeated uint64 current_running_tasks = 9;
  int current_running_tasks_size() const;
  void clear_current_running_tasks();
  static const int kCurrentRunningTasksFieldNumber = 9;
  ::google::protobuf::uint64 current_running_tasks(int index) const;
  void set_current_running_tasks(int index, ::google::protobuf::uint64 value);
  void add_current_running_tasks(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      current_running_tasks() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_current_running_tasks();

  // optional uint64 num_running_tasks_below = 10;
  void clear_num_running_tasks_below();
  static const int kNumRunningTasksBelowFieldNumber = 10;
  ::google::protobuf::uint64 num_running_tasks_below() const;
  void set_num_running_tasks_below(::google::protobuf::uint64 value);

  // optional uint64 num_slots_below = 11;
  void clear_num_slots_below();
  static const int kNumSlotsBelowFieldNumber = 11;
  ::google::protobuf::uint64 num_slots_below() const;
  void set_num_slots_below(::google::protobuf::uint64 value);

  // optional .firmament.ResourceVector available_resources = 12;
  bool has_available_resources() const;
  void clear_available_resources();
  static const int kAvailableResourcesFieldNumber = 12;
  const ::firmament::ResourceVector& available_resources() const;
  ::firmament::ResourceVector* mutable_available_resources();
  ::firmament::ResourceVector* release_available_resources();
  void set_allocated_available_resources(::firmament::ResourceVector* available_resources);

  // optional .firmament.ResourceVector reserved_resources = 13;
  bool has_reserved_resources() const;
  void clear_reserved_resources();
  static const int kReservedResourcesFieldNumber = 13;
  const ::firmament::ResourceVector& reserved_resources() const;
  ::firmament::ResourceVector* mutable_reserved_resources();
  ::firmament::ResourceVector* release_reserved_resources();
  void set_allocated_reserved_resources(::firmament::ResourceVector* reserved_resources);

  // optional .firmament.ResourceVector min_available_resources_below = 14;
  bool has_min_available_resources_below() const;
  void clear_min_available_resources_below();
  static const int kMinAvailableResourcesBelowFieldNumber = 14;
  const ::firmament::ResourceVector& min_available_resources_below() const;
  ::firmament::ResourceVector* mutable_min_available_resources_below();
  ::firmament::ResourceVector* release_min_available_resources_below();
  void set_allocated_min_available_resources_below(::firmament::ResourceVector* min_available_resources_below);

  // optional .firmament.ResourceVector max_available_resources_below = 15;
  bool has_max_available_resources_below() const;
  void clear_max_available_resources_below();
  static const int kMaxAvailableResourcesBelowFieldNumber = 15;
  const ::firmament::ResourceVector& max_available_resources_below() const;
  ::firmament::ResourceVector* mutable_max_available_resources_below();
  ::firmament::ResourceVector* release_max_available_resources_below();
  void set_allocated_max_available_resources_below(::firmament::ResourceVector* max_available_resources_below);

  // optional .firmament.ResourceVector min_unreserved_resources_below = 16;
  bool has_min_unreserved_resources_below() const;
  void clear_min_unreserved_resources_below();
  static const int kMinUnreservedResourcesBelowFieldNumber = 16;
  const ::firmament::ResourceVector& min_unreserved_resources_below() const;
  ::firmament::ResourceVector* mutable_min_unreserved_resources_below();
  ::firmament::ResourceVector* release_min_unreserved_resources_below();
  void set_allocated_min_unreserved_resources_below(::firmament::ResourceVector* min_unreserved_resources_below);

  // optional .firmament.ResourceVector max_unreserved_resources_below = 17;
  bool has_max_unreserved_resources_below() const;
  void clear_max_unreserved_resources_below();
  static const int kMaxUnreservedResourcesBelowFieldNumber = 17;
  const ::firmament::ResourceVector& max_unreserved_resources_below() const;
  ::firmament::ResourceVector* mutable_max_unreserved_resources_below();
  ::firmament::ResourceVector* release_max_unreserved_resources_below();
  void set_allocated_max_unreserved_resources_below(::firmament::ResourceVector* max_unreserved_resources_below);

  // optional .firmament.ResourceVector resource_capacity = 18;
  bool has_resource_capacity() const;
  void clear_resource_capacity();
  static const int kResourceCapacityFieldNumber = 18;
  const ::firmament::ResourceVector& resource_capacity() const;
  ::firmament::ResourceVector* mutable_resource_capacity();
  ::firmament::ResourceVector* release_resource_capacity();
  void set_allocated_resource_capacity(::firmament::ResourceVector* resource_capacity);

  // optional .firmament.WhareMapStats whare_map_stats = 19;
  bool has_whare_map_stats() const;
  void clear_whare_map_stats();
  static const int kWhareMapStatsFieldNumber = 19;
  const ::firmament::WhareMapStats& whare_map_stats() const;
  ::firmament::WhareMapStats* mutable_whare_map_stats();
  ::firmament::WhareMapStats* release_whare_map_stats();
  void set_allocated_whare_map_stats(::firmament::WhareMapStats* whare_map_stats);

  // optional .firmament.CoCoInterferenceScores coco_interference_scores = 20;
  bool has_coco_interference_scores() const;
  void clear_coco_interference_scores();
  static const int kCocoInterferenceScoresFieldNumber = 20;
  const ::firmament::CoCoInterferenceScores& coco_interference_scores() const;
  ::firmament::CoCoInterferenceScores* mutable_coco_interference_scores();
  ::firmament::CoCoInterferenceScores* release_coco_interference_scores();
  void set_allocated_coco_interference_scores(::firmament::CoCoInterferenceScores* coco_interference_scores);

  // optional uint64 trace_machine_id = 21;
  void clear_trace_machine_id();
  static const int kTraceMachineIdFieldNumber = 21;
  ::google::protobuf::uint64 trace_machine_id() const;
  void set_trace_machine_id(::google::protobuf::uint64 value);

  // repeated .firmament.Label labels = 32;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 32;
  const ::firmament::Label& labels(int index) const;
  ::firmament::Label* mutable_labels(int index);
  ::firmament::Label* add_labels();
  ::google::protobuf::RepeatedPtrField< ::firmament::Label >*
      mutable_labels();
  const ::google::protobuf::RepeatedPtrField< ::firmament::Label >&
      labels() const;

  // @@protoc_insertion_point(class_scope:firmament.ResourceDescriptor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > current_running_tasks_;
  mutable int _current_running_tasks_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::firmament::Label > labels_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr friendly_name_;
  ::google::protobuf::internal::ArenaStringPtr descriptive_name_;
  ::firmament::ResourceVector* available_resources_;
  ::firmament::ResourceVector* reserved_resources_;
  ::firmament::ResourceVector* min_available_resources_below_;
  ::firmament::ResourceVector* max_available_resources_below_;
  ::firmament::ResourceVector* min_unreserved_resources_below_;
  ::firmament::ResourceVector* max_unreserved_resources_below_;
  ::firmament::ResourceVector* resource_capacity_;
  ::firmament::WhareMapStats* whare_map_stats_;
  ::firmament::CoCoInterferenceScores* coco_interference_scores_;
  ::google::protobuf::uint64 task_capacity_;
  int state_;
  int type_;
  ::google::protobuf::uint64 last_heartbeat_;
  ::google::protobuf::uint64 num_running_tasks_below_;
  ::google::protobuf::uint64 num_slots_below_;
  ::google::protobuf::uint64 trace_machine_id_;
  bool schedulable_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_base_2fresource_5fdesc_2eproto_impl();
  friend void  protobuf_AddDesc_base_2fresource_5fdesc_2eproto_impl();
  friend void protobuf_AssignDesc_base_2fresource_5fdesc_2eproto();
  friend void protobuf_ShutdownFile_base_2fresource_5fdesc_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ResourceDescriptor> ResourceDescriptor_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceDescriptor

// optional string uuid = 1;
inline void ResourceDescriptor::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceDescriptor::uuid() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceDescriptor::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.uuid)
}
inline void ResourceDescriptor::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.ResourceDescriptor.uuid)
}
inline void ResourceDescriptor::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.ResourceDescriptor.uuid)
}
inline ::std::string* ResourceDescriptor::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceDescriptor::release_uuid() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceDescriptor::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.uuid)
}

// optional string friendly_name = 2;
inline void ResourceDescriptor::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceDescriptor::friendly_name() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.friendly_name)
  return friendly_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceDescriptor::set_friendly_name(const ::std::string& value) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.friendly_name)
}
inline void ResourceDescriptor::set_friendly_name(const char* value) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.ResourceDescriptor.friendly_name)
}
inline void ResourceDescriptor::set_friendly_name(const char* value, size_t size) {
  
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.ResourceDescriptor.friendly_name)
}
inline ::std::string* ResourceDescriptor::mutable_friendly_name() {
  
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceDescriptor::release_friendly_name() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.friendly_name)
  
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceDescriptor::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != NULL) {
    
  } else {
    
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.friendly_name)
}

// optional string descriptive_name = 3;
inline void ResourceDescriptor::clear_descriptive_name() {
  descriptive_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceDescriptor::descriptive_name() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.descriptive_name)
  return descriptive_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceDescriptor::set_descriptive_name(const ::std::string& value) {
  
  descriptive_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.descriptive_name)
}
inline void ResourceDescriptor::set_descriptive_name(const char* value) {
  
  descriptive_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.ResourceDescriptor.descriptive_name)
}
inline void ResourceDescriptor::set_descriptive_name(const char* value, size_t size) {
  
  descriptive_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.ResourceDescriptor.descriptive_name)
}
inline ::std::string* ResourceDescriptor::mutable_descriptive_name() {
  
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.descriptive_name)
  return descriptive_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceDescriptor::release_descriptive_name() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.descriptive_name)
  
  return descriptive_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceDescriptor::set_allocated_descriptive_name(::std::string* descriptive_name) {
  if (descriptive_name != NULL) {
    
  } else {
    
  }
  descriptive_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), descriptive_name);
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.descriptive_name)
}

// optional .firmament.ResourceDescriptor.ResourceState state = 4;
inline void ResourceDescriptor::clear_state() {
  state_ = 0;
}
inline ::firmament::ResourceDescriptor_ResourceState ResourceDescriptor::state() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.state)
  return static_cast< ::firmament::ResourceDescriptor_ResourceState >(state_);
}
inline void ResourceDescriptor::set_state(::firmament::ResourceDescriptor_ResourceState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.state)
}

// optional uint64 task_capacity = 5;
inline void ResourceDescriptor::clear_task_capacity() {
  task_capacity_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResourceDescriptor::task_capacity() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.task_capacity)
  return task_capacity_;
}
inline void ResourceDescriptor::set_task_capacity(::google::protobuf::uint64 value) {
  
  task_capacity_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.task_capacity)
}

// optional uint64 last_heartbeat = 6;
inline void ResourceDescriptor::clear_last_heartbeat() {
  last_heartbeat_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResourceDescriptor::last_heartbeat() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.last_heartbeat)
  return last_heartbeat_;
}
inline void ResourceDescriptor::set_last_heartbeat(::google::protobuf::uint64 value) {
  
  last_heartbeat_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.last_heartbeat)
}

// optional .firmament.ResourceDescriptor.ResourceType type = 7;
inline void ResourceDescriptor::clear_type() {
  type_ = 0;
}
inline ::firmament::ResourceDescriptor_ResourceType ResourceDescriptor::type() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.type)
  return static_cast< ::firmament::ResourceDescriptor_ResourceType >(type_);
}
inline void ResourceDescriptor::set_type(::firmament::ResourceDescriptor_ResourceType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.type)
}

// optional bool schedulable = 8;
inline void ResourceDescriptor::clear_schedulable() {
  schedulable_ = false;
}
inline bool ResourceDescriptor::schedulable() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.schedulable)
  return schedulable_;
}
inline void ResourceDescriptor::set_schedulable(bool value) {
  
  schedulable_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.schedulable)
}

// repeated uint64 current_running_tasks = 9;
inline int ResourceDescriptor::current_running_tasks_size() const {
  return current_running_tasks_.size();
}
inline void ResourceDescriptor::clear_current_running_tasks() {
  current_running_tasks_.Clear();
}
inline ::google::protobuf::uint64 ResourceDescriptor::current_running_tasks(int index) const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.current_running_tasks)
  return current_running_tasks_.Get(index);
}
inline void ResourceDescriptor::set_current_running_tasks(int index, ::google::protobuf::uint64 value) {
  current_running_tasks_.Set(index, value);
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.current_running_tasks)
}
inline void ResourceDescriptor::add_current_running_tasks(::google::protobuf::uint64 value) {
  current_running_tasks_.Add(value);
  // @@protoc_insertion_point(field_add:firmament.ResourceDescriptor.current_running_tasks)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ResourceDescriptor::current_running_tasks() const {
  // @@protoc_insertion_point(field_list:firmament.ResourceDescriptor.current_running_tasks)
  return current_running_tasks_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ResourceDescriptor::mutable_current_running_tasks() {
  // @@protoc_insertion_point(field_mutable_list:firmament.ResourceDescriptor.current_running_tasks)
  return &current_running_tasks_;
}

// optional uint64 num_running_tasks_below = 10;
inline void ResourceDescriptor::clear_num_running_tasks_below() {
  num_running_tasks_below_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResourceDescriptor::num_running_tasks_below() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.num_running_tasks_below)
  return num_running_tasks_below_;
}
inline void ResourceDescriptor::set_num_running_tasks_below(::google::protobuf::uint64 value) {
  
  num_running_tasks_below_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.num_running_tasks_below)
}

// optional uint64 num_slots_below = 11;
inline void ResourceDescriptor::clear_num_slots_below() {
  num_slots_below_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResourceDescriptor::num_slots_below() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.num_slots_below)
  return num_slots_below_;
}
inline void ResourceDescriptor::set_num_slots_below(::google::protobuf::uint64 value) {
  
  num_slots_below_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.num_slots_below)
}

// optional .firmament.ResourceVector available_resources = 12;
inline bool ResourceDescriptor::has_available_resources() const {
  return this != internal_default_instance() && available_resources_ != NULL;
}
inline void ResourceDescriptor::clear_available_resources() {
  if (GetArenaNoVirtual() == NULL && available_resources_ != NULL) delete available_resources_;
  available_resources_ = NULL;
}
inline const ::firmament::ResourceVector& ResourceDescriptor::available_resources() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.available_resources)
  return available_resources_ != NULL ? *available_resources_
                         : *::firmament::ResourceVector::internal_default_instance();
}
inline ::firmament::ResourceVector* ResourceDescriptor::mutable_available_resources() {
  
  if (available_resources_ == NULL) {
    available_resources_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.available_resources)
  return available_resources_;
}
inline ::firmament::ResourceVector* ResourceDescriptor::release_available_resources() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.available_resources)
  
  ::firmament::ResourceVector* temp = available_resources_;
  available_resources_ = NULL;
  return temp;
}
inline void ResourceDescriptor::set_allocated_available_resources(::firmament::ResourceVector* available_resources) {
  delete available_resources_;
  available_resources_ = available_resources;
  if (available_resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.available_resources)
}

// optional .firmament.ResourceVector reserved_resources = 13;
inline bool ResourceDescriptor::has_reserved_resources() const {
  return this != internal_default_instance() && reserved_resources_ != NULL;
}
inline void ResourceDescriptor::clear_reserved_resources() {
  if (GetArenaNoVirtual() == NULL && reserved_resources_ != NULL) delete reserved_resources_;
  reserved_resources_ = NULL;
}
inline const ::firmament::ResourceVector& ResourceDescriptor::reserved_resources() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.reserved_resources)
  return reserved_resources_ != NULL ? *reserved_resources_
                         : *::firmament::ResourceVector::internal_default_instance();
}
inline ::firmament::ResourceVector* ResourceDescriptor::mutable_reserved_resources() {
  
  if (reserved_resources_ == NULL) {
    reserved_resources_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.reserved_resources)
  return reserved_resources_;
}
inline ::firmament::ResourceVector* ResourceDescriptor::release_reserved_resources() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.reserved_resources)
  
  ::firmament::ResourceVector* temp = reserved_resources_;
  reserved_resources_ = NULL;
  return temp;
}
inline void ResourceDescriptor::set_allocated_reserved_resources(::firmament::ResourceVector* reserved_resources) {
  delete reserved_resources_;
  reserved_resources_ = reserved_resources;
  if (reserved_resources) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.reserved_resources)
}

// optional .firmament.ResourceVector min_available_resources_below = 14;
inline bool ResourceDescriptor::has_min_available_resources_below() const {
  return this != internal_default_instance() && min_available_resources_below_ != NULL;
}
inline void ResourceDescriptor::clear_min_available_resources_below() {
  if (GetArenaNoVirtual() == NULL && min_available_resources_below_ != NULL) delete min_available_resources_below_;
  min_available_resources_below_ = NULL;
}
inline const ::firmament::ResourceVector& ResourceDescriptor::min_available_resources_below() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.min_available_resources_below)
  return min_available_resources_below_ != NULL ? *min_available_resources_below_
                         : *::firmament::ResourceVector::internal_default_instance();
}
inline ::firmament::ResourceVector* ResourceDescriptor::mutable_min_available_resources_below() {
  
  if (min_available_resources_below_ == NULL) {
    min_available_resources_below_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.min_available_resources_below)
  return min_available_resources_below_;
}
inline ::firmament::ResourceVector* ResourceDescriptor::release_min_available_resources_below() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.min_available_resources_below)
  
  ::firmament::ResourceVector* temp = min_available_resources_below_;
  min_available_resources_below_ = NULL;
  return temp;
}
inline void ResourceDescriptor::set_allocated_min_available_resources_below(::firmament::ResourceVector* min_available_resources_below) {
  delete min_available_resources_below_;
  min_available_resources_below_ = min_available_resources_below;
  if (min_available_resources_below) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.min_available_resources_below)
}

// optional .firmament.ResourceVector max_available_resources_below = 15;
inline bool ResourceDescriptor::has_max_available_resources_below() const {
  return this != internal_default_instance() && max_available_resources_below_ != NULL;
}
inline void ResourceDescriptor::clear_max_available_resources_below() {
  if (GetArenaNoVirtual() == NULL && max_available_resources_below_ != NULL) delete max_available_resources_below_;
  max_available_resources_below_ = NULL;
}
inline const ::firmament::ResourceVector& ResourceDescriptor::max_available_resources_below() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.max_available_resources_below)
  return max_available_resources_below_ != NULL ? *max_available_resources_below_
                         : *::firmament::ResourceVector::internal_default_instance();
}
inline ::firmament::ResourceVector* ResourceDescriptor::mutable_max_available_resources_below() {
  
  if (max_available_resources_below_ == NULL) {
    max_available_resources_below_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.max_available_resources_below)
  return max_available_resources_below_;
}
inline ::firmament::ResourceVector* ResourceDescriptor::release_max_available_resources_below() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.max_available_resources_below)
  
  ::firmament::ResourceVector* temp = max_available_resources_below_;
  max_available_resources_below_ = NULL;
  return temp;
}
inline void ResourceDescriptor::set_allocated_max_available_resources_below(::firmament::ResourceVector* max_available_resources_below) {
  delete max_available_resources_below_;
  max_available_resources_below_ = max_available_resources_below;
  if (max_available_resources_below) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.max_available_resources_below)
}

// optional .firmament.ResourceVector min_unreserved_resources_below = 16;
inline bool ResourceDescriptor::has_min_unreserved_resources_below() const {
  return this != internal_default_instance() && min_unreserved_resources_below_ != NULL;
}
inline void ResourceDescriptor::clear_min_unreserved_resources_below() {
  if (GetArenaNoVirtual() == NULL && min_unreserved_resources_below_ != NULL) delete min_unreserved_resources_below_;
  min_unreserved_resources_below_ = NULL;
}
inline const ::firmament::ResourceVector& ResourceDescriptor::min_unreserved_resources_below() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.min_unreserved_resources_below)
  return min_unreserved_resources_below_ != NULL ? *min_unreserved_resources_below_
                         : *::firmament::ResourceVector::internal_default_instance();
}
inline ::firmament::ResourceVector* ResourceDescriptor::mutable_min_unreserved_resources_below() {
  
  if (min_unreserved_resources_below_ == NULL) {
    min_unreserved_resources_below_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.min_unreserved_resources_below)
  return min_unreserved_resources_below_;
}
inline ::firmament::ResourceVector* ResourceDescriptor::release_min_unreserved_resources_below() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.min_unreserved_resources_below)
  
  ::firmament::ResourceVector* temp = min_unreserved_resources_below_;
  min_unreserved_resources_below_ = NULL;
  return temp;
}
inline void ResourceDescriptor::set_allocated_min_unreserved_resources_below(::firmament::ResourceVector* min_unreserved_resources_below) {
  delete min_unreserved_resources_below_;
  min_unreserved_resources_below_ = min_unreserved_resources_below;
  if (min_unreserved_resources_below) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.min_unreserved_resources_below)
}

// optional .firmament.ResourceVector max_unreserved_resources_below = 17;
inline bool ResourceDescriptor::has_max_unreserved_resources_below() const {
  return this != internal_default_instance() && max_unreserved_resources_below_ != NULL;
}
inline void ResourceDescriptor::clear_max_unreserved_resources_below() {
  if (GetArenaNoVirtual() == NULL && max_unreserved_resources_below_ != NULL) delete max_unreserved_resources_below_;
  max_unreserved_resources_below_ = NULL;
}
inline const ::firmament::ResourceVector& ResourceDescriptor::max_unreserved_resources_below() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.max_unreserved_resources_below)
  return max_unreserved_resources_below_ != NULL ? *max_unreserved_resources_below_
                         : *::firmament::ResourceVector::internal_default_instance();
}
inline ::firmament::ResourceVector* ResourceDescriptor::mutable_max_unreserved_resources_below() {
  
  if (max_unreserved_resources_below_ == NULL) {
    max_unreserved_resources_below_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.max_unreserved_resources_below)
  return max_unreserved_resources_below_;
}
inline ::firmament::ResourceVector* ResourceDescriptor::release_max_unreserved_resources_below() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.max_unreserved_resources_below)
  
  ::firmament::ResourceVector* temp = max_unreserved_resources_below_;
  max_unreserved_resources_below_ = NULL;
  return temp;
}
inline void ResourceDescriptor::set_allocated_max_unreserved_resources_below(::firmament::ResourceVector* max_unreserved_resources_below) {
  delete max_unreserved_resources_below_;
  max_unreserved_resources_below_ = max_unreserved_resources_below;
  if (max_unreserved_resources_below) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.max_unreserved_resources_below)
}

// optional .firmament.ResourceVector resource_capacity = 18;
inline bool ResourceDescriptor::has_resource_capacity() const {
  return this != internal_default_instance() && resource_capacity_ != NULL;
}
inline void ResourceDescriptor::clear_resource_capacity() {
  if (GetArenaNoVirtual() == NULL && resource_capacity_ != NULL) delete resource_capacity_;
  resource_capacity_ = NULL;
}
inline const ::firmament::ResourceVector& ResourceDescriptor::resource_capacity() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.resource_capacity)
  return resource_capacity_ != NULL ? *resource_capacity_
                         : *::firmament::ResourceVector::internal_default_instance();
}
inline ::firmament::ResourceVector* ResourceDescriptor::mutable_resource_capacity() {
  
  if (resource_capacity_ == NULL) {
    resource_capacity_ = new ::firmament::ResourceVector;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.resource_capacity)
  return resource_capacity_;
}
inline ::firmament::ResourceVector* ResourceDescriptor::release_resource_capacity() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.resource_capacity)
  
  ::firmament::ResourceVector* temp = resource_capacity_;
  resource_capacity_ = NULL;
  return temp;
}
inline void ResourceDescriptor::set_allocated_resource_capacity(::firmament::ResourceVector* resource_capacity) {
  delete resource_capacity_;
  resource_capacity_ = resource_capacity;
  if (resource_capacity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.resource_capacity)
}

// optional .firmament.WhareMapStats whare_map_stats = 19;
inline bool ResourceDescriptor::has_whare_map_stats() const {
  return this != internal_default_instance() && whare_map_stats_ != NULL;
}
inline void ResourceDescriptor::clear_whare_map_stats() {
  if (GetArenaNoVirtual() == NULL && whare_map_stats_ != NULL) delete whare_map_stats_;
  whare_map_stats_ = NULL;
}
inline const ::firmament::WhareMapStats& ResourceDescriptor::whare_map_stats() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.whare_map_stats)
  return whare_map_stats_ != NULL ? *whare_map_stats_
                         : *::firmament::WhareMapStats::internal_default_instance();
}
inline ::firmament::WhareMapStats* ResourceDescriptor::mutable_whare_map_stats() {
  
  if (whare_map_stats_ == NULL) {
    whare_map_stats_ = new ::firmament::WhareMapStats;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.whare_map_stats)
  return whare_map_stats_;
}
inline ::firmament::WhareMapStats* ResourceDescriptor::release_whare_map_stats() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.whare_map_stats)
  
  ::firmament::WhareMapStats* temp = whare_map_stats_;
  whare_map_stats_ = NULL;
  return temp;
}
inline void ResourceDescriptor::set_allocated_whare_map_stats(::firmament::WhareMapStats* whare_map_stats) {
  delete whare_map_stats_;
  whare_map_stats_ = whare_map_stats;
  if (whare_map_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.whare_map_stats)
}

// optional .firmament.CoCoInterferenceScores coco_interference_scores = 20;
inline bool ResourceDescriptor::has_coco_interference_scores() const {
  return this != internal_default_instance() && coco_interference_scores_ != NULL;
}
inline void ResourceDescriptor::clear_coco_interference_scores() {
  if (GetArenaNoVirtual() == NULL && coco_interference_scores_ != NULL) delete coco_interference_scores_;
  coco_interference_scores_ = NULL;
}
inline const ::firmament::CoCoInterferenceScores& ResourceDescriptor::coco_interference_scores() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.coco_interference_scores)
  return coco_interference_scores_ != NULL ? *coco_interference_scores_
                         : *::firmament::CoCoInterferenceScores::internal_default_instance();
}
inline ::firmament::CoCoInterferenceScores* ResourceDescriptor::mutable_coco_interference_scores() {
  
  if (coco_interference_scores_ == NULL) {
    coco_interference_scores_ = new ::firmament::CoCoInterferenceScores;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.coco_interference_scores)
  return coco_interference_scores_;
}
inline ::firmament::CoCoInterferenceScores* ResourceDescriptor::release_coco_interference_scores() {
  // @@protoc_insertion_point(field_release:firmament.ResourceDescriptor.coco_interference_scores)
  
  ::firmament::CoCoInterferenceScores* temp = coco_interference_scores_;
  coco_interference_scores_ = NULL;
  return temp;
}
inline void ResourceDescriptor::set_allocated_coco_interference_scores(::firmament::CoCoInterferenceScores* coco_interference_scores) {
  delete coco_interference_scores_;
  coco_interference_scores_ = coco_interference_scores;
  if (coco_interference_scores) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceDescriptor.coco_interference_scores)
}

// optional uint64 trace_machine_id = 21;
inline void ResourceDescriptor::clear_trace_machine_id() {
  trace_machine_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ResourceDescriptor::trace_machine_id() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.trace_machine_id)
  return trace_machine_id_;
}
inline void ResourceDescriptor::set_trace_machine_id(::google::protobuf::uint64 value) {
  
  trace_machine_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.ResourceDescriptor.trace_machine_id)
}

// repeated .firmament.Label labels = 32;
inline int ResourceDescriptor::labels_size() const {
  return labels_.size();
}
inline void ResourceDescriptor::clear_labels() {
  labels_.Clear();
}
inline const ::firmament::Label& ResourceDescriptor::labels(int index) const {
  // @@protoc_insertion_point(field_get:firmament.ResourceDescriptor.labels)
  return labels_.Get(index);
}
inline ::firmament::Label* ResourceDescriptor::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.ResourceDescriptor.labels)
  return labels_.Mutable(index);
}
inline ::firmament::Label* ResourceDescriptor::add_labels() {
  // @@protoc_insertion_point(field_add:firmament.ResourceDescriptor.labels)
  return labels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::firmament::Label >*
ResourceDescriptor::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:firmament.ResourceDescriptor.labels)
  return &labels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::firmament::Label >&
ResourceDescriptor::labels() const {
  // @@protoc_insertion_point(field_list:firmament.ResourceDescriptor.labels)
  return labels_;
}

inline const ResourceDescriptor* ResourceDescriptor::internal_default_instance() {
  return &ResourceDescriptor_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::firmament::ResourceDescriptor_ResourceState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firmament::ResourceDescriptor_ResourceState>() {
  return ::firmament::ResourceDescriptor_ResourceState_descriptor();
}
template <> struct is_proto_enum< ::firmament::ResourceDescriptor_ResourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firmament::ResourceDescriptor_ResourceType>() {
  return ::firmament::ResourceDescriptor_ResourceType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2fresource_5fdesc_2eproto__INCLUDED
