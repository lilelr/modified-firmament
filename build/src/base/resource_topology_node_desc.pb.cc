// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/resource_topology_node_desc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/resource_topology_node_desc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* ResourceTopologyNodeDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceTopologyNodeDescriptor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto() {
  protobuf_AddDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/resource_topology_node_desc.proto");
  GOOGLE_CHECK(file != NULL);
  ResourceTopologyNodeDescriptor_descriptor_ = file->message_type(0);
  static const int ResourceTopologyNodeDescriptor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTopologyNodeDescriptor, resource_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTopologyNodeDescriptor, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTopologyNodeDescriptor, parent_id_),
  };
  ResourceTopologyNodeDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceTopologyNodeDescriptor_descriptor_,
      ResourceTopologyNodeDescriptor::internal_default_instance(),
      ResourceTopologyNodeDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResourceTopologyNodeDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceTopologyNodeDescriptor, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceTopologyNodeDescriptor_descriptor_, ResourceTopologyNodeDescriptor::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2fresource_5ftopology_5fnode_5fdesc_2eproto() {
  ResourceTopologyNodeDescriptor_default_instance_.Shutdown();
  delete ResourceTopologyNodeDescriptor_reflection_;
}

void protobuf_InitDefaults_base_2fresource_5ftopology_5fnode_5fdesc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::firmament::protobuf_InitDefaults_base_2fresource_5fdesc_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  ResourceTopologyNodeDescriptor_default_instance_.DefaultConstruct();
  ResourceTopologyNodeDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_base_2fresource_5ftopology_5fnode_5fdesc_2eproto_once_);
void protobuf_InitDefaults_base_2fresource_5ftopology_5fnode_5fdesc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_base_2fresource_5ftopology_5fnode_5fdesc_2eproto_once_,
                 &protobuf_InitDefaults_base_2fresource_5ftopology_5fnode_5fdesc_2eproto_impl);
}
void protobuf_AddDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_base_2fresource_5ftopology_5fnode_5fdesc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n&base/resource_topology_node_desc.proto"
    "\022\tfirmament\032\030base/resource_desc.proto\"\246\001"
    "\n\036ResourceTopologyNodeDescriptor\0224\n\rreso"
    "urce_desc\030\001 \001(\0132\035.firmament.ResourceDesc"
    "riptor\022;\n\010children\030\002 \003(\0132).firmament.Res"
    "ourceTopologyNodeDescriptor\022\021\n\tparent_id"
    "\030\003 \001(\tb\006proto3", 254);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/resource_topology_node_desc.proto", &protobuf_RegisterTypes);
  ::firmament::protobuf_AddDesc_base_2fresource_5fdesc_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2fresource_5ftopology_5fnode_5fdesc_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto_once_);
void protobuf_AddDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto_once_,
                 &protobuf_AddDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2fresource_5ftopology_5fnode_5fdesc_2eproto {
  StaticDescriptorInitializer_base_2fresource_5ftopology_5fnode_5fdesc_2eproto() {
    protobuf_AddDesc_base_2fresource_5ftopology_5fnode_5fdesc_2eproto();
  }
} static_descriptor_initializer_base_2fresource_5ftopology_5fnode_5fdesc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceTopologyNodeDescriptor::kResourceDescFieldNumber;
const int ResourceTopologyNodeDescriptor::kChildrenFieldNumber;
const int ResourceTopologyNodeDescriptor::kParentIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceTopologyNodeDescriptor::ResourceTopologyNodeDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_base_2fresource_5ftopology_5fnode_5fdesc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.ResourceTopologyNodeDescriptor)
}

void ResourceTopologyNodeDescriptor::InitAsDefaultInstance() {
  resource_desc_ = const_cast< ::firmament::ResourceDescriptor*>(
      ::firmament::ResourceDescriptor::internal_default_instance());
}

ResourceTopologyNodeDescriptor::ResourceTopologyNodeDescriptor(const ResourceTopologyNodeDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.ResourceTopologyNodeDescriptor)
}

void ResourceTopologyNodeDescriptor::SharedCtor() {
  parent_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resource_desc_ = NULL;
  _cached_size_ = 0;
}

ResourceTopologyNodeDescriptor::~ResourceTopologyNodeDescriptor() {
  // @@protoc_insertion_point(destructor:firmament.ResourceTopologyNodeDescriptor)
  SharedDtor();
}

void ResourceTopologyNodeDescriptor::SharedDtor() {
  parent_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &ResourceTopologyNodeDescriptor_default_instance_.get()) {
    delete resource_desc_;
  }
}

void ResourceTopologyNodeDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceTopologyNodeDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceTopologyNodeDescriptor_descriptor_;
}

const ResourceTopologyNodeDescriptor& ResourceTopologyNodeDescriptor::default_instance() {
  protobuf_InitDefaults_base_2fresource_5ftopology_5fnode_5fdesc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ResourceTopologyNodeDescriptor> ResourceTopologyNodeDescriptor_default_instance_;

ResourceTopologyNodeDescriptor* ResourceTopologyNodeDescriptor::New(::google::protobuf::Arena* arena) const {
  ResourceTopologyNodeDescriptor* n = new ResourceTopologyNodeDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceTopologyNodeDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.ResourceTopologyNodeDescriptor)
  if (GetArenaNoVirtual() == NULL && resource_desc_ != NULL) delete resource_desc_;
  resource_desc_ = NULL;
  parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  children_.Clear();
}

bool ResourceTopologyNodeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.ResourceTopologyNodeDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .firmament.ResourceDescriptor resource_desc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_children;
        break;
      }

      // repeated .firmament.ResourceTopologyNodeDescriptor children = 2;
      case 2: {
        if (tag == 18) {
         parse_children:
          DO_(input->IncrementRecursionDepth());
         parse_loop_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_children;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_parent_id;
        break;
      }

      // optional string parent_id = 3;
      case 3: {
        if (tag == 26) {
         parse_parent_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent_id().data(), this->parent_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.ResourceTopologyNodeDescriptor.parent_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.ResourceTopologyNodeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.ResourceTopologyNodeDescriptor)
  return false;
#undef DO_
}

void ResourceTopologyNodeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.ResourceTopologyNodeDescriptor)
  // optional .firmament.ResourceDescriptor resource_desc = 1;
  if (this->has_resource_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->resource_desc_, output);
  }

  // repeated .firmament.ResourceTopologyNodeDescriptor children = 2;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->children(i), output);
  }

  // optional string parent_id = 3;
  if (this->parent_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_id().data(), this->parent_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.ResourceTopologyNodeDescriptor.parent_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parent_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.ResourceTopologyNodeDescriptor)
}

::google::protobuf::uint8* ResourceTopologyNodeDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.ResourceTopologyNodeDescriptor)
  // optional .firmament.ResourceDescriptor resource_desc = 1;
  if (this->has_resource_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->resource_desc_, false, target);
  }

  // repeated .firmament.ResourceTopologyNodeDescriptor children = 2;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->children(i), false, target);
  }

  // optional string parent_id = 3;
  if (this->parent_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_id().data(), this->parent_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.ResourceTopologyNodeDescriptor.parent_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parent_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.ResourceTopologyNodeDescriptor)
  return target;
}

size_t ResourceTopologyNodeDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.ResourceTopologyNodeDescriptor)
  size_t total_size = 0;

  // optional .firmament.ResourceDescriptor resource_desc = 1;
  if (this->has_resource_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->resource_desc_);
  }

  // optional string parent_id = 3;
  if (this->parent_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent_id());
  }

  // repeated .firmament.ResourceTopologyNodeDescriptor children = 2;
  {
    unsigned int count = this->children_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->children(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceTopologyNodeDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.ResourceTopologyNodeDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResourceTopologyNodeDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceTopologyNodeDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.ResourceTopologyNodeDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.ResourceTopologyNodeDescriptor)
    UnsafeMergeFrom(*source);
  }
}

void ResourceTopologyNodeDescriptor::MergeFrom(const ResourceTopologyNodeDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.ResourceTopologyNodeDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ResourceTopologyNodeDescriptor::UnsafeMergeFrom(const ResourceTopologyNodeDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  children_.MergeFrom(from.children_);
  if (from.has_resource_desc()) {
    mutable_resource_desc()->::firmament::ResourceDescriptor::MergeFrom(from.resource_desc());
  }
  if (from.parent_id().size() > 0) {

    parent_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_id_);
  }
}

void ResourceTopologyNodeDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.ResourceTopologyNodeDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceTopologyNodeDescriptor::CopyFrom(const ResourceTopologyNodeDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.ResourceTopologyNodeDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ResourceTopologyNodeDescriptor::IsInitialized() const {

  return true;
}

void ResourceTopologyNodeDescriptor::Swap(ResourceTopologyNodeDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceTopologyNodeDescriptor::InternalSwap(ResourceTopologyNodeDescriptor* other) {
  std::swap(resource_desc_, other->resource_desc_);
  children_.UnsafeArenaSwap(&other->children_);
  parent_id_.Swap(&other->parent_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceTopologyNodeDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceTopologyNodeDescriptor_descriptor_;
  metadata.reflection = ResourceTopologyNodeDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceTopologyNodeDescriptor

// optional .firmament.ResourceDescriptor resource_desc = 1;
bool ResourceTopologyNodeDescriptor::has_resource_desc() const {
  return this != internal_default_instance() && resource_desc_ != NULL;
}
void ResourceTopologyNodeDescriptor::clear_resource_desc() {
  if (GetArenaNoVirtual() == NULL && resource_desc_ != NULL) delete resource_desc_;
  resource_desc_ = NULL;
}
const ::firmament::ResourceDescriptor& ResourceTopologyNodeDescriptor::resource_desc() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceTopologyNodeDescriptor.resource_desc)
  return resource_desc_ != NULL ? *resource_desc_
                         : *::firmament::ResourceDescriptor::internal_default_instance();
}
::firmament::ResourceDescriptor* ResourceTopologyNodeDescriptor::mutable_resource_desc() {
  
  if (resource_desc_ == NULL) {
    resource_desc_ = new ::firmament::ResourceDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:firmament.ResourceTopologyNodeDescriptor.resource_desc)
  return resource_desc_;
}
::firmament::ResourceDescriptor* ResourceTopologyNodeDescriptor::release_resource_desc() {
  // @@protoc_insertion_point(field_release:firmament.ResourceTopologyNodeDescriptor.resource_desc)
  
  ::firmament::ResourceDescriptor* temp = resource_desc_;
  resource_desc_ = NULL;
  return temp;
}
void ResourceTopologyNodeDescriptor::set_allocated_resource_desc(::firmament::ResourceDescriptor* resource_desc) {
  delete resource_desc_;
  resource_desc_ = resource_desc;
  if (resource_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceTopologyNodeDescriptor.resource_desc)
}

// repeated .firmament.ResourceTopologyNodeDescriptor children = 2;
int ResourceTopologyNodeDescriptor::children_size() const {
  return children_.size();
}
void ResourceTopologyNodeDescriptor::clear_children() {
  children_.Clear();
}
const ::firmament::ResourceTopologyNodeDescriptor& ResourceTopologyNodeDescriptor::children(int index) const {
  // @@protoc_insertion_point(field_get:firmament.ResourceTopologyNodeDescriptor.children)
  return children_.Get(index);
}
::firmament::ResourceTopologyNodeDescriptor* ResourceTopologyNodeDescriptor::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.ResourceTopologyNodeDescriptor.children)
  return children_.Mutable(index);
}
::firmament::ResourceTopologyNodeDescriptor* ResourceTopologyNodeDescriptor::add_children() {
  // @@protoc_insertion_point(field_add:firmament.ResourceTopologyNodeDescriptor.children)
  return children_.Add();
}
::google::protobuf::RepeatedPtrField< ::firmament::ResourceTopologyNodeDescriptor >*
ResourceTopologyNodeDescriptor::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:firmament.ResourceTopologyNodeDescriptor.children)
  return &children_;
}
const ::google::protobuf::RepeatedPtrField< ::firmament::ResourceTopologyNodeDescriptor >&
ResourceTopologyNodeDescriptor::children() const {
  // @@protoc_insertion_point(field_list:firmament.ResourceTopologyNodeDescriptor.children)
  return children_;
}

// optional string parent_id = 3;
void ResourceTopologyNodeDescriptor::clear_parent_id() {
  parent_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ResourceTopologyNodeDescriptor::parent_id() const {
  // @@protoc_insertion_point(field_get:firmament.ResourceTopologyNodeDescriptor.parent_id)
  return parent_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResourceTopologyNodeDescriptor::set_parent_id(const ::std::string& value) {
  
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.ResourceTopologyNodeDescriptor.parent_id)
}
void ResourceTopologyNodeDescriptor::set_parent_id(const char* value) {
  
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.ResourceTopologyNodeDescriptor.parent_id)
}
void ResourceTopologyNodeDescriptor::set_parent_id(const char* value, size_t size) {
  
  parent_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.ResourceTopologyNodeDescriptor.parent_id)
}
::std::string* ResourceTopologyNodeDescriptor::mutable_parent_id() {
  
  // @@protoc_insertion_point(field_mutable:firmament.ResourceTopologyNodeDescriptor.parent_id)
  return parent_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResourceTopologyNodeDescriptor::release_parent_id() {
  // @@protoc_insertion_point(field_release:firmament.ResourceTopologyNodeDescriptor.parent_id)
  
  return parent_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResourceTopologyNodeDescriptor::set_allocated_parent_id(::std::string* parent_id) {
  if (parent_id != NULL) {
    
  } else {
    
  }
  parent_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_id);
  // @@protoc_insertion_point(field_set_allocated:firmament.ResourceTopologyNodeDescriptor.parent_id)
}

inline const ResourceTopologyNodeDescriptor* ResourceTopologyNodeDescriptor::internal_default_instance() {
  return &ResourceTopologyNodeDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
