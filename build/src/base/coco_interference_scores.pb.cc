// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/coco_interference_scores.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/coco_interference_scores.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* CoCoInterferenceScores_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CoCoInterferenceScores_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2fcoco_5finterference_5fscores_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_base_2fcoco_5finterference_5fscores_2eproto() {
  protobuf_AddDesc_base_2fcoco_5finterference_5fscores_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/coco_interference_scores.proto");
  GOOGLE_CHECK(file != NULL);
  CoCoInterferenceScores_descriptor_ = file->message_type(0);
  static const int CoCoInterferenceScores_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoCoInterferenceScores, devil_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoCoInterferenceScores, rabbit_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoCoInterferenceScores, sheep_penalty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoCoInterferenceScores, turtle_penalty_),
  };
  CoCoInterferenceScores_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CoCoInterferenceScores_descriptor_,
      CoCoInterferenceScores::internal_default_instance(),
      CoCoInterferenceScores_offsets_,
      -1,
      -1,
      -1,
      sizeof(CoCoInterferenceScores),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoCoInterferenceScores, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2fcoco_5finterference_5fscores_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CoCoInterferenceScores_descriptor_, CoCoInterferenceScores::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2fcoco_5finterference_5fscores_2eproto() {
  CoCoInterferenceScores_default_instance_.Shutdown();
  delete CoCoInterferenceScores_reflection_;
}

void protobuf_InitDefaults_base_2fcoco_5finterference_5fscores_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  CoCoInterferenceScores_default_instance_.DefaultConstruct();
  CoCoInterferenceScores_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_base_2fcoco_5finterference_5fscores_2eproto_once_);
void protobuf_InitDefaults_base_2fcoco_5finterference_5fscores_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_base_2fcoco_5finterference_5fscores_2eproto_once_,
                 &protobuf_InitDefaults_base_2fcoco_5finterference_5fscores_2eproto_impl);
}
void protobuf_AddDesc_base_2fcoco_5finterference_5fscores_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_base_2fcoco_5finterference_5fscores_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#base/coco_interference_scores.proto\022\tf"
    "irmament\"v\n\026CoCoInterferenceScores\022\025\n\rde"
    "vil_penalty\030\001 \001(\r\022\026\n\016rabbit_penalty\030\002 \001("
    "\r\022\025\n\rsheep_penalty\030\003 \001(\r\022\026\n\016turtle_penal"
    "ty\030\004 \001(\rb\006proto3", 176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/coco_interference_scores.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2fcoco_5finterference_5fscores_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_base_2fcoco_5finterference_5fscores_2eproto_once_);
void protobuf_AddDesc_base_2fcoco_5finterference_5fscores_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_base_2fcoco_5finterference_5fscores_2eproto_once_,
                 &protobuf_AddDesc_base_2fcoco_5finterference_5fscores_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2fcoco_5finterference_5fscores_2eproto {
  StaticDescriptorInitializer_base_2fcoco_5finterference_5fscores_2eproto() {
    protobuf_AddDesc_base_2fcoco_5finterference_5fscores_2eproto();
  }
} static_descriptor_initializer_base_2fcoco_5finterference_5fscores_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoCoInterferenceScores::kDevilPenaltyFieldNumber;
const int CoCoInterferenceScores::kRabbitPenaltyFieldNumber;
const int CoCoInterferenceScores::kSheepPenaltyFieldNumber;
const int CoCoInterferenceScores::kTurtlePenaltyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoCoInterferenceScores::CoCoInterferenceScores()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_base_2fcoco_5finterference_5fscores_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.CoCoInterferenceScores)
}

void CoCoInterferenceScores::InitAsDefaultInstance() {
}

CoCoInterferenceScores::CoCoInterferenceScores(const CoCoInterferenceScores& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.CoCoInterferenceScores)
}

void CoCoInterferenceScores::SharedCtor() {
  ::memset(&devil_penalty_, 0, reinterpret_cast<char*>(&turtle_penalty_) -
    reinterpret_cast<char*>(&devil_penalty_) + sizeof(turtle_penalty_));
  _cached_size_ = 0;
}

CoCoInterferenceScores::~CoCoInterferenceScores() {
  // @@protoc_insertion_point(destructor:firmament.CoCoInterferenceScores)
  SharedDtor();
}

void CoCoInterferenceScores::SharedDtor() {
}

void CoCoInterferenceScores::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoCoInterferenceScores::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CoCoInterferenceScores_descriptor_;
}

const CoCoInterferenceScores& CoCoInterferenceScores::default_instance() {
  protobuf_InitDefaults_base_2fcoco_5finterference_5fscores_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<CoCoInterferenceScores> CoCoInterferenceScores_default_instance_;

CoCoInterferenceScores* CoCoInterferenceScores::New(::google::protobuf::Arena* arena) const {
  CoCoInterferenceScores* n = new CoCoInterferenceScores;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoCoInterferenceScores::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.CoCoInterferenceScores)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CoCoInterferenceScores, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CoCoInterferenceScores*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(devil_penalty_, turtle_penalty_);

#undef ZR_HELPER_
#undef ZR_

}

bool CoCoInterferenceScores::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.CoCoInterferenceScores)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 devil_penalty = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devil_penalty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rabbit_penalty;
        break;
      }

      // optional uint32 rabbit_penalty = 2;
      case 2: {
        if (tag == 16) {
         parse_rabbit_penalty:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rabbit_penalty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sheep_penalty;
        break;
      }

      // optional uint32 sheep_penalty = 3;
      case 3: {
        if (tag == 24) {
         parse_sheep_penalty:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sheep_penalty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_turtle_penalty;
        break;
      }

      // optional uint32 turtle_penalty = 4;
      case 4: {
        if (tag == 32) {
         parse_turtle_penalty:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turtle_penalty_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.CoCoInterferenceScores)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.CoCoInterferenceScores)
  return false;
#undef DO_
}

void CoCoInterferenceScores::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.CoCoInterferenceScores)
  // optional uint32 devil_penalty = 1;
  if (this->devil_penalty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->devil_penalty(), output);
  }

  // optional uint32 rabbit_penalty = 2;
  if (this->rabbit_penalty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rabbit_penalty(), output);
  }

  // optional uint32 sheep_penalty = 3;
  if (this->sheep_penalty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sheep_penalty(), output);
  }

  // optional uint32 turtle_penalty = 4;
  if (this->turtle_penalty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->turtle_penalty(), output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.CoCoInterferenceScores)
}

::google::protobuf::uint8* CoCoInterferenceScores::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.CoCoInterferenceScores)
  // optional uint32 devil_penalty = 1;
  if (this->devil_penalty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->devil_penalty(), target);
  }

  // optional uint32 rabbit_penalty = 2;
  if (this->rabbit_penalty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rabbit_penalty(), target);
  }

  // optional uint32 sheep_penalty = 3;
  if (this->sheep_penalty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sheep_penalty(), target);
  }

  // optional uint32 turtle_penalty = 4;
  if (this->turtle_penalty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->turtle_penalty(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.CoCoInterferenceScores)
  return target;
}

size_t CoCoInterferenceScores::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.CoCoInterferenceScores)
  size_t total_size = 0;

  // optional uint32 devil_penalty = 1;
  if (this->devil_penalty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->devil_penalty());
  }

  // optional uint32 rabbit_penalty = 2;
  if (this->rabbit_penalty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rabbit_penalty());
  }

  // optional uint32 sheep_penalty = 3;
  if (this->sheep_penalty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sheep_penalty());
  }

  // optional uint32 turtle_penalty = 4;
  if (this->turtle_penalty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->turtle_penalty());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoCoInterferenceScores::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.CoCoInterferenceScores)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CoCoInterferenceScores* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoCoInterferenceScores>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.CoCoInterferenceScores)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.CoCoInterferenceScores)
    UnsafeMergeFrom(*source);
  }
}

void CoCoInterferenceScores::MergeFrom(const CoCoInterferenceScores& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.CoCoInterferenceScores)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void CoCoInterferenceScores::UnsafeMergeFrom(const CoCoInterferenceScores& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.devil_penalty() != 0) {
    set_devil_penalty(from.devil_penalty());
  }
  if (from.rabbit_penalty() != 0) {
    set_rabbit_penalty(from.rabbit_penalty());
  }
  if (from.sheep_penalty() != 0) {
    set_sheep_penalty(from.sheep_penalty());
  }
  if (from.turtle_penalty() != 0) {
    set_turtle_penalty(from.turtle_penalty());
  }
}

void CoCoInterferenceScores::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.CoCoInterferenceScores)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoCoInterferenceScores::CopyFrom(const CoCoInterferenceScores& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.CoCoInterferenceScores)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool CoCoInterferenceScores::IsInitialized() const {

  return true;
}

void CoCoInterferenceScores::Swap(CoCoInterferenceScores* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoCoInterferenceScores::InternalSwap(CoCoInterferenceScores* other) {
  std::swap(devil_penalty_, other->devil_penalty_);
  std::swap(rabbit_penalty_, other->rabbit_penalty_);
  std::swap(sheep_penalty_, other->sheep_penalty_);
  std::swap(turtle_penalty_, other->turtle_penalty_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoCoInterferenceScores::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CoCoInterferenceScores_descriptor_;
  metadata.reflection = CoCoInterferenceScores_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoCoInterferenceScores

// optional uint32 devil_penalty = 1;
void CoCoInterferenceScores::clear_devil_penalty() {
  devil_penalty_ = 0u;
}
::google::protobuf::uint32 CoCoInterferenceScores::devil_penalty() const {
  // @@protoc_insertion_point(field_get:firmament.CoCoInterferenceScores.devil_penalty)
  return devil_penalty_;
}
void CoCoInterferenceScores::set_devil_penalty(::google::protobuf::uint32 value) {
  
  devil_penalty_ = value;
  // @@protoc_insertion_point(field_set:firmament.CoCoInterferenceScores.devil_penalty)
}

// optional uint32 rabbit_penalty = 2;
void CoCoInterferenceScores::clear_rabbit_penalty() {
  rabbit_penalty_ = 0u;
}
::google::protobuf::uint32 CoCoInterferenceScores::rabbit_penalty() const {
  // @@protoc_insertion_point(field_get:firmament.CoCoInterferenceScores.rabbit_penalty)
  return rabbit_penalty_;
}
void CoCoInterferenceScores::set_rabbit_penalty(::google::protobuf::uint32 value) {
  
  rabbit_penalty_ = value;
  // @@protoc_insertion_point(field_set:firmament.CoCoInterferenceScores.rabbit_penalty)
}

// optional uint32 sheep_penalty = 3;
void CoCoInterferenceScores::clear_sheep_penalty() {
  sheep_penalty_ = 0u;
}
::google::protobuf::uint32 CoCoInterferenceScores::sheep_penalty() const {
  // @@protoc_insertion_point(field_get:firmament.CoCoInterferenceScores.sheep_penalty)
  return sheep_penalty_;
}
void CoCoInterferenceScores::set_sheep_penalty(::google::protobuf::uint32 value) {
  
  sheep_penalty_ = value;
  // @@protoc_insertion_point(field_set:firmament.CoCoInterferenceScores.sheep_penalty)
}

// optional uint32 turtle_penalty = 4;
void CoCoInterferenceScores::clear_turtle_penalty() {
  turtle_penalty_ = 0u;
}
::google::protobuf::uint32 CoCoInterferenceScores::turtle_penalty() const {
  // @@protoc_insertion_point(field_get:firmament.CoCoInterferenceScores.turtle_penalty)
  return turtle_penalty_;
}
void CoCoInterferenceScores::set_turtle_penalty(::google::protobuf::uint32 value) {
  
  turtle_penalty_ = value;
  // @@protoc_insertion_point(field_set:firmament.CoCoInterferenceScores.turtle_penalty)
}

inline const CoCoInterferenceScores* CoCoInterferenceScores::internal_default_instance() {
  return &CoCoInterferenceScores_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
