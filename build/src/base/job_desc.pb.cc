// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base/job_desc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "base/job_desc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* JobDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobDescriptor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* JobDescriptor_JobState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_base_2fjob_5fdesc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_base_2fjob_5fdesc_2eproto() {
  protobuf_AddDesc_base_2fjob_5fdesc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "base/job_desc.proto");
  GOOGLE_CHECK(file != NULL);
  JobDescriptor_descriptor_ = file->message_type(0);
  static const int JobDescriptor_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescriptor, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescriptor, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescriptor, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescriptor, root_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescriptor, output_ids_),
  };
  JobDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      JobDescriptor_descriptor_,
      JobDescriptor::internal_default_instance(),
      JobDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(JobDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobDescriptor, _internal_metadata_));
  JobDescriptor_JobState_descriptor_ = JobDescriptor_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_base_2fjob_5fdesc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      JobDescriptor_descriptor_, JobDescriptor::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_base_2fjob_5fdesc_2eproto() {
  JobDescriptor_default_instance_.Shutdown();
  delete JobDescriptor_reflection_;
}

void protobuf_InitDefaults_base_2fjob_5fdesc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::firmament::protobuf_InitDefaults_base_2ftask_5fdesc_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  JobDescriptor_default_instance_.DefaultConstruct();
  JobDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_base_2fjob_5fdesc_2eproto_once_);
void protobuf_InitDefaults_base_2fjob_5fdesc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_base_2fjob_5fdesc_2eproto_once_,
                 &protobuf_InitDefaults_base_2fjob_5fdesc_2eproto_impl);
}
void protobuf_AddDesc_base_2fjob_5fdesc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_base_2fjob_5fdesc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023base/job_desc.proto\022\tfirmament\032\024base/t"
    "ask_desc.proto\"\203\002\n\rJobDescriptor\022\014\n\004uuid"
    "\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\0220\n\005state\030\003 \001(\0162!.fi"
    "rmament.JobDescriptor.JobState\022,\n\troot_t"
    "ask\030\004 \001(\0132\031.firmament.TaskDescriptor\022\022\n\n"
    "output_ids\030\005 \003(\014\"b\n\010JobState\022\007\n\003NEW\020\000\022\013\n"
    "\007CREATED\020\001\022\013\n\007RUNNING\020\002\022\r\n\tCOMPLETED\020\003\022\n"
    "\n\006FAILED\020\004\022\013\n\007ABORTED\020\005\022\013\n\007UNKNOWN\020\006b\006pr"
    "oto3", 324);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base/job_desc.proto", &protobuf_RegisterTypes);
  ::firmament::protobuf_AddDesc_base_2ftask_5fdesc_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_base_2fjob_5fdesc_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_base_2fjob_5fdesc_2eproto_once_);
void protobuf_AddDesc_base_2fjob_5fdesc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_base_2fjob_5fdesc_2eproto_once_,
                 &protobuf_AddDesc_base_2fjob_5fdesc_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_base_2fjob_5fdesc_2eproto {
  StaticDescriptorInitializer_base_2fjob_5fdesc_2eproto() {
    protobuf_AddDesc_base_2fjob_5fdesc_2eproto();
  }
} static_descriptor_initializer_base_2fjob_5fdesc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* JobDescriptor_JobState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobDescriptor_JobState_descriptor_;
}
bool JobDescriptor_JobState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const JobDescriptor_JobState JobDescriptor::NEW;
const JobDescriptor_JobState JobDescriptor::CREATED;
const JobDescriptor_JobState JobDescriptor::RUNNING;
const JobDescriptor_JobState JobDescriptor::COMPLETED;
const JobDescriptor_JobState JobDescriptor::FAILED;
const JobDescriptor_JobState JobDescriptor::ABORTED;
const JobDescriptor_JobState JobDescriptor::UNKNOWN;
const JobDescriptor_JobState JobDescriptor::JobState_MIN;
const JobDescriptor_JobState JobDescriptor::JobState_MAX;
const int JobDescriptor::JobState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobDescriptor::kUuidFieldNumber;
const int JobDescriptor::kNameFieldNumber;
const int JobDescriptor::kStateFieldNumber;
const int JobDescriptor::kRootTaskFieldNumber;
const int JobDescriptor::kOutputIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobDescriptor::JobDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_base_2fjob_5fdesc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.JobDescriptor)
}

void JobDescriptor::InitAsDefaultInstance() {
  root_task_ = const_cast< ::firmament::TaskDescriptor*>(
      ::firmament::TaskDescriptor::internal_default_instance());
}

JobDescriptor::JobDescriptor(const JobDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.JobDescriptor)
}

void JobDescriptor::SharedCtor() {
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  root_task_ = NULL;
  state_ = 0;
  _cached_size_ = 0;
}

JobDescriptor::~JobDescriptor() {
  // @@protoc_insertion_point(destructor:firmament.JobDescriptor)
  SharedDtor();
}

void JobDescriptor::SharedDtor() {
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &JobDescriptor_default_instance_.get()) {
    delete root_task_;
  }
}

void JobDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobDescriptor_descriptor_;
}

const JobDescriptor& JobDescriptor::default_instance() {
  protobuf_InitDefaults_base_2fjob_5fdesc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<JobDescriptor> JobDescriptor_default_instance_;

JobDescriptor* JobDescriptor::New(::google::protobuf::Arena* arena) const {
  JobDescriptor* n = new JobDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void JobDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.JobDescriptor)
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  if (GetArenaNoVirtual() == NULL && root_task_ != NULL) delete root_task_;
  root_task_ = NULL;
  output_ids_.Clear();
}

bool JobDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.JobDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.JobDescriptor.uuid"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.JobDescriptor.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // optional .firmament.JobDescriptor.JobState state = 3;
      case 3: {
        if (tag == 24) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::firmament::JobDescriptor_JobState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_root_task;
        break;
      }

      // optional .firmament.TaskDescriptor root_task = 4;
      case 4: {
        if (tag == 34) {
         parse_root_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_output_ids;
        break;
      }

      // repeated bytes output_ids = 5;
      case 5: {
        if (tag == 42) {
         parse_output_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_output_ids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_output_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.JobDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.JobDescriptor)
  return false;
#undef DO_
}

void JobDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.JobDescriptor)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.JobDescriptor.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->uuid(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.JobDescriptor.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .firmament.JobDescriptor.JobState state = 3;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // optional .firmament.TaskDescriptor root_task = 4;
  if (this->has_root_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->root_task_, output);
  }

  // repeated bytes output_ids = 5;
  for (int i = 0; i < this->output_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->output_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.JobDescriptor)
}

::google::protobuf::uint8* JobDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.JobDescriptor)
  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.JobDescriptor.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.JobDescriptor.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .firmament.JobDescriptor.JobState state = 3;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // optional .firmament.TaskDescriptor root_task = 4;
  if (this->has_root_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->root_task_, false, target);
  }

  // repeated bytes output_ids = 5;
  for (int i = 0; i < this->output_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->output_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.JobDescriptor)
  return target;
}

size_t JobDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.JobDescriptor)
  size_t total_size = 0;

  // optional string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .firmament.JobDescriptor.JobState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // optional .firmament.TaskDescriptor root_task = 4;
  if (this->has_root_task()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->root_task_);
  }

  // repeated bytes output_ids = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->output_ids_size());
  for (int i = 0; i < this->output_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->output_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.JobDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const JobDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.JobDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.JobDescriptor)
    UnsafeMergeFrom(*source);
  }
}

void JobDescriptor::MergeFrom(const JobDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.JobDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void JobDescriptor::UnsafeMergeFrom(const JobDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  output_ids_.UnsafeMergeFrom(from.output_ids_);
  if (from.uuid().size() > 0) {

    uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.has_root_task()) {
    mutable_root_task()->::firmament::TaskDescriptor::MergeFrom(from.root_task());
  }
}

void JobDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.JobDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobDescriptor::CopyFrom(const JobDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.JobDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool JobDescriptor::IsInitialized() const {

  return true;
}

void JobDescriptor::Swap(JobDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobDescriptor::InternalSwap(JobDescriptor* other) {
  uuid_.Swap(&other->uuid_);
  name_.Swap(&other->name_);
  std::swap(state_, other->state_);
  std::swap(root_task_, other->root_task_);
  output_ids_.UnsafeArenaSwap(&other->output_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata JobDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobDescriptor_descriptor_;
  metadata.reflection = JobDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// JobDescriptor

// optional string uuid = 1;
void JobDescriptor::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobDescriptor::uuid() const {
  // @@protoc_insertion_point(field_get:firmament.JobDescriptor.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobDescriptor::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.JobDescriptor.uuid)
}
void JobDescriptor::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.JobDescriptor.uuid)
}
void JobDescriptor::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.JobDescriptor.uuid)
}
::std::string* JobDescriptor::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:firmament.JobDescriptor.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobDescriptor::release_uuid() {
  // @@protoc_insertion_point(field_release:firmament.JobDescriptor.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobDescriptor::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:firmament.JobDescriptor.uuid)
}

// optional string name = 2;
void JobDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& JobDescriptor::name() const {
  // @@protoc_insertion_point(field_get:firmament.JobDescriptor.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobDescriptor::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.JobDescriptor.name)
}
void JobDescriptor::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.JobDescriptor.name)
}
void JobDescriptor::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.JobDescriptor.name)
}
::std::string* JobDescriptor::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:firmament.JobDescriptor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* JobDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:firmament.JobDescriptor.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void JobDescriptor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:firmament.JobDescriptor.name)
}

// optional .firmament.JobDescriptor.JobState state = 3;
void JobDescriptor::clear_state() {
  state_ = 0;
}
::firmament::JobDescriptor_JobState JobDescriptor::state() const {
  // @@protoc_insertion_point(field_get:firmament.JobDescriptor.state)
  return static_cast< ::firmament::JobDescriptor_JobState >(state_);
}
void JobDescriptor::set_state(::firmament::JobDescriptor_JobState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:firmament.JobDescriptor.state)
}

// optional .firmament.TaskDescriptor root_task = 4;
bool JobDescriptor::has_root_task() const {
  return this != internal_default_instance() && root_task_ != NULL;
}
void JobDescriptor::clear_root_task() {
  if (GetArenaNoVirtual() == NULL && root_task_ != NULL) delete root_task_;
  root_task_ = NULL;
}
const ::firmament::TaskDescriptor& JobDescriptor::root_task() const {
  // @@protoc_insertion_point(field_get:firmament.JobDescriptor.root_task)
  return root_task_ != NULL ? *root_task_
                         : *::firmament::TaskDescriptor::internal_default_instance();
}
::firmament::TaskDescriptor* JobDescriptor::mutable_root_task() {
  
  if (root_task_ == NULL) {
    root_task_ = new ::firmament::TaskDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:firmament.JobDescriptor.root_task)
  return root_task_;
}
::firmament::TaskDescriptor* JobDescriptor::release_root_task() {
  // @@protoc_insertion_point(field_release:firmament.JobDescriptor.root_task)
  
  ::firmament::TaskDescriptor* temp = root_task_;
  root_task_ = NULL;
  return temp;
}
void JobDescriptor::set_allocated_root_task(::firmament::TaskDescriptor* root_task) {
  delete root_task_;
  root_task_ = root_task;
  if (root_task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.JobDescriptor.root_task)
}

// repeated bytes output_ids = 5;
int JobDescriptor::output_ids_size() const {
  return output_ids_.size();
}
void JobDescriptor::clear_output_ids() {
  output_ids_.Clear();
}
const ::std::string& JobDescriptor::output_ids(int index) const {
  // @@protoc_insertion_point(field_get:firmament.JobDescriptor.output_ids)
  return output_ids_.Get(index);
}
::std::string* JobDescriptor::mutable_output_ids(int index) {
  // @@protoc_insertion_point(field_mutable:firmament.JobDescriptor.output_ids)
  return output_ids_.Mutable(index);
}
void JobDescriptor::set_output_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:firmament.JobDescriptor.output_ids)
  output_ids_.Mutable(index)->assign(value);
}
void JobDescriptor::set_output_ids(int index, const char* value) {
  output_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:firmament.JobDescriptor.output_ids)
}
void JobDescriptor::set_output_ids(int index, const void* value, size_t size) {
  output_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:firmament.JobDescriptor.output_ids)
}
::std::string* JobDescriptor::add_output_ids() {
  // @@protoc_insertion_point(field_add_mutable:firmament.JobDescriptor.output_ids)
  return output_ids_.Add();
}
void JobDescriptor::add_output_ids(const ::std::string& value) {
  output_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:firmament.JobDescriptor.output_ids)
}
void JobDescriptor::add_output_ids(const char* value) {
  output_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:firmament.JobDescriptor.output_ids)
}
void JobDescriptor::add_output_ids(const void* value, size_t size) {
  output_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:firmament.JobDescriptor.output_ids)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
JobDescriptor::output_ids() const {
  // @@protoc_insertion_point(field_list:firmament.JobDescriptor.output_ids)
  return output_ids_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
JobDescriptor::mutable_output_ids() {
  // @@protoc_insertion_point(field_mutable_list:firmament.JobDescriptor.output_ids)
  return &output_ids_;
}

inline const JobDescriptor* JobDescriptor::internal_default_instance() {
  return &JobDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
