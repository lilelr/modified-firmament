// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/task_spawn_message.proto

#ifndef PROTOBUF_messages_2ftask_5fspawn_5fmessage_2eproto__INCLUDED
#define PROTOBUF_messages_2ftask_5fspawn_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/task_desc.pb.h"
// @@protoc_insertion_point(includes)

namespace firmament {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_messages_2ftask_5fspawn_5fmessage_2eproto();
void protobuf_InitDefaults_messages_2ftask_5fspawn_5fmessage_2eproto();
void protobuf_AssignDesc_messages_2ftask_5fspawn_5fmessage_2eproto();
void protobuf_ShutdownFile_messages_2ftask_5fspawn_5fmessage_2eproto();

class TaskSpawnMessage;

// ===================================================================

class TaskSpawnMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firmament.TaskSpawnMessage) */ {
 public:
  TaskSpawnMessage();
  virtual ~TaskSpawnMessage();

  TaskSpawnMessage(const TaskSpawnMessage& from);

  inline TaskSpawnMessage& operator=(const TaskSpawnMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskSpawnMessage& default_instance();

  static const TaskSpawnMessage* internal_default_instance();

  void Swap(TaskSpawnMessage* other);

  // implements Message ----------------------------------------------

  inline TaskSpawnMessage* New() const { return New(NULL); }

  TaskSpawnMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskSpawnMessage& from);
  void MergeFrom(const TaskSpawnMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskSpawnMessage* other);
  void UnsafeMergeFrom(const TaskSpawnMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 creating_task_id = 1;
  void clear_creating_task_id();
  static const int kCreatingTaskIdFieldNumber = 1;
  ::google::protobuf::uint64 creating_task_id() const;
  void set_creating_task_id(::google::protobuf::uint64 value);

  // optional .firmament.TaskDescriptor spawned_task_desc = 2;
  bool has_spawned_task_desc() const;
  void clear_spawned_task_desc();
  static const int kSpawnedTaskDescFieldNumber = 2;
  const ::firmament::TaskDescriptor& spawned_task_desc() const;
  ::firmament::TaskDescriptor* mutable_spawned_task_desc();
  ::firmament::TaskDescriptor* release_spawned_task_desc();
  void set_allocated_spawned_task_desc(::firmament::TaskDescriptor* spawned_task_desc);

  // @@protoc_insertion_point(class_scope:firmament.TaskSpawnMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::firmament::TaskDescriptor* spawned_task_desc_;
  ::google::protobuf::uint64 creating_task_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messages_2ftask_5fspawn_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_messages_2ftask_5fspawn_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_messages_2ftask_5fspawn_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_messages_2ftask_5fspawn_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TaskSpawnMessage> TaskSpawnMessage_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskSpawnMessage

// optional uint64 creating_task_id = 1;
inline void TaskSpawnMessage::clear_creating_task_id() {
  creating_task_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskSpawnMessage::creating_task_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskSpawnMessage.creating_task_id)
  return creating_task_id_;
}
inline void TaskSpawnMessage::set_creating_task_id(::google::protobuf::uint64 value) {
  
  creating_task_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskSpawnMessage.creating_task_id)
}

// optional .firmament.TaskDescriptor spawned_task_desc = 2;
inline bool TaskSpawnMessage::has_spawned_task_desc() const {
  return this != internal_default_instance() && spawned_task_desc_ != NULL;
}
inline void TaskSpawnMessage::clear_spawned_task_desc() {
  if (GetArenaNoVirtual() == NULL && spawned_task_desc_ != NULL) delete spawned_task_desc_;
  spawned_task_desc_ = NULL;
}
inline const ::firmament::TaskDescriptor& TaskSpawnMessage::spawned_task_desc() const {
  // @@protoc_insertion_point(field_get:firmament.TaskSpawnMessage.spawned_task_desc)
  return spawned_task_desc_ != NULL ? *spawned_task_desc_
                         : *::firmament::TaskDescriptor::internal_default_instance();
}
inline ::firmament::TaskDescriptor* TaskSpawnMessage::mutable_spawned_task_desc() {
  
  if (spawned_task_desc_ == NULL) {
    spawned_task_desc_ = new ::firmament::TaskDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:firmament.TaskSpawnMessage.spawned_task_desc)
  return spawned_task_desc_;
}
inline ::firmament::TaskDescriptor* TaskSpawnMessage::release_spawned_task_desc() {
  // @@protoc_insertion_point(field_release:firmament.TaskSpawnMessage.spawned_task_desc)
  
  ::firmament::TaskDescriptor* temp = spawned_task_desc_;
  spawned_task_desc_ = NULL;
  return temp;
}
inline void TaskSpawnMessage::set_allocated_spawned_task_desc(::firmament::TaskDescriptor* spawned_task_desc) {
  delete spawned_task_desc_;
  spawned_task_desc_ = spawned_task_desc;
  if (spawned_task_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskSpawnMessage.spawned_task_desc)
}

inline const TaskSpawnMessage* TaskSpawnMessage::internal_default_instance() {
  return &TaskSpawnMessage_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2ftask_5fspawn_5fmessage_2eproto__INCLUDED
