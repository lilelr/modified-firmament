// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/base_message.proto

#ifndef PROTOBUF_messages_2fbase_5fmessage_2eproto__INCLUDED
#define PROTOBUF_messages_2fbase_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "messages/test_message.pb.h"
#include "messages/heartbeat_message.pb.h"
#include "messages/registration_message.pb.h"
#include "messages/task_heartbeat_message.pb.h"
#include "messages/task_spawn_message.pb.h"
#include "messages/task_state_message.pb.h"
#include "messages/task_info_message.pb.h"
#include "messages/task_delegation_message.pb.h"
#include "messages/task_kill_message.pb.h"
#include "base/task_final_report.pb.h"
// @@protoc_insertion_point(includes)

namespace firmament {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_messages_2fbase_5fmessage_2eproto();
void protobuf_InitDefaults_messages_2fbase_5fmessage_2eproto();
void protobuf_AssignDesc_messages_2fbase_5fmessage_2eproto();
void protobuf_ShutdownFile_messages_2fbase_5fmessage_2eproto();

class BaseMessage;

// ===================================================================

class BaseMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firmament.BaseMessage) */ {
 public:
  BaseMessage();
  virtual ~BaseMessage();

  BaseMessage(const BaseMessage& from);

  inline BaseMessage& operator=(const BaseMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseMessage& default_instance();

  static const BaseMessage* internal_default_instance();

  void Swap(BaseMessage* other);

  // implements Message ----------------------------------------------

  inline BaseMessage* New() const { return New(NULL); }

  BaseMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseMessage& from);
  void MergeFrom(const BaseMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BaseMessage* other);
  void UnsafeMergeFrom(const BaseMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .firmament.TestMessage test = 1;
  bool has_test() const;
  void clear_test();
  static const int kTestFieldNumber = 1;
  const ::firmament::TestMessage& test() const;
  ::firmament::TestMessage* mutable_test();
  ::firmament::TestMessage* release_test();
  void set_allocated_test(::firmament::TestMessage* test);

  // optional .firmament.HeartbeatMessage heartbeat = 2;
  bool has_heartbeat() const;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 2;
  const ::firmament::HeartbeatMessage& heartbeat() const;
  ::firmament::HeartbeatMessage* mutable_heartbeat();
  ::firmament::HeartbeatMessage* release_heartbeat();
  void set_allocated_heartbeat(::firmament::HeartbeatMessage* heartbeat);

  // optional .firmament.RegistrationMessage registration = 3;
  bool has_registration() const;
  void clear_registration();
  static const int kRegistrationFieldNumber = 3;
  const ::firmament::RegistrationMessage& registration() const;
  ::firmament::RegistrationMessage* mutable_registration();
  ::firmament::RegistrationMessage* release_registration();
  void set_allocated_registration(::firmament::RegistrationMessage* registration);

  // optional .firmament.TaskHeartbeatMessage task_heartbeat = 4;
  bool has_task_heartbeat() const;
  void clear_task_heartbeat();
  static const int kTaskHeartbeatFieldNumber = 4;
  const ::firmament::TaskHeartbeatMessage& task_heartbeat() const;
  ::firmament::TaskHeartbeatMessage* mutable_task_heartbeat();
  ::firmament::TaskHeartbeatMessage* release_task_heartbeat();
  void set_allocated_task_heartbeat(::firmament::TaskHeartbeatMessage* task_heartbeat);

  // optional .firmament.TaskSpawnMessage task_spawn = 5;
  bool has_task_spawn() const;
  void clear_task_spawn();
  static const int kTaskSpawnFieldNumber = 5;
  const ::firmament::TaskSpawnMessage& task_spawn() const;
  ::firmament::TaskSpawnMessage* mutable_task_spawn();
  ::firmament::TaskSpawnMessage* release_task_spawn();
  void set_allocated_task_spawn(::firmament::TaskSpawnMessage* task_spawn);

  // optional .firmament.TaskStateMessage task_state = 6;
  bool has_task_state() const;
  void clear_task_state();
  static const int kTaskStateFieldNumber = 6;
  const ::firmament::TaskStateMessage& task_state() const;
  ::firmament::TaskStateMessage* mutable_task_state();
  ::firmament::TaskStateMessage* release_task_state();
  void set_allocated_task_state(::firmament::TaskStateMessage* task_state);

  // optional .firmament.TaskInfoRequestMessage task_info_request = 7;
  bool has_task_info_request() const;
  void clear_task_info_request();
  static const int kTaskInfoRequestFieldNumber = 7;
  const ::firmament::TaskInfoRequestMessage& task_info_request() const;
  ::firmament::TaskInfoRequestMessage* mutable_task_info_request();
  ::firmament::TaskInfoRequestMessage* release_task_info_request();
  void set_allocated_task_info_request(::firmament::TaskInfoRequestMessage* task_info_request);

  // optional .firmament.TaskInfoResponseMessage task_info_response = 8;
  bool has_task_info_response() const;
  void clear_task_info_response();
  static const int kTaskInfoResponseFieldNumber = 8;
  const ::firmament::TaskInfoResponseMessage& task_info_response() const;
  ::firmament::TaskInfoResponseMessage* mutable_task_info_response();
  ::firmament::TaskInfoResponseMessage* release_task_info_response();
  void set_allocated_task_info_response(::firmament::TaskInfoResponseMessage* task_info_response);

  // optional .firmament.TaskDelegationRequestMessage task_delegation_request = 9;
  bool has_task_delegation_request() const;
  void clear_task_delegation_request();
  static const int kTaskDelegationRequestFieldNumber = 9;
  const ::firmament::TaskDelegationRequestMessage& task_delegation_request() const;
  ::firmament::TaskDelegationRequestMessage* mutable_task_delegation_request();
  ::firmament::TaskDelegationRequestMessage* release_task_delegation_request();
  void set_allocated_task_delegation_request(::firmament::TaskDelegationRequestMessage* task_delegation_request);

  // optional .firmament.TaskDelegationResponseMessage task_delegation_response = 10;
  bool has_task_delegation_response() const;
  void clear_task_delegation_response();
  static const int kTaskDelegationResponseFieldNumber = 10;
  const ::firmament::TaskDelegationResponseMessage& task_delegation_response() const;
  ::firmament::TaskDelegationResponseMessage* mutable_task_delegation_response();
  ::firmament::TaskDelegationResponseMessage* release_task_delegation_response();
  void set_allocated_task_delegation_response(::firmament::TaskDelegationResponseMessage* task_delegation_response);

  // optional .firmament.TaskKillMessage task_kill = 11;
  bool has_task_kill() const;
  void clear_task_kill();
  static const int kTaskKillFieldNumber = 11;
  const ::firmament::TaskKillMessage& task_kill() const;
  ::firmament::TaskKillMessage* mutable_task_kill();
  ::firmament::TaskKillMessage* release_task_kill();
  void set_allocated_task_kill(::firmament::TaskKillMessage* task_kill);

  // optional .firmament.TaskFinalReport task_final_report = 12;
  bool has_task_final_report() const;
  void clear_task_final_report();
  static const int kTaskFinalReportFieldNumber = 12;
  const ::firmament::TaskFinalReport& task_final_report() const;
  ::firmament::TaskFinalReport* mutable_task_final_report();
  ::firmament::TaskFinalReport* release_task_final_report();
  void set_allocated_task_final_report(::firmament::TaskFinalReport* task_final_report);

  // @@protoc_insertion_point(class_scope:firmament.BaseMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::firmament::TestMessage* test_;
  ::firmament::HeartbeatMessage* heartbeat_;
  ::firmament::RegistrationMessage* registration_;
  ::firmament::TaskHeartbeatMessage* task_heartbeat_;
  ::firmament::TaskSpawnMessage* task_spawn_;
  ::firmament::TaskStateMessage* task_state_;
  ::firmament::TaskInfoRequestMessage* task_info_request_;
  ::firmament::TaskInfoResponseMessage* task_info_response_;
  ::firmament::TaskDelegationRequestMessage* task_delegation_request_;
  ::firmament::TaskDelegationResponseMessage* task_delegation_response_;
  ::firmament::TaskKillMessage* task_kill_;
  ::firmament::TaskFinalReport* task_final_report_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messages_2fbase_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_messages_2fbase_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_messages_2fbase_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_messages_2fbase_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BaseMessage> BaseMessage_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseMessage

// optional .firmament.TestMessage test = 1;
inline bool BaseMessage::has_test() const {
  return this != internal_default_instance() && test_ != NULL;
}
inline void BaseMessage::clear_test() {
  if (GetArenaNoVirtual() == NULL && test_ != NULL) delete test_;
  test_ = NULL;
}
inline const ::firmament::TestMessage& BaseMessage::test() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.test)
  return test_ != NULL ? *test_
                         : *::firmament::TestMessage::internal_default_instance();
}
inline ::firmament::TestMessage* BaseMessage::mutable_test() {
  
  if (test_ == NULL) {
    test_ = new ::firmament::TestMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.test)
  return test_;
}
inline ::firmament::TestMessage* BaseMessage::release_test() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.test)
  
  ::firmament::TestMessage* temp = test_;
  test_ = NULL;
  return temp;
}
inline void BaseMessage::set_allocated_test(::firmament::TestMessage* test) {
  delete test_;
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.test)
}

// optional .firmament.HeartbeatMessage heartbeat = 2;
inline bool BaseMessage::has_heartbeat() const {
  return this != internal_default_instance() && heartbeat_ != NULL;
}
inline void BaseMessage::clear_heartbeat() {
  if (GetArenaNoVirtual() == NULL && heartbeat_ != NULL) delete heartbeat_;
  heartbeat_ = NULL;
}
inline const ::firmament::HeartbeatMessage& BaseMessage::heartbeat() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.heartbeat)
  return heartbeat_ != NULL ? *heartbeat_
                         : *::firmament::HeartbeatMessage::internal_default_instance();
}
inline ::firmament::HeartbeatMessage* BaseMessage::mutable_heartbeat() {
  
  if (heartbeat_ == NULL) {
    heartbeat_ = new ::firmament::HeartbeatMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.heartbeat)
  return heartbeat_;
}
inline ::firmament::HeartbeatMessage* BaseMessage::release_heartbeat() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.heartbeat)
  
  ::firmament::HeartbeatMessage* temp = heartbeat_;
  heartbeat_ = NULL;
  return temp;
}
inline void BaseMessage::set_allocated_heartbeat(::firmament::HeartbeatMessage* heartbeat) {
  delete heartbeat_;
  heartbeat_ = heartbeat;
  if (heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.heartbeat)
}

// optional .firmament.RegistrationMessage registration = 3;
inline bool BaseMessage::has_registration() const {
  return this != internal_default_instance() && registration_ != NULL;
}
inline void BaseMessage::clear_registration() {
  if (GetArenaNoVirtual() == NULL && registration_ != NULL) delete registration_;
  registration_ = NULL;
}
inline const ::firmament::RegistrationMessage& BaseMessage::registration() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.registration)
  return registration_ != NULL ? *registration_
                         : *::firmament::RegistrationMessage::internal_default_instance();
}
inline ::firmament::RegistrationMessage* BaseMessage::mutable_registration() {
  
  if (registration_ == NULL) {
    registration_ = new ::firmament::RegistrationMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.registration)
  return registration_;
}
inline ::firmament::RegistrationMessage* BaseMessage::release_registration() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.registration)
  
  ::firmament::RegistrationMessage* temp = registration_;
  registration_ = NULL;
  return temp;
}
inline void BaseMessage::set_allocated_registration(::firmament::RegistrationMessage* registration) {
  delete registration_;
  registration_ = registration;
  if (registration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.registration)
}

// optional .firmament.TaskHeartbeatMessage task_heartbeat = 4;
inline bool BaseMessage::has_task_heartbeat() const {
  return this != internal_default_instance() && task_heartbeat_ != NULL;
}
inline void BaseMessage::clear_task_heartbeat() {
  if (GetArenaNoVirtual() == NULL && task_heartbeat_ != NULL) delete task_heartbeat_;
  task_heartbeat_ = NULL;
}
inline const ::firmament::TaskHeartbeatMessage& BaseMessage::task_heartbeat() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_heartbeat)
  return task_heartbeat_ != NULL ? *task_heartbeat_
                         : *::firmament::TaskHeartbeatMessage::internal_default_instance();
}
inline ::firmament::TaskHeartbeatMessage* BaseMessage::mutable_task_heartbeat() {
  
  if (task_heartbeat_ == NULL) {
    task_heartbeat_ = new ::firmament::TaskHeartbeatMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_heartbeat)
  return task_heartbeat_;
}
inline ::firmament::TaskHeartbeatMessage* BaseMessage::release_task_heartbeat() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_heartbeat)
  
  ::firmament::TaskHeartbeatMessage* temp = task_heartbeat_;
  task_heartbeat_ = NULL;
  return temp;
}
inline void BaseMessage::set_allocated_task_heartbeat(::firmament::TaskHeartbeatMessage* task_heartbeat) {
  delete task_heartbeat_;
  task_heartbeat_ = task_heartbeat;
  if (task_heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_heartbeat)
}

// optional .firmament.TaskSpawnMessage task_spawn = 5;
inline bool BaseMessage::has_task_spawn() const {
  return this != internal_default_instance() && task_spawn_ != NULL;
}
inline void BaseMessage::clear_task_spawn() {
  if (GetArenaNoVirtual() == NULL && task_spawn_ != NULL) delete task_spawn_;
  task_spawn_ = NULL;
}
inline const ::firmament::TaskSpawnMessage& BaseMessage::task_spawn() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_spawn)
  return task_spawn_ != NULL ? *task_spawn_
                         : *::firmament::TaskSpawnMessage::internal_default_instance();
}
inline ::firmament::TaskSpawnMessage* BaseMessage::mutable_task_spawn() {
  
  if (task_spawn_ == NULL) {
    task_spawn_ = new ::firmament::TaskSpawnMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_spawn)
  return task_spawn_;
}
inline ::firmament::TaskSpawnMessage* BaseMessage::release_task_spawn() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_spawn)
  
  ::firmament::TaskSpawnMessage* temp = task_spawn_;
  task_spawn_ = NULL;
  return temp;
}
inline void BaseMessage::set_allocated_task_spawn(::firmament::TaskSpawnMessage* task_spawn) {
  delete task_spawn_;
  task_spawn_ = task_spawn;
  if (task_spawn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_spawn)
}

// optional .firmament.TaskStateMessage task_state = 6;
inline bool BaseMessage::has_task_state() const {
  return this != internal_default_instance() && task_state_ != NULL;
}
inline void BaseMessage::clear_task_state() {
  if (GetArenaNoVirtual() == NULL && task_state_ != NULL) delete task_state_;
  task_state_ = NULL;
}
inline const ::firmament::TaskStateMessage& BaseMessage::task_state() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_state)
  return task_state_ != NULL ? *task_state_
                         : *::firmament::TaskStateMessage::internal_default_instance();
}
inline ::firmament::TaskStateMessage* BaseMessage::mutable_task_state() {
  
  if (task_state_ == NULL) {
    task_state_ = new ::firmament::TaskStateMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_state)
  return task_state_;
}
inline ::firmament::TaskStateMessage* BaseMessage::release_task_state() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_state)
  
  ::firmament::TaskStateMessage* temp = task_state_;
  task_state_ = NULL;
  return temp;
}
inline void BaseMessage::set_allocated_task_state(::firmament::TaskStateMessage* task_state) {
  delete task_state_;
  task_state_ = task_state;
  if (task_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_state)
}

// optional .firmament.TaskInfoRequestMessage task_info_request = 7;
inline bool BaseMessage::has_task_info_request() const {
  return this != internal_default_instance() && task_info_request_ != NULL;
}
inline void BaseMessage::clear_task_info_request() {
  if (GetArenaNoVirtual() == NULL && task_info_request_ != NULL) delete task_info_request_;
  task_info_request_ = NULL;
}
inline const ::firmament::TaskInfoRequestMessage& BaseMessage::task_info_request() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_info_request)
  return task_info_request_ != NULL ? *task_info_request_
                         : *::firmament::TaskInfoRequestMessage::internal_default_instance();
}
inline ::firmament::TaskInfoRequestMessage* BaseMessage::mutable_task_info_request() {
  
  if (task_info_request_ == NULL) {
    task_info_request_ = new ::firmament::TaskInfoRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_info_request)
  return task_info_request_;
}
inline ::firmament::TaskInfoRequestMessage* BaseMessage::release_task_info_request() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_info_request)
  
  ::firmament::TaskInfoRequestMessage* temp = task_info_request_;
  task_info_request_ = NULL;
  return temp;
}
inline void BaseMessage::set_allocated_task_info_request(::firmament::TaskInfoRequestMessage* task_info_request) {
  delete task_info_request_;
  task_info_request_ = task_info_request;
  if (task_info_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_info_request)
}

// optional .firmament.TaskInfoResponseMessage task_info_response = 8;
inline bool BaseMessage::has_task_info_response() const {
  return this != internal_default_instance() && task_info_response_ != NULL;
}
inline void BaseMessage::clear_task_info_response() {
  if (GetArenaNoVirtual() == NULL && task_info_response_ != NULL) delete task_info_response_;
  task_info_response_ = NULL;
}
inline const ::firmament::TaskInfoResponseMessage& BaseMessage::task_info_response() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_info_response)
  return task_info_response_ != NULL ? *task_info_response_
                         : *::firmament::TaskInfoResponseMessage::internal_default_instance();
}
inline ::firmament::TaskInfoResponseMessage* BaseMessage::mutable_task_info_response() {
  
  if (task_info_response_ == NULL) {
    task_info_response_ = new ::firmament::TaskInfoResponseMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_info_response)
  return task_info_response_;
}
inline ::firmament::TaskInfoResponseMessage* BaseMessage::release_task_info_response() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_info_response)
  
  ::firmament::TaskInfoResponseMessage* temp = task_info_response_;
  task_info_response_ = NULL;
  return temp;
}
inline void BaseMessage::set_allocated_task_info_response(::firmament::TaskInfoResponseMessage* task_info_response) {
  delete task_info_response_;
  task_info_response_ = task_info_response;
  if (task_info_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_info_response)
}

// optional .firmament.TaskDelegationRequestMessage task_delegation_request = 9;
inline bool BaseMessage::has_task_delegation_request() const {
  return this != internal_default_instance() && task_delegation_request_ != NULL;
}
inline void BaseMessage::clear_task_delegation_request() {
  if (GetArenaNoVirtual() == NULL && task_delegation_request_ != NULL) delete task_delegation_request_;
  task_delegation_request_ = NULL;
}
inline const ::firmament::TaskDelegationRequestMessage& BaseMessage::task_delegation_request() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_delegation_request)
  return task_delegation_request_ != NULL ? *task_delegation_request_
                         : *::firmament::TaskDelegationRequestMessage::internal_default_instance();
}
inline ::firmament::TaskDelegationRequestMessage* BaseMessage::mutable_task_delegation_request() {
  
  if (task_delegation_request_ == NULL) {
    task_delegation_request_ = new ::firmament::TaskDelegationRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_delegation_request)
  return task_delegation_request_;
}
inline ::firmament::TaskDelegationRequestMessage* BaseMessage::release_task_delegation_request() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_delegation_request)
  
  ::firmament::TaskDelegationRequestMessage* temp = task_delegation_request_;
  task_delegation_request_ = NULL;
  return temp;
}
inline void BaseMessage::set_allocated_task_delegation_request(::firmament::TaskDelegationRequestMessage* task_delegation_request) {
  delete task_delegation_request_;
  task_delegation_request_ = task_delegation_request;
  if (task_delegation_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_delegation_request)
}

// optional .firmament.TaskDelegationResponseMessage task_delegation_response = 10;
inline bool BaseMessage::has_task_delegation_response() const {
  return this != internal_default_instance() && task_delegation_response_ != NULL;
}
inline void BaseMessage::clear_task_delegation_response() {
  if (GetArenaNoVirtual() == NULL && task_delegation_response_ != NULL) delete task_delegation_response_;
  task_delegation_response_ = NULL;
}
inline const ::firmament::TaskDelegationResponseMessage& BaseMessage::task_delegation_response() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_delegation_response)
  return task_delegation_response_ != NULL ? *task_delegation_response_
                         : *::firmament::TaskDelegationResponseMessage::internal_default_instance();
}
inline ::firmament::TaskDelegationResponseMessage* BaseMessage::mutable_task_delegation_response() {
  
  if (task_delegation_response_ == NULL) {
    task_delegation_response_ = new ::firmament::TaskDelegationResponseMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_delegation_response)
  return task_delegation_response_;
}
inline ::firmament::TaskDelegationResponseMessage* BaseMessage::release_task_delegation_response() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_delegation_response)
  
  ::firmament::TaskDelegationResponseMessage* temp = task_delegation_response_;
  task_delegation_response_ = NULL;
  return temp;
}
inline void BaseMessage::set_allocated_task_delegation_response(::firmament::TaskDelegationResponseMessage* task_delegation_response) {
  delete task_delegation_response_;
  task_delegation_response_ = task_delegation_response;
  if (task_delegation_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_delegation_response)
}

// optional .firmament.TaskKillMessage task_kill = 11;
inline bool BaseMessage::has_task_kill() const {
  return this != internal_default_instance() && task_kill_ != NULL;
}
inline void BaseMessage::clear_task_kill() {
  if (GetArenaNoVirtual() == NULL && task_kill_ != NULL) delete task_kill_;
  task_kill_ = NULL;
}
inline const ::firmament::TaskKillMessage& BaseMessage::task_kill() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_kill)
  return task_kill_ != NULL ? *task_kill_
                         : *::firmament::TaskKillMessage::internal_default_instance();
}
inline ::firmament::TaskKillMessage* BaseMessage::mutable_task_kill() {
  
  if (task_kill_ == NULL) {
    task_kill_ = new ::firmament::TaskKillMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_kill)
  return task_kill_;
}
inline ::firmament::TaskKillMessage* BaseMessage::release_task_kill() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_kill)
  
  ::firmament::TaskKillMessage* temp = task_kill_;
  task_kill_ = NULL;
  return temp;
}
inline void BaseMessage::set_allocated_task_kill(::firmament::TaskKillMessage* task_kill) {
  delete task_kill_;
  task_kill_ = task_kill;
  if (task_kill) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_kill)
}

// optional .firmament.TaskFinalReport task_final_report = 12;
inline bool BaseMessage::has_task_final_report() const {
  return this != internal_default_instance() && task_final_report_ != NULL;
}
inline void BaseMessage::clear_task_final_report() {
  if (GetArenaNoVirtual() == NULL && task_final_report_ != NULL) delete task_final_report_;
  task_final_report_ = NULL;
}
inline const ::firmament::TaskFinalReport& BaseMessage::task_final_report() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_final_report)
  return task_final_report_ != NULL ? *task_final_report_
                         : *::firmament::TaskFinalReport::internal_default_instance();
}
inline ::firmament::TaskFinalReport* BaseMessage::mutable_task_final_report() {
  
  if (task_final_report_ == NULL) {
    task_final_report_ = new ::firmament::TaskFinalReport;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_final_report)
  return task_final_report_;
}
inline ::firmament::TaskFinalReport* BaseMessage::release_task_final_report() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_final_report)
  
  ::firmament::TaskFinalReport* temp = task_final_report_;
  task_final_report_ = NULL;
  return temp;
}
inline void BaseMessage::set_allocated_task_final_report(::firmament::TaskFinalReport* task_final_report) {
  delete task_final_report_;
  task_final_report_ = task_final_report;
  if (task_final_report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_final_report)
}

inline const BaseMessage* BaseMessage::internal_default_instance() {
  return &BaseMessage_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2fbase_5fmessage_2eproto__INCLUDED
