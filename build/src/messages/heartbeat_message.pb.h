// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/heartbeat_message.proto

#ifndef PROTOBUF_messages_2fheartbeat_5fmessage_2eproto__INCLUDED
#define PROTOBUF_messages_2fheartbeat_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "base/resource_desc.pb.h"
#include "base/resource_stats.pb.h"
// @@protoc_insertion_point(includes)

namespace firmament {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_messages_2fheartbeat_5fmessage_2eproto();
void protobuf_InitDefaults_messages_2fheartbeat_5fmessage_2eproto();
void protobuf_AssignDesc_messages_2fheartbeat_5fmessage_2eproto();
void protobuf_ShutdownFile_messages_2fheartbeat_5fmessage_2eproto();

class HeartbeatMessage;

// ===================================================================

class HeartbeatMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firmament.HeartbeatMessage) */ {
 public:
  HeartbeatMessage();
  virtual ~HeartbeatMessage();

  HeartbeatMessage(const HeartbeatMessage& from);

  inline HeartbeatMessage& operator=(const HeartbeatMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartbeatMessage& default_instance();

  static const HeartbeatMessage* internal_default_instance();

  void Swap(HeartbeatMessage* other);

  // implements Message ----------------------------------------------

  inline HeartbeatMessage* New() const { return New(NULL); }

  HeartbeatMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartbeatMessage& from);
  void MergeFrom(const HeartbeatMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartbeatMessage* other);
  void UnsafeMergeFrom(const HeartbeatMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // optional string location = 2;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional uint64 capacity = 3;
  void clear_capacity();
  static const int kCapacityFieldNumber = 3;
  ::google::protobuf::uint64 capacity() const;
  void set_capacity(::google::protobuf::uint64 value);

  // optional .firmament.ResourceStats load = 4;
  bool has_load() const;
  void clear_load();
  static const int kLoadFieldNumber = 4;
  const ::firmament::ResourceStats& load() const;
  ::firmament::ResourceStats* mutable_load();
  ::firmament::ResourceStats* release_load();
  void set_allocated_load(::firmament::ResourceStats* load);

  // optional .firmament.ResourceDescriptor res_desc = 5;
  bool has_res_desc() const;
  void clear_res_desc();
  static const int kResDescFieldNumber = 5;
  const ::firmament::ResourceDescriptor& res_desc() const;
  ::firmament::ResourceDescriptor* mutable_res_desc();
  ::firmament::ResourceDescriptor* release_res_desc();
  void set_allocated_res_desc(::firmament::ResourceDescriptor* res_desc);

  // @@protoc_insertion_point(class_scope:firmament.HeartbeatMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::firmament::ResourceStats* load_;
  ::firmament::ResourceDescriptor* res_desc_;
  ::google::protobuf::uint64 capacity_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messages_2fheartbeat_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_messages_2fheartbeat_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_messages_2fheartbeat_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_messages_2fheartbeat_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<HeartbeatMessage> HeartbeatMessage_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartbeatMessage

// optional string uuid = 1;
inline void HeartbeatMessage::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartbeatMessage::uuid() const {
  // @@protoc_insertion_point(field_get:firmament.HeartbeatMessage.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartbeatMessage::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.HeartbeatMessage.uuid)
}
inline void HeartbeatMessage::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.HeartbeatMessage.uuid)
}
inline void HeartbeatMessage::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.HeartbeatMessage.uuid)
}
inline ::std::string* HeartbeatMessage::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:firmament.HeartbeatMessage.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartbeatMessage::release_uuid() {
  // @@protoc_insertion_point(field_release:firmament.HeartbeatMessage.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartbeatMessage::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:firmament.HeartbeatMessage.uuid)
}

// optional string location = 2;
inline void HeartbeatMessage::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartbeatMessage::location() const {
  // @@protoc_insertion_point(field_get:firmament.HeartbeatMessage.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartbeatMessage::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.HeartbeatMessage.location)
}
inline void HeartbeatMessage::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.HeartbeatMessage.location)
}
inline void HeartbeatMessage::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.HeartbeatMessage.location)
}
inline ::std::string* HeartbeatMessage::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:firmament.HeartbeatMessage.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartbeatMessage::release_location() {
  // @@protoc_insertion_point(field_release:firmament.HeartbeatMessage.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartbeatMessage::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:firmament.HeartbeatMessage.location)
}

// optional uint64 capacity = 3;
inline void HeartbeatMessage::clear_capacity() {
  capacity_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 HeartbeatMessage::capacity() const {
  // @@protoc_insertion_point(field_get:firmament.HeartbeatMessage.capacity)
  return capacity_;
}
inline void HeartbeatMessage::set_capacity(::google::protobuf::uint64 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:firmament.HeartbeatMessage.capacity)
}

// optional .firmament.ResourceStats load = 4;
inline bool HeartbeatMessage::has_load() const {
  return this != internal_default_instance() && load_ != NULL;
}
inline void HeartbeatMessage::clear_load() {
  if (GetArenaNoVirtual() == NULL && load_ != NULL) delete load_;
  load_ = NULL;
}
inline const ::firmament::ResourceStats& HeartbeatMessage::load() const {
  // @@protoc_insertion_point(field_get:firmament.HeartbeatMessage.load)
  return load_ != NULL ? *load_
                         : *::firmament::ResourceStats::internal_default_instance();
}
inline ::firmament::ResourceStats* HeartbeatMessage::mutable_load() {
  
  if (load_ == NULL) {
    load_ = new ::firmament::ResourceStats;
  }
  // @@protoc_insertion_point(field_mutable:firmament.HeartbeatMessage.load)
  return load_;
}
inline ::firmament::ResourceStats* HeartbeatMessage::release_load() {
  // @@protoc_insertion_point(field_release:firmament.HeartbeatMessage.load)
  
  ::firmament::ResourceStats* temp = load_;
  load_ = NULL;
  return temp;
}
inline void HeartbeatMessage::set_allocated_load(::firmament::ResourceStats* load) {
  delete load_;
  load_ = load;
  if (load) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.HeartbeatMessage.load)
}

// optional .firmament.ResourceDescriptor res_desc = 5;
inline bool HeartbeatMessage::has_res_desc() const {
  return this != internal_default_instance() && res_desc_ != NULL;
}
inline void HeartbeatMessage::clear_res_desc() {
  if (GetArenaNoVirtual() == NULL && res_desc_ != NULL) delete res_desc_;
  res_desc_ = NULL;
}
inline const ::firmament::ResourceDescriptor& HeartbeatMessage::res_desc() const {
  // @@protoc_insertion_point(field_get:firmament.HeartbeatMessage.res_desc)
  return res_desc_ != NULL ? *res_desc_
                         : *::firmament::ResourceDescriptor::internal_default_instance();
}
inline ::firmament::ResourceDescriptor* HeartbeatMessage::mutable_res_desc() {
  
  if (res_desc_ == NULL) {
    res_desc_ = new ::firmament::ResourceDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:firmament.HeartbeatMessage.res_desc)
  return res_desc_;
}
inline ::firmament::ResourceDescriptor* HeartbeatMessage::release_res_desc() {
  // @@protoc_insertion_point(field_release:firmament.HeartbeatMessage.res_desc)
  
  ::firmament::ResourceDescriptor* temp = res_desc_;
  res_desc_ = NULL;
  return temp;
}
inline void HeartbeatMessage::set_allocated_res_desc(::firmament::ResourceDescriptor* res_desc) {
  delete res_desc_;
  res_desc_ = res_desc;
  if (res_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.HeartbeatMessage.res_desc)
}

inline const HeartbeatMessage* HeartbeatMessage::internal_default_instance() {
  return &HeartbeatMessage_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2fheartbeat_5fmessage_2eproto__INCLUDED
