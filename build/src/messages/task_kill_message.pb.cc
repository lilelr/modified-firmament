// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/task_kill_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages/task_kill_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* TaskKillMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskKillMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskKillMessage_TaskKillReason_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2ftask_5fkill_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messages_2ftask_5fkill_5fmessage_2eproto() {
  protobuf_AddDesc_messages_2ftask_5fkill_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages/task_kill_message.proto");
  GOOGLE_CHECK(file != NULL);
  TaskKillMessage_descriptor_ = file->message_type(0);
  static const int TaskKillMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskKillMessage, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskKillMessage, reason_),
  };
  TaskKillMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskKillMessage_descriptor_,
      TaskKillMessage::internal_default_instance(),
      TaskKillMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskKillMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskKillMessage, _internal_metadata_));
  TaskKillMessage_TaskKillReason_descriptor_ = TaskKillMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2ftask_5fkill_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskKillMessage_descriptor_, TaskKillMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2ftask_5fkill_5fmessage_2eproto() {
  TaskKillMessage_default_instance_.Shutdown();
  delete TaskKillMessage_reflection_;
}

void protobuf_InitDefaults_messages_2ftask_5fkill_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  TaskKillMessage_default_instance_.DefaultConstruct();
  TaskKillMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_messages_2ftask_5fkill_5fmessage_2eproto_once_);
void protobuf_InitDefaults_messages_2ftask_5fkill_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_messages_2ftask_5fkill_5fmessage_2eproto_once_,
                 &protobuf_InitDefaults_messages_2ftask_5fkill_5fmessage_2eproto_impl);
}
void protobuf_AddDesc_messages_2ftask_5fkill_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_messages_2ftask_5fkill_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n messages/task_kill_message.proto\022\tfirm"
    "ament\"\246\001\n\017TaskKillMessage\022\017\n\007task_id\030\001 \001"
    "(\004\0229\n\006reason\030\002 \001(\0162).firmament.TaskKillM"
    "essage.TaskKillReason\"G\n\016TaskKillReason\022"
    "\016\n\nUSER_ABORT\020\000\022\025\n\021RESOURCE_EXCEEDED\020\001\022\016"
    "\n\nPREEMPTION\020\002b\006proto3", 222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages/task_kill_message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2ftask_5fkill_5fmessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messages_2ftask_5fkill_5fmessage_2eproto_once_);
void protobuf_AddDesc_messages_2ftask_5fkill_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messages_2ftask_5fkill_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_messages_2ftask_5fkill_5fmessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2ftask_5fkill_5fmessage_2eproto {
  StaticDescriptorInitializer_messages_2ftask_5fkill_5fmessage_2eproto() {
    protobuf_AddDesc_messages_2ftask_5fkill_5fmessage_2eproto();
  }
} static_descriptor_initializer_messages_2ftask_5fkill_5fmessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* TaskKillMessage_TaskKillReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskKillMessage_TaskKillReason_descriptor_;
}
bool TaskKillMessage_TaskKillReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TaskKillMessage_TaskKillReason TaskKillMessage::USER_ABORT;
const TaskKillMessage_TaskKillReason TaskKillMessage::RESOURCE_EXCEEDED;
const TaskKillMessage_TaskKillReason TaskKillMessage::PREEMPTION;
const TaskKillMessage_TaskKillReason TaskKillMessage::TaskKillReason_MIN;
const TaskKillMessage_TaskKillReason TaskKillMessage::TaskKillReason_MAX;
const int TaskKillMessage::TaskKillReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskKillMessage::kTaskIdFieldNumber;
const int TaskKillMessage::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskKillMessage::TaskKillMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messages_2ftask_5fkill_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.TaskKillMessage)
}

void TaskKillMessage::InitAsDefaultInstance() {
}

TaskKillMessage::TaskKillMessage(const TaskKillMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.TaskKillMessage)
}

void TaskKillMessage::SharedCtor() {
  ::memset(&task_id_, 0, reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&task_id_) + sizeof(reason_));
  _cached_size_ = 0;
}

TaskKillMessage::~TaskKillMessage() {
  // @@protoc_insertion_point(destructor:firmament.TaskKillMessage)
  SharedDtor();
}

void TaskKillMessage::SharedDtor() {
}

void TaskKillMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskKillMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskKillMessage_descriptor_;
}

const TaskKillMessage& TaskKillMessage::default_instance() {
  protobuf_InitDefaults_messages_2ftask_5fkill_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TaskKillMessage> TaskKillMessage_default_instance_;

TaskKillMessage* TaskKillMessage::New(::google::protobuf::Arena* arena) const {
  TaskKillMessage* n = new TaskKillMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskKillMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.TaskKillMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaskKillMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskKillMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(task_id_, reason_);

#undef ZR_HELPER_
#undef ZR_

}

bool TaskKillMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.TaskKillMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional .firmament.TaskKillMessage.TaskKillReason reason = 2;
      case 2: {
        if (tag == 16) {
         parse_reason:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::firmament::TaskKillMessage_TaskKillReason >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.TaskKillMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.TaskKillMessage)
  return false;
#undef DO_
}

void TaskKillMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.TaskKillMessage)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // optional .firmament.TaskKillMessage.TaskKillReason reason = 2;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.TaskKillMessage)
}

::google::protobuf::uint8* TaskKillMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.TaskKillMessage)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // optional .firmament.TaskKillMessage.TaskKillReason reason = 2;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.TaskKillMessage)
  return target;
}

size_t TaskKillMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.TaskKillMessage)
  size_t total_size = 0;

  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  // optional .firmament.TaskKillMessage.TaskKillReason reason = 2;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskKillMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.TaskKillMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskKillMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskKillMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.TaskKillMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.TaskKillMessage)
    UnsafeMergeFrom(*source);
  }
}

void TaskKillMessage::MergeFrom(const TaskKillMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.TaskKillMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TaskKillMessage::UnsafeMergeFrom(const TaskKillMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void TaskKillMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.TaskKillMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskKillMessage::CopyFrom(const TaskKillMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.TaskKillMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TaskKillMessage::IsInitialized() const {

  return true;
}

void TaskKillMessage::Swap(TaskKillMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskKillMessage::InternalSwap(TaskKillMessage* other) {
  std::swap(task_id_, other->task_id_);
  std::swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskKillMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskKillMessage_descriptor_;
  metadata.reflection = TaskKillMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskKillMessage

// optional uint64 task_id = 1;
void TaskKillMessage::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskKillMessage::task_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskKillMessage.task_id)
  return task_id_;
}
void TaskKillMessage::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskKillMessage.task_id)
}

// optional .firmament.TaskKillMessage.TaskKillReason reason = 2;
void TaskKillMessage::clear_reason() {
  reason_ = 0;
}
::firmament::TaskKillMessage_TaskKillReason TaskKillMessage::reason() const {
  // @@protoc_insertion_point(field_get:firmament.TaskKillMessage.reason)
  return static_cast< ::firmament::TaskKillMessage_TaskKillReason >(reason_);
}
void TaskKillMessage::set_reason(::firmament::TaskKillMessage_TaskKillReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskKillMessage.reason)
}

inline const TaskKillMessage* TaskKillMessage::internal_default_instance() {
  return &TaskKillMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
