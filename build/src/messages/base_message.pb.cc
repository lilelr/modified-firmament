// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/base_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages/base_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* BaseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2fbase_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messages_2fbase_5fmessage_2eproto() {
  protobuf_AddDesc_messages_2fbase_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages/base_message.proto");
  GOOGLE_CHECK(file != NULL);
  BaseMessage_descriptor_ = file->message_type(0);
  static const int BaseMessage_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, registration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, task_heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, task_spawn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, task_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, task_info_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, task_info_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, task_delegation_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, task_delegation_response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, task_kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, task_final_report_),
  };
  BaseMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BaseMessage_descriptor_,
      BaseMessage::internal_default_instance(),
      BaseMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(BaseMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseMessage, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2fbase_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BaseMessage_descriptor_, BaseMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2fbase_5fmessage_2eproto() {
  BaseMessage_default_instance_.Shutdown();
  delete BaseMessage_reflection_;
}

void protobuf_InitDefaults_messages_2fbase_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::firmament::protobuf_InitDefaults_messages_2ftest_5fmessage_2eproto();
  ::firmament::protobuf_InitDefaults_messages_2fheartbeat_5fmessage_2eproto();
  ::firmament::protobuf_InitDefaults_messages_2fregistration_5fmessage_2eproto();
  ::firmament::protobuf_InitDefaults_messages_2ftask_5fheartbeat_5fmessage_2eproto();
  ::firmament::protobuf_InitDefaults_messages_2ftask_5fspawn_5fmessage_2eproto();
  ::firmament::protobuf_InitDefaults_messages_2ftask_5fstate_5fmessage_2eproto();
  ::firmament::protobuf_InitDefaults_messages_2ftask_5finfo_5fmessage_2eproto();
  ::firmament::protobuf_InitDefaults_messages_2ftask_5fdelegation_5fmessage_2eproto();
  ::firmament::protobuf_InitDefaults_messages_2ftask_5fkill_5fmessage_2eproto();
  ::firmament::protobuf_InitDefaults_base_2ftask_5ffinal_5freport_2eproto();
  BaseMessage_default_instance_.DefaultConstruct();
  BaseMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_messages_2fbase_5fmessage_2eproto_once_);
void protobuf_InitDefaults_messages_2fbase_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_messages_2fbase_5fmessage_2eproto_once_,
                 &protobuf_InitDefaults_messages_2fbase_5fmessage_2eproto_impl);
}
void protobuf_AddDesc_messages_2fbase_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_messages_2fbase_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033messages/base_message.proto\022\tfirmament"
    "\032\033messages/test_message.proto\032 messages/"
    "heartbeat_message.proto\032#messages/regist"
    "ration_message.proto\032%messages/task_hear"
    "tbeat_message.proto\032!messages/task_spawn"
    "_message.proto\032!messages/task_state_mess"
    "age.proto\032 messages/task_info_message.pr"
    "oto\032&messages/task_delegation_message.pr"
    "oto\032 messages/task_kill_message.proto\032\034b"
    "ase/task_final_report.proto\"\256\005\n\013BaseMess"
    "age\022$\n\004test\030\001 \001(\0132\026.firmament.TestMessag"
    "e\022.\n\theartbeat\030\002 \001(\0132\033.firmament.Heartbe"
    "atMessage\0224\n\014registration\030\003 \001(\0132\036.firmam"
    "ent.RegistrationMessage\0227\n\016task_heartbea"
    "t\030\004 \001(\0132\037.firmament.TaskHeartbeatMessage"
    "\022/\n\ntask_spawn\030\005 \001(\0132\033.firmament.TaskSpa"
    "wnMessage\022/\n\ntask_state\030\006 \001(\0132\033.firmamen"
    "t.TaskStateMessage\022<\n\021task_info_request\030"
    "\007 \001(\0132!.firmament.TaskInfoRequestMessage"
    "\022>\n\022task_info_response\030\010 \001(\0132\".firmament"
    ".TaskInfoResponseMessage\022H\n\027task_delegat"
    "ion_request\030\t \001(\0132\'.firmament.TaskDelega"
    "tionRequestMessage\022J\n\030task_delegation_re"
    "sponse\030\n \001(\0132(.firmament.TaskDelegationR"
    "esponseMessage\022-\n\ttask_kill\030\013 \001(\0132\032.firm"
    "ament.TaskKillMessage\0225\n\021task_final_repo"
    "rt\030\014 \001(\0132\032.firmament.TaskFinalReportb\006pr"
    "oto3", 1084);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages/base_message.proto", &protobuf_RegisterTypes);
  ::firmament::protobuf_AddDesc_messages_2ftest_5fmessage_2eproto();
  ::firmament::protobuf_AddDesc_messages_2fheartbeat_5fmessage_2eproto();
  ::firmament::protobuf_AddDesc_messages_2fregistration_5fmessage_2eproto();
  ::firmament::protobuf_AddDesc_messages_2ftask_5fheartbeat_5fmessage_2eproto();
  ::firmament::protobuf_AddDesc_messages_2ftask_5fspawn_5fmessage_2eproto();
  ::firmament::protobuf_AddDesc_messages_2ftask_5fstate_5fmessage_2eproto();
  ::firmament::protobuf_AddDesc_messages_2ftask_5finfo_5fmessage_2eproto();
  ::firmament::protobuf_AddDesc_messages_2ftask_5fdelegation_5fmessage_2eproto();
  ::firmament::protobuf_AddDesc_messages_2ftask_5fkill_5fmessage_2eproto();
  ::firmament::protobuf_AddDesc_base_2ftask_5ffinal_5freport_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2fbase_5fmessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messages_2fbase_5fmessage_2eproto_once_);
void protobuf_AddDesc_messages_2fbase_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messages_2fbase_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_messages_2fbase_5fmessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2fbase_5fmessage_2eproto {
  StaticDescriptorInitializer_messages_2fbase_5fmessage_2eproto() {
    protobuf_AddDesc_messages_2fbase_5fmessage_2eproto();
  }
} static_descriptor_initializer_messages_2fbase_5fmessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseMessage::kTestFieldNumber;
const int BaseMessage::kHeartbeatFieldNumber;
const int BaseMessage::kRegistrationFieldNumber;
const int BaseMessage::kTaskHeartbeatFieldNumber;
const int BaseMessage::kTaskSpawnFieldNumber;
const int BaseMessage::kTaskStateFieldNumber;
const int BaseMessage::kTaskInfoRequestFieldNumber;
const int BaseMessage::kTaskInfoResponseFieldNumber;
const int BaseMessage::kTaskDelegationRequestFieldNumber;
const int BaseMessage::kTaskDelegationResponseFieldNumber;
const int BaseMessage::kTaskKillFieldNumber;
const int BaseMessage::kTaskFinalReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseMessage::BaseMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messages_2fbase_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.BaseMessage)
}

void BaseMessage::InitAsDefaultInstance() {
  test_ = const_cast< ::firmament::TestMessage*>(
      ::firmament::TestMessage::internal_default_instance());
  heartbeat_ = const_cast< ::firmament::HeartbeatMessage*>(
      ::firmament::HeartbeatMessage::internal_default_instance());
  registration_ = const_cast< ::firmament::RegistrationMessage*>(
      ::firmament::RegistrationMessage::internal_default_instance());
  task_heartbeat_ = const_cast< ::firmament::TaskHeartbeatMessage*>(
      ::firmament::TaskHeartbeatMessage::internal_default_instance());
  task_spawn_ = const_cast< ::firmament::TaskSpawnMessage*>(
      ::firmament::TaskSpawnMessage::internal_default_instance());
  task_state_ = const_cast< ::firmament::TaskStateMessage*>(
      ::firmament::TaskStateMessage::internal_default_instance());
  task_info_request_ = const_cast< ::firmament::TaskInfoRequestMessage*>(
      ::firmament::TaskInfoRequestMessage::internal_default_instance());
  task_info_response_ = const_cast< ::firmament::TaskInfoResponseMessage*>(
      ::firmament::TaskInfoResponseMessage::internal_default_instance());
  task_delegation_request_ = const_cast< ::firmament::TaskDelegationRequestMessage*>(
      ::firmament::TaskDelegationRequestMessage::internal_default_instance());
  task_delegation_response_ = const_cast< ::firmament::TaskDelegationResponseMessage*>(
      ::firmament::TaskDelegationResponseMessage::internal_default_instance());
  task_kill_ = const_cast< ::firmament::TaskKillMessage*>(
      ::firmament::TaskKillMessage::internal_default_instance());
  task_final_report_ = const_cast< ::firmament::TaskFinalReport*>(
      ::firmament::TaskFinalReport::internal_default_instance());
}

BaseMessage::BaseMessage(const BaseMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.BaseMessage)
}

void BaseMessage::SharedCtor() {
  test_ = NULL;
  heartbeat_ = NULL;
  registration_ = NULL;
  task_heartbeat_ = NULL;
  task_spawn_ = NULL;
  task_state_ = NULL;
  task_info_request_ = NULL;
  task_info_response_ = NULL;
  task_delegation_request_ = NULL;
  task_delegation_response_ = NULL;
  task_kill_ = NULL;
  task_final_report_ = NULL;
  _cached_size_ = 0;
}

BaseMessage::~BaseMessage() {
  // @@protoc_insertion_point(destructor:firmament.BaseMessage)
  SharedDtor();
}

void BaseMessage::SharedDtor() {
  if (this != &BaseMessage_default_instance_.get()) {
    delete test_;
    delete heartbeat_;
    delete registration_;
    delete task_heartbeat_;
    delete task_spawn_;
    delete task_state_;
    delete task_info_request_;
    delete task_info_response_;
    delete task_delegation_request_;
    delete task_delegation_response_;
    delete task_kill_;
    delete task_final_report_;
  }
}

void BaseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseMessage_descriptor_;
}

const BaseMessage& BaseMessage::default_instance() {
  protobuf_InitDefaults_messages_2fbase_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BaseMessage> BaseMessage_default_instance_;

BaseMessage* BaseMessage::New(::google::protobuf::Arena* arena) const {
  BaseMessage* n = new BaseMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.BaseMessage)
  if (GetArenaNoVirtual() == NULL && test_ != NULL) delete test_;
  test_ = NULL;
  if (GetArenaNoVirtual() == NULL && heartbeat_ != NULL) delete heartbeat_;
  heartbeat_ = NULL;
  if (GetArenaNoVirtual() == NULL && registration_ != NULL) delete registration_;
  registration_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_heartbeat_ != NULL) delete task_heartbeat_;
  task_heartbeat_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_spawn_ != NULL) delete task_spawn_;
  task_spawn_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_state_ != NULL) delete task_state_;
  task_state_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_info_request_ != NULL) delete task_info_request_;
  task_info_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_info_response_ != NULL) delete task_info_response_;
  task_info_response_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_delegation_request_ != NULL) delete task_delegation_request_;
  task_delegation_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_delegation_response_ != NULL) delete task_delegation_response_;
  task_delegation_response_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_kill_ != NULL) delete task_kill_;
  task_kill_ = NULL;
  if (GetArenaNoVirtual() == NULL && task_final_report_ != NULL) delete task_final_report_;
  task_final_report_ = NULL;
}

bool BaseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.BaseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .firmament.TestMessage test = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_heartbeat;
        break;
      }

      // optional .firmament.HeartbeatMessage heartbeat = 2;
      case 2: {
        if (tag == 18) {
         parse_heartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_registration;
        break;
      }

      // optional .firmament.RegistrationMessage registration = 3;
      case 3: {
        if (tag == 26) {
         parse_registration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_registration()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_task_heartbeat;
        break;
      }

      // optional .firmament.TaskHeartbeatMessage task_heartbeat = 4;
      case 4: {
        if (tag == 34) {
         parse_task_heartbeat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_heartbeat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_task_spawn;
        break;
      }

      // optional .firmament.TaskSpawnMessage task_spawn = 5;
      case 5: {
        if (tag == 42) {
         parse_task_spawn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_spawn()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_task_state;
        break;
      }

      // optional .firmament.TaskStateMessage task_state = 6;
      case 6: {
        if (tag == 50) {
         parse_task_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_state()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_task_info_request;
        break;
      }

      // optional .firmament.TaskInfoRequestMessage task_info_request = 7;
      case 7: {
        if (tag == 58) {
         parse_task_info_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_info_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_task_info_response;
        break;
      }

      // optional .firmament.TaskInfoResponseMessage task_info_response = 8;
      case 8: {
        if (tag == 66) {
         parse_task_info_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_info_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_task_delegation_request;
        break;
      }

      // optional .firmament.TaskDelegationRequestMessage task_delegation_request = 9;
      case 9: {
        if (tag == 74) {
         parse_task_delegation_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_delegation_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_task_delegation_response;
        break;
      }

      // optional .firmament.TaskDelegationResponseMessage task_delegation_response = 10;
      case 10: {
        if (tag == 82) {
         parse_task_delegation_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_delegation_response()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_task_kill;
        break;
      }

      // optional .firmament.TaskKillMessage task_kill = 11;
      case 11: {
        if (tag == 90) {
         parse_task_kill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_kill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_task_final_report;
        break;
      }

      // optional .firmament.TaskFinalReport task_final_report = 12;
      case 12: {
        if (tag == 98) {
         parse_task_final_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_final_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.BaseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.BaseMessage)
  return false;
#undef DO_
}

void BaseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.BaseMessage)
  // optional .firmament.TestMessage test = 1;
  if (this->has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->test_, output);
  }

  // optional .firmament.HeartbeatMessage heartbeat = 2;
  if (this->has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->heartbeat_, output);
  }

  // optional .firmament.RegistrationMessage registration = 3;
  if (this->has_registration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->registration_, output);
  }

  // optional .firmament.TaskHeartbeatMessage task_heartbeat = 4;
  if (this->has_task_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->task_heartbeat_, output);
  }

  // optional .firmament.TaskSpawnMessage task_spawn = 5;
  if (this->has_task_spawn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->task_spawn_, output);
  }

  // optional .firmament.TaskStateMessage task_state = 6;
  if (this->has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->task_state_, output);
  }

  // optional .firmament.TaskInfoRequestMessage task_info_request = 7;
  if (this->has_task_info_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->task_info_request_, output);
  }

  // optional .firmament.TaskInfoResponseMessage task_info_response = 8;
  if (this->has_task_info_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->task_info_response_, output);
  }

  // optional .firmament.TaskDelegationRequestMessage task_delegation_request = 9;
  if (this->has_task_delegation_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->task_delegation_request_, output);
  }

  // optional .firmament.TaskDelegationResponseMessage task_delegation_response = 10;
  if (this->has_task_delegation_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->task_delegation_response_, output);
  }

  // optional .firmament.TaskKillMessage task_kill = 11;
  if (this->has_task_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->task_kill_, output);
  }

  // optional .firmament.TaskFinalReport task_final_report = 12;
  if (this->has_task_final_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->task_final_report_, output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.BaseMessage)
}

::google::protobuf::uint8* BaseMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.BaseMessage)
  // optional .firmament.TestMessage test = 1;
  if (this->has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->test_, false, target);
  }

  // optional .firmament.HeartbeatMessage heartbeat = 2;
  if (this->has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->heartbeat_, false, target);
  }

  // optional .firmament.RegistrationMessage registration = 3;
  if (this->has_registration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->registration_, false, target);
  }

  // optional .firmament.TaskHeartbeatMessage task_heartbeat = 4;
  if (this->has_task_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->task_heartbeat_, false, target);
  }

  // optional .firmament.TaskSpawnMessage task_spawn = 5;
  if (this->has_task_spawn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->task_spawn_, false, target);
  }

  // optional .firmament.TaskStateMessage task_state = 6;
  if (this->has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->task_state_, false, target);
  }

  // optional .firmament.TaskInfoRequestMessage task_info_request = 7;
  if (this->has_task_info_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->task_info_request_, false, target);
  }

  // optional .firmament.TaskInfoResponseMessage task_info_response = 8;
  if (this->has_task_info_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->task_info_response_, false, target);
  }

  // optional .firmament.TaskDelegationRequestMessage task_delegation_request = 9;
  if (this->has_task_delegation_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->task_delegation_request_, false, target);
  }

  // optional .firmament.TaskDelegationResponseMessage task_delegation_response = 10;
  if (this->has_task_delegation_response()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->task_delegation_response_, false, target);
  }

  // optional .firmament.TaskKillMessage task_kill = 11;
  if (this->has_task_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->task_kill_, false, target);
  }

  // optional .firmament.TaskFinalReport task_final_report = 12;
  if (this->has_task_final_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->task_final_report_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.BaseMessage)
  return target;
}

size_t BaseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.BaseMessage)
  size_t total_size = 0;

  // optional .firmament.TestMessage test = 1;
  if (this->has_test()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->test_);
  }

  // optional .firmament.HeartbeatMessage heartbeat = 2;
  if (this->has_heartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->heartbeat_);
  }

  // optional .firmament.RegistrationMessage registration = 3;
  if (this->has_registration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->registration_);
  }

  // optional .firmament.TaskHeartbeatMessage task_heartbeat = 4;
  if (this->has_task_heartbeat()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_heartbeat_);
  }

  // optional .firmament.TaskSpawnMessage task_spawn = 5;
  if (this->has_task_spawn()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_spawn_);
  }

  // optional .firmament.TaskStateMessage task_state = 6;
  if (this->has_task_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_state_);
  }

  // optional .firmament.TaskInfoRequestMessage task_info_request = 7;
  if (this->has_task_info_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_info_request_);
  }

  // optional .firmament.TaskInfoResponseMessage task_info_response = 8;
  if (this->has_task_info_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_info_response_);
  }

  // optional .firmament.TaskDelegationRequestMessage task_delegation_request = 9;
  if (this->has_task_delegation_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_delegation_request_);
  }

  // optional .firmament.TaskDelegationResponseMessage task_delegation_response = 10;
  if (this->has_task_delegation_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_delegation_response_);
  }

  // optional .firmament.TaskKillMessage task_kill = 11;
  if (this->has_task_kill()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_kill_);
  }

  // optional .firmament.TaskFinalReport task_final_report = 12;
  if (this->has_task_final_report()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_final_report_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.BaseMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BaseMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.BaseMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.BaseMessage)
    UnsafeMergeFrom(*source);
  }
}

void BaseMessage::MergeFrom(const BaseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.BaseMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BaseMessage::UnsafeMergeFrom(const BaseMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_test()) {
    mutable_test()->::firmament::TestMessage::MergeFrom(from.test());
  }
  if (from.has_heartbeat()) {
    mutable_heartbeat()->::firmament::HeartbeatMessage::MergeFrom(from.heartbeat());
  }
  if (from.has_registration()) {
    mutable_registration()->::firmament::RegistrationMessage::MergeFrom(from.registration());
  }
  if (from.has_task_heartbeat()) {
    mutable_task_heartbeat()->::firmament::TaskHeartbeatMessage::MergeFrom(from.task_heartbeat());
  }
  if (from.has_task_spawn()) {
    mutable_task_spawn()->::firmament::TaskSpawnMessage::MergeFrom(from.task_spawn());
  }
  if (from.has_task_state()) {
    mutable_task_state()->::firmament::TaskStateMessage::MergeFrom(from.task_state());
  }
  if (from.has_task_info_request()) {
    mutable_task_info_request()->::firmament::TaskInfoRequestMessage::MergeFrom(from.task_info_request());
  }
  if (from.has_task_info_response()) {
    mutable_task_info_response()->::firmament::TaskInfoResponseMessage::MergeFrom(from.task_info_response());
  }
  if (from.has_task_delegation_request()) {
    mutable_task_delegation_request()->::firmament::TaskDelegationRequestMessage::MergeFrom(from.task_delegation_request());
  }
  if (from.has_task_delegation_response()) {
    mutable_task_delegation_response()->::firmament::TaskDelegationResponseMessage::MergeFrom(from.task_delegation_response());
  }
  if (from.has_task_kill()) {
    mutable_task_kill()->::firmament::TaskKillMessage::MergeFrom(from.task_kill());
  }
  if (from.has_task_final_report()) {
    mutable_task_final_report()->::firmament::TaskFinalReport::MergeFrom(from.task_final_report());
  }
}

void BaseMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.BaseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseMessage::CopyFrom(const BaseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.BaseMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BaseMessage::IsInitialized() const {

  return true;
}

void BaseMessage::Swap(BaseMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseMessage::InternalSwap(BaseMessage* other) {
  std::swap(test_, other->test_);
  std::swap(heartbeat_, other->heartbeat_);
  std::swap(registration_, other->registration_);
  std::swap(task_heartbeat_, other->task_heartbeat_);
  std::swap(task_spawn_, other->task_spawn_);
  std::swap(task_state_, other->task_state_);
  std::swap(task_info_request_, other->task_info_request_);
  std::swap(task_info_response_, other->task_info_response_);
  std::swap(task_delegation_request_, other->task_delegation_request_);
  std::swap(task_delegation_response_, other->task_delegation_response_);
  std::swap(task_kill_, other->task_kill_);
  std::swap(task_final_report_, other->task_final_report_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseMessage_descriptor_;
  metadata.reflection = BaseMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseMessage

// optional .firmament.TestMessage test = 1;
bool BaseMessage::has_test() const {
  return this != internal_default_instance() && test_ != NULL;
}
void BaseMessage::clear_test() {
  if (GetArenaNoVirtual() == NULL && test_ != NULL) delete test_;
  test_ = NULL;
}
const ::firmament::TestMessage& BaseMessage::test() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.test)
  return test_ != NULL ? *test_
                         : *::firmament::TestMessage::internal_default_instance();
}
::firmament::TestMessage* BaseMessage::mutable_test() {
  
  if (test_ == NULL) {
    test_ = new ::firmament::TestMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.test)
  return test_;
}
::firmament::TestMessage* BaseMessage::release_test() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.test)
  
  ::firmament::TestMessage* temp = test_;
  test_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_test(::firmament::TestMessage* test) {
  delete test_;
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.test)
}

// optional .firmament.HeartbeatMessage heartbeat = 2;
bool BaseMessage::has_heartbeat() const {
  return this != internal_default_instance() && heartbeat_ != NULL;
}
void BaseMessage::clear_heartbeat() {
  if (GetArenaNoVirtual() == NULL && heartbeat_ != NULL) delete heartbeat_;
  heartbeat_ = NULL;
}
const ::firmament::HeartbeatMessage& BaseMessage::heartbeat() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.heartbeat)
  return heartbeat_ != NULL ? *heartbeat_
                         : *::firmament::HeartbeatMessage::internal_default_instance();
}
::firmament::HeartbeatMessage* BaseMessage::mutable_heartbeat() {
  
  if (heartbeat_ == NULL) {
    heartbeat_ = new ::firmament::HeartbeatMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.heartbeat)
  return heartbeat_;
}
::firmament::HeartbeatMessage* BaseMessage::release_heartbeat() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.heartbeat)
  
  ::firmament::HeartbeatMessage* temp = heartbeat_;
  heartbeat_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_heartbeat(::firmament::HeartbeatMessage* heartbeat) {
  delete heartbeat_;
  heartbeat_ = heartbeat;
  if (heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.heartbeat)
}

// optional .firmament.RegistrationMessage registration = 3;
bool BaseMessage::has_registration() const {
  return this != internal_default_instance() && registration_ != NULL;
}
void BaseMessage::clear_registration() {
  if (GetArenaNoVirtual() == NULL && registration_ != NULL) delete registration_;
  registration_ = NULL;
}
const ::firmament::RegistrationMessage& BaseMessage::registration() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.registration)
  return registration_ != NULL ? *registration_
                         : *::firmament::RegistrationMessage::internal_default_instance();
}
::firmament::RegistrationMessage* BaseMessage::mutable_registration() {
  
  if (registration_ == NULL) {
    registration_ = new ::firmament::RegistrationMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.registration)
  return registration_;
}
::firmament::RegistrationMessage* BaseMessage::release_registration() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.registration)
  
  ::firmament::RegistrationMessage* temp = registration_;
  registration_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_registration(::firmament::RegistrationMessage* registration) {
  delete registration_;
  registration_ = registration;
  if (registration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.registration)
}

// optional .firmament.TaskHeartbeatMessage task_heartbeat = 4;
bool BaseMessage::has_task_heartbeat() const {
  return this != internal_default_instance() && task_heartbeat_ != NULL;
}
void BaseMessage::clear_task_heartbeat() {
  if (GetArenaNoVirtual() == NULL && task_heartbeat_ != NULL) delete task_heartbeat_;
  task_heartbeat_ = NULL;
}
const ::firmament::TaskHeartbeatMessage& BaseMessage::task_heartbeat() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_heartbeat)
  return task_heartbeat_ != NULL ? *task_heartbeat_
                         : *::firmament::TaskHeartbeatMessage::internal_default_instance();
}
::firmament::TaskHeartbeatMessage* BaseMessage::mutable_task_heartbeat() {
  
  if (task_heartbeat_ == NULL) {
    task_heartbeat_ = new ::firmament::TaskHeartbeatMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_heartbeat)
  return task_heartbeat_;
}
::firmament::TaskHeartbeatMessage* BaseMessage::release_task_heartbeat() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_heartbeat)
  
  ::firmament::TaskHeartbeatMessage* temp = task_heartbeat_;
  task_heartbeat_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_task_heartbeat(::firmament::TaskHeartbeatMessage* task_heartbeat) {
  delete task_heartbeat_;
  task_heartbeat_ = task_heartbeat;
  if (task_heartbeat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_heartbeat)
}

// optional .firmament.TaskSpawnMessage task_spawn = 5;
bool BaseMessage::has_task_spawn() const {
  return this != internal_default_instance() && task_spawn_ != NULL;
}
void BaseMessage::clear_task_spawn() {
  if (GetArenaNoVirtual() == NULL && task_spawn_ != NULL) delete task_spawn_;
  task_spawn_ = NULL;
}
const ::firmament::TaskSpawnMessage& BaseMessage::task_spawn() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_spawn)
  return task_spawn_ != NULL ? *task_spawn_
                         : *::firmament::TaskSpawnMessage::internal_default_instance();
}
::firmament::TaskSpawnMessage* BaseMessage::mutable_task_spawn() {
  
  if (task_spawn_ == NULL) {
    task_spawn_ = new ::firmament::TaskSpawnMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_spawn)
  return task_spawn_;
}
::firmament::TaskSpawnMessage* BaseMessage::release_task_spawn() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_spawn)
  
  ::firmament::TaskSpawnMessage* temp = task_spawn_;
  task_spawn_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_task_spawn(::firmament::TaskSpawnMessage* task_spawn) {
  delete task_spawn_;
  task_spawn_ = task_spawn;
  if (task_spawn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_spawn)
}

// optional .firmament.TaskStateMessage task_state = 6;
bool BaseMessage::has_task_state() const {
  return this != internal_default_instance() && task_state_ != NULL;
}
void BaseMessage::clear_task_state() {
  if (GetArenaNoVirtual() == NULL && task_state_ != NULL) delete task_state_;
  task_state_ = NULL;
}
const ::firmament::TaskStateMessage& BaseMessage::task_state() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_state)
  return task_state_ != NULL ? *task_state_
                         : *::firmament::TaskStateMessage::internal_default_instance();
}
::firmament::TaskStateMessage* BaseMessage::mutable_task_state() {
  
  if (task_state_ == NULL) {
    task_state_ = new ::firmament::TaskStateMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_state)
  return task_state_;
}
::firmament::TaskStateMessage* BaseMessage::release_task_state() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_state)
  
  ::firmament::TaskStateMessage* temp = task_state_;
  task_state_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_task_state(::firmament::TaskStateMessage* task_state) {
  delete task_state_;
  task_state_ = task_state;
  if (task_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_state)
}

// optional .firmament.TaskInfoRequestMessage task_info_request = 7;
bool BaseMessage::has_task_info_request() const {
  return this != internal_default_instance() && task_info_request_ != NULL;
}
void BaseMessage::clear_task_info_request() {
  if (GetArenaNoVirtual() == NULL && task_info_request_ != NULL) delete task_info_request_;
  task_info_request_ = NULL;
}
const ::firmament::TaskInfoRequestMessage& BaseMessage::task_info_request() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_info_request)
  return task_info_request_ != NULL ? *task_info_request_
                         : *::firmament::TaskInfoRequestMessage::internal_default_instance();
}
::firmament::TaskInfoRequestMessage* BaseMessage::mutable_task_info_request() {
  
  if (task_info_request_ == NULL) {
    task_info_request_ = new ::firmament::TaskInfoRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_info_request)
  return task_info_request_;
}
::firmament::TaskInfoRequestMessage* BaseMessage::release_task_info_request() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_info_request)
  
  ::firmament::TaskInfoRequestMessage* temp = task_info_request_;
  task_info_request_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_task_info_request(::firmament::TaskInfoRequestMessage* task_info_request) {
  delete task_info_request_;
  task_info_request_ = task_info_request;
  if (task_info_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_info_request)
}

// optional .firmament.TaskInfoResponseMessage task_info_response = 8;
bool BaseMessage::has_task_info_response() const {
  return this != internal_default_instance() && task_info_response_ != NULL;
}
void BaseMessage::clear_task_info_response() {
  if (GetArenaNoVirtual() == NULL && task_info_response_ != NULL) delete task_info_response_;
  task_info_response_ = NULL;
}
const ::firmament::TaskInfoResponseMessage& BaseMessage::task_info_response() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_info_response)
  return task_info_response_ != NULL ? *task_info_response_
                         : *::firmament::TaskInfoResponseMessage::internal_default_instance();
}
::firmament::TaskInfoResponseMessage* BaseMessage::mutable_task_info_response() {
  
  if (task_info_response_ == NULL) {
    task_info_response_ = new ::firmament::TaskInfoResponseMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_info_response)
  return task_info_response_;
}
::firmament::TaskInfoResponseMessage* BaseMessage::release_task_info_response() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_info_response)
  
  ::firmament::TaskInfoResponseMessage* temp = task_info_response_;
  task_info_response_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_task_info_response(::firmament::TaskInfoResponseMessage* task_info_response) {
  delete task_info_response_;
  task_info_response_ = task_info_response;
  if (task_info_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_info_response)
}

// optional .firmament.TaskDelegationRequestMessage task_delegation_request = 9;
bool BaseMessage::has_task_delegation_request() const {
  return this != internal_default_instance() && task_delegation_request_ != NULL;
}
void BaseMessage::clear_task_delegation_request() {
  if (GetArenaNoVirtual() == NULL && task_delegation_request_ != NULL) delete task_delegation_request_;
  task_delegation_request_ = NULL;
}
const ::firmament::TaskDelegationRequestMessage& BaseMessage::task_delegation_request() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_delegation_request)
  return task_delegation_request_ != NULL ? *task_delegation_request_
                         : *::firmament::TaskDelegationRequestMessage::internal_default_instance();
}
::firmament::TaskDelegationRequestMessage* BaseMessage::mutable_task_delegation_request() {
  
  if (task_delegation_request_ == NULL) {
    task_delegation_request_ = new ::firmament::TaskDelegationRequestMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_delegation_request)
  return task_delegation_request_;
}
::firmament::TaskDelegationRequestMessage* BaseMessage::release_task_delegation_request() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_delegation_request)
  
  ::firmament::TaskDelegationRequestMessage* temp = task_delegation_request_;
  task_delegation_request_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_task_delegation_request(::firmament::TaskDelegationRequestMessage* task_delegation_request) {
  delete task_delegation_request_;
  task_delegation_request_ = task_delegation_request;
  if (task_delegation_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_delegation_request)
}

// optional .firmament.TaskDelegationResponseMessage task_delegation_response = 10;
bool BaseMessage::has_task_delegation_response() const {
  return this != internal_default_instance() && task_delegation_response_ != NULL;
}
void BaseMessage::clear_task_delegation_response() {
  if (GetArenaNoVirtual() == NULL && task_delegation_response_ != NULL) delete task_delegation_response_;
  task_delegation_response_ = NULL;
}
const ::firmament::TaskDelegationResponseMessage& BaseMessage::task_delegation_response() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_delegation_response)
  return task_delegation_response_ != NULL ? *task_delegation_response_
                         : *::firmament::TaskDelegationResponseMessage::internal_default_instance();
}
::firmament::TaskDelegationResponseMessage* BaseMessage::mutable_task_delegation_response() {
  
  if (task_delegation_response_ == NULL) {
    task_delegation_response_ = new ::firmament::TaskDelegationResponseMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_delegation_response)
  return task_delegation_response_;
}
::firmament::TaskDelegationResponseMessage* BaseMessage::release_task_delegation_response() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_delegation_response)
  
  ::firmament::TaskDelegationResponseMessage* temp = task_delegation_response_;
  task_delegation_response_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_task_delegation_response(::firmament::TaskDelegationResponseMessage* task_delegation_response) {
  delete task_delegation_response_;
  task_delegation_response_ = task_delegation_response;
  if (task_delegation_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_delegation_response)
}

// optional .firmament.TaskKillMessage task_kill = 11;
bool BaseMessage::has_task_kill() const {
  return this != internal_default_instance() && task_kill_ != NULL;
}
void BaseMessage::clear_task_kill() {
  if (GetArenaNoVirtual() == NULL && task_kill_ != NULL) delete task_kill_;
  task_kill_ = NULL;
}
const ::firmament::TaskKillMessage& BaseMessage::task_kill() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_kill)
  return task_kill_ != NULL ? *task_kill_
                         : *::firmament::TaskKillMessage::internal_default_instance();
}
::firmament::TaskKillMessage* BaseMessage::mutable_task_kill() {
  
  if (task_kill_ == NULL) {
    task_kill_ = new ::firmament::TaskKillMessage;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_kill)
  return task_kill_;
}
::firmament::TaskKillMessage* BaseMessage::release_task_kill() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_kill)
  
  ::firmament::TaskKillMessage* temp = task_kill_;
  task_kill_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_task_kill(::firmament::TaskKillMessage* task_kill) {
  delete task_kill_;
  task_kill_ = task_kill;
  if (task_kill) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_kill)
}

// optional .firmament.TaskFinalReport task_final_report = 12;
bool BaseMessage::has_task_final_report() const {
  return this != internal_default_instance() && task_final_report_ != NULL;
}
void BaseMessage::clear_task_final_report() {
  if (GetArenaNoVirtual() == NULL && task_final_report_ != NULL) delete task_final_report_;
  task_final_report_ = NULL;
}
const ::firmament::TaskFinalReport& BaseMessage::task_final_report() const {
  // @@protoc_insertion_point(field_get:firmament.BaseMessage.task_final_report)
  return task_final_report_ != NULL ? *task_final_report_
                         : *::firmament::TaskFinalReport::internal_default_instance();
}
::firmament::TaskFinalReport* BaseMessage::mutable_task_final_report() {
  
  if (task_final_report_ == NULL) {
    task_final_report_ = new ::firmament::TaskFinalReport;
  }
  // @@protoc_insertion_point(field_mutable:firmament.BaseMessage.task_final_report)
  return task_final_report_;
}
::firmament::TaskFinalReport* BaseMessage::release_task_final_report() {
  // @@protoc_insertion_point(field_release:firmament.BaseMessage.task_final_report)
  
  ::firmament::TaskFinalReport* temp = task_final_report_;
  task_final_report_ = NULL;
  return temp;
}
void BaseMessage::set_allocated_task_final_report(::firmament::TaskFinalReport* task_final_report) {
  delete task_final_report_;
  task_final_report_ = task_final_report;
  if (task_final_report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.BaseMessage.task_final_report)
}

inline const BaseMessage* BaseMessage::internal_default_instance() {
  return &BaseMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
