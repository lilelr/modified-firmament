// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/task_state_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages/task_state_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* TaskStateMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskStateMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2ftask_5fstate_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messages_2ftask_5fstate_5fmessage_2eproto() {
  protobuf_AddDesc_messages_2ftask_5fstate_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages/task_state_message.proto");
  GOOGLE_CHECK(file != NULL);
  TaskStateMessage_descriptor_ = file->message_type(0);
  static const int TaskStateMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStateMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStateMessage, new_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStateMessage, report_),
  };
  TaskStateMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskStateMessage_descriptor_,
      TaskStateMessage::internal_default_instance(),
      TaskStateMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskStateMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStateMessage, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2ftask_5fstate_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskStateMessage_descriptor_, TaskStateMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2ftask_5fstate_5fmessage_2eproto() {
  TaskStateMessage_default_instance_.Shutdown();
  delete TaskStateMessage_reflection_;
}

void protobuf_InitDefaults_messages_2ftask_5fstate_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::firmament::protobuf_InitDefaults_base_2ftask_5fdesc_2eproto();
  ::firmament::protobuf_InitDefaults_base_2ftask_5ffinal_5freport_2eproto();
  TaskStateMessage_default_instance_.DefaultConstruct();
  TaskStateMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_messages_2ftask_5fstate_5fmessage_2eproto_once_);
void protobuf_InitDefaults_messages_2ftask_5fstate_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_messages_2ftask_5fstate_5fmessage_2eproto_once_,
                 &protobuf_InitDefaults_messages_2ftask_5fstate_5fmessage_2eproto_impl);
}
void protobuf_AddDesc_messages_2ftask_5fstate_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_messages_2ftask_5fstate_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!messages/task_state_message.proto\022\tfir"
    "mament\032\024base/task_desc.proto\032\034base/task_"
    "final_report.proto\"\202\001\n\020TaskStateMessage\022"
    "\n\n\002id\030\001 \001(\004\0226\n\tnew_state\030\002 \001(\0162#.firmame"
    "nt.TaskDescriptor.TaskState\022*\n\006report\030\003 "
    "\001(\0132\032.firmament.TaskFinalReportb\006proto3", 239);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages/task_state_message.proto", &protobuf_RegisterTypes);
  ::firmament::protobuf_AddDesc_base_2ftask_5fdesc_2eproto();
  ::firmament::protobuf_AddDesc_base_2ftask_5ffinal_5freport_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2ftask_5fstate_5fmessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messages_2ftask_5fstate_5fmessage_2eproto_once_);
void protobuf_AddDesc_messages_2ftask_5fstate_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messages_2ftask_5fstate_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_messages_2ftask_5fstate_5fmessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2ftask_5fstate_5fmessage_2eproto {
  StaticDescriptorInitializer_messages_2ftask_5fstate_5fmessage_2eproto() {
    protobuf_AddDesc_messages_2ftask_5fstate_5fmessage_2eproto();
  }
} static_descriptor_initializer_messages_2ftask_5fstate_5fmessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskStateMessage::kIdFieldNumber;
const int TaskStateMessage::kNewStateFieldNumber;
const int TaskStateMessage::kReportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskStateMessage::TaskStateMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messages_2ftask_5fstate_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.TaskStateMessage)
}

void TaskStateMessage::InitAsDefaultInstance() {
  report_ = const_cast< ::firmament::TaskFinalReport*>(
      ::firmament::TaskFinalReport::internal_default_instance());
}

TaskStateMessage::TaskStateMessage(const TaskStateMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.TaskStateMessage)
}

void TaskStateMessage::SharedCtor() {
  report_ = NULL;
  ::memset(&id_, 0, reinterpret_cast<char*>(&new_state_) -
    reinterpret_cast<char*>(&id_) + sizeof(new_state_));
  _cached_size_ = 0;
}

TaskStateMessage::~TaskStateMessage() {
  // @@protoc_insertion_point(destructor:firmament.TaskStateMessage)
  SharedDtor();
}

void TaskStateMessage::SharedDtor() {
  if (this != &TaskStateMessage_default_instance_.get()) {
    delete report_;
  }
}

void TaskStateMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStateMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStateMessage_descriptor_;
}

const TaskStateMessage& TaskStateMessage::default_instance() {
  protobuf_InitDefaults_messages_2ftask_5fstate_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TaskStateMessage> TaskStateMessage_default_instance_;

TaskStateMessage* TaskStateMessage::New(::google::protobuf::Arena* arena) const {
  TaskStateMessage* n = new TaskStateMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskStateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.TaskStateMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaskStateMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskStateMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, new_state_);
  if (GetArenaNoVirtual() == NULL && report_ != NULL) delete report_;
  report_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool TaskStateMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.TaskStateMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_new_state;
        break;
      }

      // optional .firmament.TaskDescriptor.TaskState new_state = 2;
      case 2: {
        if (tag == 16) {
         parse_new_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_new_state(static_cast< ::firmament::TaskDescriptor_TaskState >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_report;
        break;
      }

      // optional .firmament.TaskFinalReport report = 3;
      case 3: {
        if (tag == 26) {
         parse_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_report()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.TaskStateMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.TaskStateMessage)
  return false;
#undef DO_
}

void TaskStateMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.TaskStateMessage)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .firmament.TaskDescriptor.TaskState new_state = 2;
  if (this->new_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->new_state(), output);
  }

  // optional .firmament.TaskFinalReport report = 3;
  if (this->has_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->report_, output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.TaskStateMessage)
}

::google::protobuf::uint8* TaskStateMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.TaskStateMessage)
  // optional uint64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .firmament.TaskDescriptor.TaskState new_state = 2;
  if (this->new_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->new_state(), target);
  }

  // optional .firmament.TaskFinalReport report = 3;
  if (this->has_report()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->report_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.TaskStateMessage)
  return target;
}

size_t TaskStateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.TaskStateMessage)
  size_t total_size = 0;

  // optional uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  // optional .firmament.TaskDescriptor.TaskState new_state = 2;
  if (this->new_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_state());
  }

  // optional .firmament.TaskFinalReport report = 3;
  if (this->has_report()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->report_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStateMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.TaskStateMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskStateMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskStateMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.TaskStateMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.TaskStateMessage)
    UnsafeMergeFrom(*source);
  }
}

void TaskStateMessage::MergeFrom(const TaskStateMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.TaskStateMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TaskStateMessage::UnsafeMergeFrom(const TaskStateMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.new_state() != 0) {
    set_new_state(from.new_state());
  }
  if (from.has_report()) {
    mutable_report()->::firmament::TaskFinalReport::MergeFrom(from.report());
  }
}

void TaskStateMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.TaskStateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStateMessage::CopyFrom(const TaskStateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.TaskStateMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TaskStateMessage::IsInitialized() const {

  return true;
}

void TaskStateMessage::Swap(TaskStateMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskStateMessage::InternalSwap(TaskStateMessage* other) {
  std::swap(id_, other->id_);
  std::swap(new_state_, other->new_state_);
  std::swap(report_, other->report_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskStateMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskStateMessage_descriptor_;
  metadata.reflection = TaskStateMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskStateMessage

// optional uint64 id = 1;
void TaskStateMessage::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskStateMessage::id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStateMessage.id)
  return id_;
}
void TaskStateMessage::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStateMessage.id)
}

// optional .firmament.TaskDescriptor.TaskState new_state = 2;
void TaskStateMessage::clear_new_state() {
  new_state_ = 0;
}
::firmament::TaskDescriptor_TaskState TaskStateMessage::new_state() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStateMessage.new_state)
  return static_cast< ::firmament::TaskDescriptor_TaskState >(new_state_);
}
void TaskStateMessage::set_new_state(::firmament::TaskDescriptor_TaskState value) {
  
  new_state_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskStateMessage.new_state)
}

// optional .firmament.TaskFinalReport report = 3;
bool TaskStateMessage::has_report() const {
  return this != internal_default_instance() && report_ != NULL;
}
void TaskStateMessage::clear_report() {
  if (GetArenaNoVirtual() == NULL && report_ != NULL) delete report_;
  report_ = NULL;
}
const ::firmament::TaskFinalReport& TaskStateMessage::report() const {
  // @@protoc_insertion_point(field_get:firmament.TaskStateMessage.report)
  return report_ != NULL ? *report_
                         : *::firmament::TaskFinalReport::internal_default_instance();
}
::firmament::TaskFinalReport* TaskStateMessage::mutable_report() {
  
  if (report_ == NULL) {
    report_ = new ::firmament::TaskFinalReport;
  }
  // @@protoc_insertion_point(field_mutable:firmament.TaskStateMessage.report)
  return report_;
}
::firmament::TaskFinalReport* TaskStateMessage::release_report() {
  // @@protoc_insertion_point(field_release:firmament.TaskStateMessage.report)
  
  ::firmament::TaskFinalReport* temp = report_;
  report_ = NULL;
  return temp;
}
void TaskStateMessage::set_allocated_report(::firmament::TaskFinalReport* report) {
  delete report_;
  report_ = report;
  if (report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskStateMessage.report)
}

inline const TaskStateMessage* TaskStateMessage::internal_default_instance() {
  return &TaskStateMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
