// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/task_info_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages/task_info_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* TaskInfoRequestMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskInfoRequestMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskInfoResponseMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskInfoResponseMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2ftask_5finfo_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messages_2ftask_5finfo_5fmessage_2eproto() {
  protobuf_AddDesc_messages_2ftask_5finfo_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages/task_info_message.proto");
  GOOGLE_CHECK(file != NULL);
  TaskInfoRequestMessage_descriptor_ = file->message_type(0);
  static const int TaskInfoRequestMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfoRequestMessage, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfoRequestMessage, requesting_resource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfoRequestMessage, requesting_endpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfoRequestMessage, task_pid_),
  };
  TaskInfoRequestMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskInfoRequestMessage_descriptor_,
      TaskInfoRequestMessage::internal_default_instance(),
      TaskInfoRequestMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskInfoRequestMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfoRequestMessage, _internal_metadata_));
  TaskInfoResponseMessage_descriptor_ = file->message_type(1);
  static const int TaskInfoResponseMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfoResponseMessage, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfoResponseMessage, task_desc_),
  };
  TaskInfoResponseMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskInfoResponseMessage_descriptor_,
      TaskInfoResponseMessage::internal_default_instance(),
      TaskInfoResponseMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskInfoResponseMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfoResponseMessage, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2ftask_5finfo_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskInfoRequestMessage_descriptor_, TaskInfoRequestMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskInfoResponseMessage_descriptor_, TaskInfoResponseMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2ftask_5finfo_5fmessage_2eproto() {
  TaskInfoRequestMessage_default_instance_.Shutdown();
  delete TaskInfoRequestMessage_reflection_;
  TaskInfoResponseMessage_default_instance_.Shutdown();
  delete TaskInfoResponseMessage_reflection_;
}

void protobuf_InitDefaults_messages_2ftask_5finfo_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::firmament::protobuf_InitDefaults_base_2ftask_5fdesc_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  TaskInfoRequestMessage_default_instance_.DefaultConstruct();
  TaskInfoResponseMessage_default_instance_.DefaultConstruct();
  TaskInfoRequestMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  TaskInfoResponseMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_messages_2ftask_5finfo_5fmessage_2eproto_once_);
void protobuf_InitDefaults_messages_2ftask_5finfo_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_messages_2ftask_5finfo_5fmessage_2eproto_once_,
                 &protobuf_InitDefaults_messages_2ftask_5finfo_5fmessage_2eproto_impl);
}
void protobuf_AddDesc_messages_2ftask_5finfo_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_messages_2ftask_5finfo_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n messages/task_info_message.proto\022\tfirm"
    "ament\032\024base/task_desc.proto\"x\n\026TaskInfoR"
    "equestMessage\022\017\n\007task_id\030\001 \001(\004\022\036\n\026reques"
    "ting_resource_id\030\002 \001(\t\022\033\n\023requesting_end"
    "point\030\003 \001(\t\022\020\n\010task_pid\030\004 \001(\r\"X\n\027TaskInf"
    "oResponseMessage\022\017\n\007task_id\030\001 \001(\004\022,\n\ttas"
    "k_desc\030\002 \001(\0132\031.firmament.TaskDescriptorb"
    "\006proto3", 287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages/task_info_message.proto", &protobuf_RegisterTypes);
  ::firmament::protobuf_AddDesc_base_2ftask_5fdesc_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2ftask_5finfo_5fmessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messages_2ftask_5finfo_5fmessage_2eproto_once_);
void protobuf_AddDesc_messages_2ftask_5finfo_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messages_2ftask_5finfo_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_messages_2ftask_5finfo_5fmessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2ftask_5finfo_5fmessage_2eproto {
  StaticDescriptorInitializer_messages_2ftask_5finfo_5fmessage_2eproto() {
    protobuf_AddDesc_messages_2ftask_5finfo_5fmessage_2eproto();
  }
} static_descriptor_initializer_messages_2ftask_5finfo_5fmessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskInfoRequestMessage::kTaskIdFieldNumber;
const int TaskInfoRequestMessage::kRequestingResourceIdFieldNumber;
const int TaskInfoRequestMessage::kRequestingEndpointFieldNumber;
const int TaskInfoRequestMessage::kTaskPidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskInfoRequestMessage::TaskInfoRequestMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messages_2ftask_5finfo_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.TaskInfoRequestMessage)
}

void TaskInfoRequestMessage::InitAsDefaultInstance() {
}

TaskInfoRequestMessage::TaskInfoRequestMessage(const TaskInfoRequestMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.TaskInfoRequestMessage)
}

void TaskInfoRequestMessage::SharedCtor() {
  requesting_resource_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requesting_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&task_id_, 0, reinterpret_cast<char*>(&task_pid_) -
    reinterpret_cast<char*>(&task_id_) + sizeof(task_pid_));
  _cached_size_ = 0;
}

TaskInfoRequestMessage::~TaskInfoRequestMessage() {
  // @@protoc_insertion_point(destructor:firmament.TaskInfoRequestMessage)
  SharedDtor();
}

void TaskInfoRequestMessage::SharedDtor() {
  requesting_resource_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requesting_endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TaskInfoRequestMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfoRequestMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskInfoRequestMessage_descriptor_;
}

const TaskInfoRequestMessage& TaskInfoRequestMessage::default_instance() {
  protobuf_InitDefaults_messages_2ftask_5finfo_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TaskInfoRequestMessage> TaskInfoRequestMessage_default_instance_;

TaskInfoRequestMessage* TaskInfoRequestMessage::New(::google::protobuf::Arena* arena) const {
  TaskInfoRequestMessage* n = new TaskInfoRequestMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskInfoRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.TaskInfoRequestMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaskInfoRequestMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskInfoRequestMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(task_id_, task_pid_);
  requesting_resource_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  requesting_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool TaskInfoRequestMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.TaskInfoRequestMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_requesting_resource_id;
        break;
      }

      // optional string requesting_resource_id = 2;
      case 2: {
        if (tag == 18) {
         parse_requesting_resource_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requesting_resource_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->requesting_resource_id().data(), this->requesting_resource_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.TaskInfoRequestMessage.requesting_resource_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_requesting_endpoint;
        break;
      }

      // optional string requesting_endpoint = 3;
      case 3: {
        if (tag == 26) {
         parse_requesting_endpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requesting_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->requesting_endpoint().data(), this->requesting_endpoint().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "firmament.TaskInfoRequestMessage.requesting_endpoint"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_task_pid;
        break;
      }

      // optional uint32 task_pid = 4;
      case 4: {
        if (tag == 32) {
         parse_task_pid:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_pid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.TaskInfoRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.TaskInfoRequestMessage)
  return false;
#undef DO_
}

void TaskInfoRequestMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.TaskInfoRequestMessage)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // optional string requesting_resource_id = 2;
  if (this->requesting_resource_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requesting_resource_id().data(), this->requesting_resource_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskInfoRequestMessage.requesting_resource_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->requesting_resource_id(), output);
  }

  // optional string requesting_endpoint = 3;
  if (this->requesting_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requesting_endpoint().data(), this->requesting_endpoint().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskInfoRequestMessage.requesting_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->requesting_endpoint(), output);
  }

  // optional uint32 task_pid = 4;
  if (this->task_pid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->task_pid(), output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.TaskInfoRequestMessage)
}

::google::protobuf::uint8* TaskInfoRequestMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.TaskInfoRequestMessage)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // optional string requesting_resource_id = 2;
  if (this->requesting_resource_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requesting_resource_id().data(), this->requesting_resource_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskInfoRequestMessage.requesting_resource_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->requesting_resource_id(), target);
  }

  // optional string requesting_endpoint = 3;
  if (this->requesting_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->requesting_endpoint().data(), this->requesting_endpoint().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "firmament.TaskInfoRequestMessage.requesting_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->requesting_endpoint(), target);
  }

  // optional uint32 task_pid = 4;
  if (this->task_pid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->task_pid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.TaskInfoRequestMessage)
  return target;
}

size_t TaskInfoRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.TaskInfoRequestMessage)
  size_t total_size = 0;

  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  // optional string requesting_resource_id = 2;
  if (this->requesting_resource_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requesting_resource_id());
  }

  // optional string requesting_endpoint = 3;
  if (this->requesting_endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->requesting_endpoint());
  }

  // optional uint32 task_pid = 4;
  if (this->task_pid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->task_pid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfoRequestMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.TaskInfoRequestMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskInfoRequestMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskInfoRequestMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.TaskInfoRequestMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.TaskInfoRequestMessage)
    UnsafeMergeFrom(*source);
  }
}

void TaskInfoRequestMessage::MergeFrom(const TaskInfoRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.TaskInfoRequestMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TaskInfoRequestMessage::UnsafeMergeFrom(const TaskInfoRequestMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.requesting_resource_id().size() > 0) {

    requesting_resource_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requesting_resource_id_);
  }
  if (from.requesting_endpoint().size() > 0) {

    requesting_endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.requesting_endpoint_);
  }
  if (from.task_pid() != 0) {
    set_task_pid(from.task_pid());
  }
}

void TaskInfoRequestMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.TaskInfoRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfoRequestMessage::CopyFrom(const TaskInfoRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.TaskInfoRequestMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TaskInfoRequestMessage::IsInitialized() const {

  return true;
}

void TaskInfoRequestMessage::Swap(TaskInfoRequestMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskInfoRequestMessage::InternalSwap(TaskInfoRequestMessage* other) {
  std::swap(task_id_, other->task_id_);
  requesting_resource_id_.Swap(&other->requesting_resource_id_);
  requesting_endpoint_.Swap(&other->requesting_endpoint_);
  std::swap(task_pid_, other->task_pid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskInfoRequestMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskInfoRequestMessage_descriptor_;
  metadata.reflection = TaskInfoRequestMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskInfoRequestMessage

// optional uint64 task_id = 1;
void TaskInfoRequestMessage::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskInfoRequestMessage::task_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskInfoRequestMessage.task_id)
  return task_id_;
}
void TaskInfoRequestMessage::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskInfoRequestMessage.task_id)
}

// optional string requesting_resource_id = 2;
void TaskInfoRequestMessage::clear_requesting_resource_id() {
  requesting_resource_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskInfoRequestMessage::requesting_resource_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskInfoRequestMessage.requesting_resource_id)
  return requesting_resource_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInfoRequestMessage::set_requesting_resource_id(const ::std::string& value) {
  
  requesting_resource_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskInfoRequestMessage.requesting_resource_id)
}
void TaskInfoRequestMessage::set_requesting_resource_id(const char* value) {
  
  requesting_resource_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskInfoRequestMessage.requesting_resource_id)
}
void TaskInfoRequestMessage::set_requesting_resource_id(const char* value, size_t size) {
  
  requesting_resource_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskInfoRequestMessage.requesting_resource_id)
}
::std::string* TaskInfoRequestMessage::mutable_requesting_resource_id() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskInfoRequestMessage.requesting_resource_id)
  return requesting_resource_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInfoRequestMessage::release_requesting_resource_id() {
  // @@protoc_insertion_point(field_release:firmament.TaskInfoRequestMessage.requesting_resource_id)
  
  return requesting_resource_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInfoRequestMessage::set_allocated_requesting_resource_id(::std::string* requesting_resource_id) {
  if (requesting_resource_id != NULL) {
    
  } else {
    
  }
  requesting_resource_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requesting_resource_id);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskInfoRequestMessage.requesting_resource_id)
}

// optional string requesting_endpoint = 3;
void TaskInfoRequestMessage::clear_requesting_endpoint() {
  requesting_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TaskInfoRequestMessage::requesting_endpoint() const {
  // @@protoc_insertion_point(field_get:firmament.TaskInfoRequestMessage.requesting_endpoint)
  return requesting_endpoint_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInfoRequestMessage::set_requesting_endpoint(const ::std::string& value) {
  
  requesting_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.TaskInfoRequestMessage.requesting_endpoint)
}
void TaskInfoRequestMessage::set_requesting_endpoint(const char* value) {
  
  requesting_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.TaskInfoRequestMessage.requesting_endpoint)
}
void TaskInfoRequestMessage::set_requesting_endpoint(const char* value, size_t size) {
  
  requesting_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.TaskInfoRequestMessage.requesting_endpoint)
}
::std::string* TaskInfoRequestMessage::mutable_requesting_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:firmament.TaskInfoRequestMessage.requesting_endpoint)
  return requesting_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskInfoRequestMessage::release_requesting_endpoint() {
  // @@protoc_insertion_point(field_release:firmament.TaskInfoRequestMessage.requesting_endpoint)
  
  return requesting_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskInfoRequestMessage::set_allocated_requesting_endpoint(::std::string* requesting_endpoint) {
  if (requesting_endpoint != NULL) {
    
  } else {
    
  }
  requesting_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), requesting_endpoint);
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskInfoRequestMessage.requesting_endpoint)
}

// optional uint32 task_pid = 4;
void TaskInfoRequestMessage::clear_task_pid() {
  task_pid_ = 0u;
}
::google::protobuf::uint32 TaskInfoRequestMessage::task_pid() const {
  // @@protoc_insertion_point(field_get:firmament.TaskInfoRequestMessage.task_pid)
  return task_pid_;
}
void TaskInfoRequestMessage::set_task_pid(::google::protobuf::uint32 value) {
  
  task_pid_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskInfoRequestMessage.task_pid)
}

inline const TaskInfoRequestMessage* TaskInfoRequestMessage::internal_default_instance() {
  return &TaskInfoRequestMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskInfoResponseMessage::kTaskIdFieldNumber;
const int TaskInfoResponseMessage::kTaskDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskInfoResponseMessage::TaskInfoResponseMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messages_2ftask_5finfo_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.TaskInfoResponseMessage)
}

void TaskInfoResponseMessage::InitAsDefaultInstance() {
  task_desc_ = const_cast< ::firmament::TaskDescriptor*>(
      ::firmament::TaskDescriptor::internal_default_instance());
}

TaskInfoResponseMessage::TaskInfoResponseMessage(const TaskInfoResponseMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.TaskInfoResponseMessage)
}

void TaskInfoResponseMessage::SharedCtor() {
  task_desc_ = NULL;
  task_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

TaskInfoResponseMessage::~TaskInfoResponseMessage() {
  // @@protoc_insertion_point(destructor:firmament.TaskInfoResponseMessage)
  SharedDtor();
}

void TaskInfoResponseMessage::SharedDtor() {
  if (this != &TaskInfoResponseMessage_default_instance_.get()) {
    delete task_desc_;
  }
}

void TaskInfoResponseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfoResponseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskInfoResponseMessage_descriptor_;
}

const TaskInfoResponseMessage& TaskInfoResponseMessage::default_instance() {
  protobuf_InitDefaults_messages_2ftask_5finfo_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TaskInfoResponseMessage> TaskInfoResponseMessage_default_instance_;

TaskInfoResponseMessage* TaskInfoResponseMessage::New(::google::protobuf::Arena* arena) const {
  TaskInfoResponseMessage* n = new TaskInfoResponseMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskInfoResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.TaskInfoResponseMessage)
  task_id_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && task_desc_ != NULL) delete task_desc_;
  task_desc_ = NULL;
}

bool TaskInfoResponseMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.TaskInfoResponseMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_task_desc;
        break;
      }

      // optional .firmament.TaskDescriptor task_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_task_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.TaskInfoResponseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.TaskInfoResponseMessage)
  return false;
#undef DO_
}

void TaskInfoResponseMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.TaskInfoResponseMessage)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_id(), output);
  }

  // optional .firmament.TaskDescriptor task_desc = 2;
  if (this->has_task_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->task_desc_, output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.TaskInfoResponseMessage)
}

::google::protobuf::uint8* TaskInfoResponseMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.TaskInfoResponseMessage)
  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_id(), target);
  }

  // optional .firmament.TaskDescriptor task_desc = 2;
  if (this->has_task_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->task_desc_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.TaskInfoResponseMessage)
  return target;
}

size_t TaskInfoResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.TaskInfoResponseMessage)
  size_t total_size = 0;

  // optional uint64 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_id());
  }

  // optional .firmament.TaskDescriptor task_desc = 2;
  if (this->has_task_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->task_desc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfoResponseMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.TaskInfoResponseMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskInfoResponseMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskInfoResponseMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.TaskInfoResponseMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.TaskInfoResponseMessage)
    UnsafeMergeFrom(*source);
  }
}

void TaskInfoResponseMessage::MergeFrom(const TaskInfoResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.TaskInfoResponseMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TaskInfoResponseMessage::UnsafeMergeFrom(const TaskInfoResponseMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.task_id() != 0) {
    set_task_id(from.task_id());
  }
  if (from.has_task_desc()) {
    mutable_task_desc()->::firmament::TaskDescriptor::MergeFrom(from.task_desc());
  }
}

void TaskInfoResponseMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.TaskInfoResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfoResponseMessage::CopyFrom(const TaskInfoResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.TaskInfoResponseMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TaskInfoResponseMessage::IsInitialized() const {

  return true;
}

void TaskInfoResponseMessage::Swap(TaskInfoResponseMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskInfoResponseMessage::InternalSwap(TaskInfoResponseMessage* other) {
  std::swap(task_id_, other->task_id_);
  std::swap(task_desc_, other->task_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskInfoResponseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskInfoResponseMessage_descriptor_;
  metadata.reflection = TaskInfoResponseMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskInfoResponseMessage

// optional uint64 task_id = 1;
void TaskInfoResponseMessage::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskInfoResponseMessage::task_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskInfoResponseMessage.task_id)
  return task_id_;
}
void TaskInfoResponseMessage::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskInfoResponseMessage.task_id)
}

// optional .firmament.TaskDescriptor task_desc = 2;
bool TaskInfoResponseMessage::has_task_desc() const {
  return this != internal_default_instance() && task_desc_ != NULL;
}
void TaskInfoResponseMessage::clear_task_desc() {
  if (GetArenaNoVirtual() == NULL && task_desc_ != NULL) delete task_desc_;
  task_desc_ = NULL;
}
const ::firmament::TaskDescriptor& TaskInfoResponseMessage::task_desc() const {
  // @@protoc_insertion_point(field_get:firmament.TaskInfoResponseMessage.task_desc)
  return task_desc_ != NULL ? *task_desc_
                         : *::firmament::TaskDescriptor::internal_default_instance();
}
::firmament::TaskDescriptor* TaskInfoResponseMessage::mutable_task_desc() {
  
  if (task_desc_ == NULL) {
    task_desc_ = new ::firmament::TaskDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:firmament.TaskInfoResponseMessage.task_desc)
  return task_desc_;
}
::firmament::TaskDescriptor* TaskInfoResponseMessage::release_task_desc() {
  // @@protoc_insertion_point(field_release:firmament.TaskInfoResponseMessage.task_desc)
  
  ::firmament::TaskDescriptor* temp = task_desc_;
  task_desc_ = NULL;
  return temp;
}
void TaskInfoResponseMessage::set_allocated_task_desc(::firmament::TaskDescriptor* task_desc) {
  delete task_desc_;
  task_desc_ = task_desc;
  if (task_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskInfoResponseMessage.task_desc)
}

inline const TaskInfoResponseMessage* TaskInfoResponseMessage::internal_default_instance() {
  return &TaskInfoResponseMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
