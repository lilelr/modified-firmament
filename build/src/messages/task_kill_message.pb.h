// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/task_kill_message.proto

#ifndef PROTOBUF_messages_2ftask_5fkill_5fmessage_2eproto__INCLUDED
#define PROTOBUF_messages_2ftask_5fkill_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace firmament {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_messages_2ftask_5fkill_5fmessage_2eproto();
void protobuf_InitDefaults_messages_2ftask_5fkill_5fmessage_2eproto();
void protobuf_AssignDesc_messages_2ftask_5fkill_5fmessage_2eproto();
void protobuf_ShutdownFile_messages_2ftask_5fkill_5fmessage_2eproto();

class TaskKillMessage;

enum TaskKillMessage_TaskKillReason {
  TaskKillMessage_TaskKillReason_USER_ABORT = 0,
  TaskKillMessage_TaskKillReason_RESOURCE_EXCEEDED = 1,
  TaskKillMessage_TaskKillReason_PREEMPTION = 2,
  TaskKillMessage_TaskKillReason_TaskKillMessage_TaskKillReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TaskKillMessage_TaskKillReason_TaskKillMessage_TaskKillReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TaskKillMessage_TaskKillReason_IsValid(int value);
const TaskKillMessage_TaskKillReason TaskKillMessage_TaskKillReason_TaskKillReason_MIN = TaskKillMessage_TaskKillReason_USER_ABORT;
const TaskKillMessage_TaskKillReason TaskKillMessage_TaskKillReason_TaskKillReason_MAX = TaskKillMessage_TaskKillReason_PREEMPTION;
const int TaskKillMessage_TaskKillReason_TaskKillReason_ARRAYSIZE = TaskKillMessage_TaskKillReason_TaskKillReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskKillMessage_TaskKillReason_descriptor();
inline const ::std::string& TaskKillMessage_TaskKillReason_Name(TaskKillMessage_TaskKillReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskKillMessage_TaskKillReason_descriptor(), value);
}
inline bool TaskKillMessage_TaskKillReason_Parse(
    const ::std::string& name, TaskKillMessage_TaskKillReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskKillMessage_TaskKillReason>(
    TaskKillMessage_TaskKillReason_descriptor(), name, value);
}
// ===================================================================

class TaskKillMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firmament.TaskKillMessage) */ {
 public:
  TaskKillMessage();
  virtual ~TaskKillMessage();

  TaskKillMessage(const TaskKillMessage& from);

  inline TaskKillMessage& operator=(const TaskKillMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskKillMessage& default_instance();

  static const TaskKillMessage* internal_default_instance();

  void Swap(TaskKillMessage* other);

  // implements Message ----------------------------------------------

  inline TaskKillMessage* New() const { return New(NULL); }

  TaskKillMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskKillMessage& from);
  void MergeFrom(const TaskKillMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskKillMessage* other);
  void UnsafeMergeFrom(const TaskKillMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TaskKillMessage_TaskKillReason TaskKillReason;
  static const TaskKillReason USER_ABORT =
    TaskKillMessage_TaskKillReason_USER_ABORT;
  static const TaskKillReason RESOURCE_EXCEEDED =
    TaskKillMessage_TaskKillReason_RESOURCE_EXCEEDED;
  static const TaskKillReason PREEMPTION =
    TaskKillMessage_TaskKillReason_PREEMPTION;
  static inline bool TaskKillReason_IsValid(int value) {
    return TaskKillMessage_TaskKillReason_IsValid(value);
  }
  static const TaskKillReason TaskKillReason_MIN =
    TaskKillMessage_TaskKillReason_TaskKillReason_MIN;
  static const TaskKillReason TaskKillReason_MAX =
    TaskKillMessage_TaskKillReason_TaskKillReason_MAX;
  static const int TaskKillReason_ARRAYSIZE =
    TaskKillMessage_TaskKillReason_TaskKillReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TaskKillReason_descriptor() {
    return TaskKillMessage_TaskKillReason_descriptor();
  }
  static inline const ::std::string& TaskKillReason_Name(TaskKillReason value) {
    return TaskKillMessage_TaskKillReason_Name(value);
  }
  static inline bool TaskKillReason_Parse(const ::std::string& name,
      TaskKillReason* value) {
    return TaskKillMessage_TaskKillReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  ::google::protobuf::uint64 task_id() const;
  void set_task_id(::google::protobuf::uint64 value);

  // optional .firmament.TaskKillMessage.TaskKillReason reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  ::firmament::TaskKillMessage_TaskKillReason reason() const;
  void set_reason(::firmament::TaskKillMessage_TaskKillReason value);

  // @@protoc_insertion_point(class_scope:firmament.TaskKillMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 task_id_;
  int reason_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_messages_2ftask_5fkill_5fmessage_2eproto_impl();
  friend void  protobuf_AddDesc_messages_2ftask_5fkill_5fmessage_2eproto_impl();
  friend void protobuf_AssignDesc_messages_2ftask_5fkill_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_messages_2ftask_5fkill_5fmessage_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TaskKillMessage> TaskKillMessage_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskKillMessage

// optional uint64 task_id = 1;
inline void TaskKillMessage::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TaskKillMessage::task_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskKillMessage.task_id)
  return task_id_;
}
inline void TaskKillMessage::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskKillMessage.task_id)
}

// optional .firmament.TaskKillMessage.TaskKillReason reason = 2;
inline void TaskKillMessage::clear_reason() {
  reason_ = 0;
}
inline ::firmament::TaskKillMessage_TaskKillReason TaskKillMessage::reason() const {
  // @@protoc_insertion_point(field_get:firmament.TaskKillMessage.reason)
  return static_cast< ::firmament::TaskKillMessage_TaskKillReason >(reason_);
}
inline void TaskKillMessage::set_reason(::firmament::TaskKillMessage_TaskKillReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskKillMessage.reason)
}

inline const TaskKillMessage* TaskKillMessage::internal_default_instance() {
  return &TaskKillMessage_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::firmament::TaskKillMessage_TaskKillReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firmament::TaskKillMessage_TaskKillReason>() {
  return ::firmament::TaskKillMessage_TaskKillReason_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2ftask_5fkill_5fmessage_2eproto__INCLUDED
