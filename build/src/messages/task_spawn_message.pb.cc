// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/task_spawn_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages/task_spawn_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* TaskSpawnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskSpawnMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2ftask_5fspawn_5fmessage_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_messages_2ftask_5fspawn_5fmessage_2eproto() {
  protobuf_AddDesc_messages_2ftask_5fspawn_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages/task_spawn_message.proto");
  GOOGLE_CHECK(file != NULL);
  TaskSpawnMessage_descriptor_ = file->message_type(0);
  static const int TaskSpawnMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskSpawnMessage, creating_task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskSpawnMessage, spawned_task_desc_),
  };
  TaskSpawnMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskSpawnMessage_descriptor_,
      TaskSpawnMessage::internal_default_instance(),
      TaskSpawnMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TaskSpawnMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskSpawnMessage, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2ftask_5fspawn_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskSpawnMessage_descriptor_, TaskSpawnMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2ftask_5fspawn_5fmessage_2eproto() {
  TaskSpawnMessage_default_instance_.Shutdown();
  delete TaskSpawnMessage_reflection_;
}

void protobuf_InitDefaults_messages_2ftask_5fspawn_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::firmament::protobuf_InitDefaults_base_2ftask_5fdesc_2eproto();
  TaskSpawnMessage_default_instance_.DefaultConstruct();
  TaskSpawnMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_messages_2ftask_5fspawn_5fmessage_2eproto_once_);
void protobuf_InitDefaults_messages_2ftask_5fspawn_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_messages_2ftask_5fspawn_5fmessage_2eproto_once_,
                 &protobuf_InitDefaults_messages_2ftask_5fspawn_5fmessage_2eproto_impl);
}
void protobuf_AddDesc_messages_2ftask_5fspawn_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_messages_2ftask_5fspawn_5fmessage_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!messages/task_spawn_message.proto\022\tfir"
    "mament\032\024base/task_desc.proto\"b\n\020TaskSpaw"
    "nMessage\022\030\n\020creating_task_id\030\001 \001(\004\0224\n\021sp"
    "awned_task_desc\030\002 \001(\0132\031.firmament.TaskDe"
    "scriptorb\006proto3", 176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages/task_spawn_message.proto", &protobuf_RegisterTypes);
  ::firmament::protobuf_AddDesc_base_2ftask_5fdesc_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2ftask_5fspawn_5fmessage_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messages_2ftask_5fspawn_5fmessage_2eproto_once_);
void protobuf_AddDesc_messages_2ftask_5fspawn_5fmessage_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messages_2ftask_5fspawn_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_messages_2ftask_5fspawn_5fmessage_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2ftask_5fspawn_5fmessage_2eproto {
  StaticDescriptorInitializer_messages_2ftask_5fspawn_5fmessage_2eproto() {
    protobuf_AddDesc_messages_2ftask_5fspawn_5fmessage_2eproto();
  }
} static_descriptor_initializer_messages_2ftask_5fspawn_5fmessage_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskSpawnMessage::kCreatingTaskIdFieldNumber;
const int TaskSpawnMessage::kSpawnedTaskDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskSpawnMessage::TaskSpawnMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_messages_2ftask_5fspawn_5fmessage_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.TaskSpawnMessage)
}

void TaskSpawnMessage::InitAsDefaultInstance() {
  spawned_task_desc_ = const_cast< ::firmament::TaskDescriptor*>(
      ::firmament::TaskDescriptor::internal_default_instance());
}

TaskSpawnMessage::TaskSpawnMessage(const TaskSpawnMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.TaskSpawnMessage)
}

void TaskSpawnMessage::SharedCtor() {
  spawned_task_desc_ = NULL;
  creating_task_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

TaskSpawnMessage::~TaskSpawnMessage() {
  // @@protoc_insertion_point(destructor:firmament.TaskSpawnMessage)
  SharedDtor();
}

void TaskSpawnMessage::SharedDtor() {
  if (this != &TaskSpawnMessage_default_instance_.get()) {
    delete spawned_task_desc_;
  }
}

void TaskSpawnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskSpawnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskSpawnMessage_descriptor_;
}

const TaskSpawnMessage& TaskSpawnMessage::default_instance() {
  protobuf_InitDefaults_messages_2ftask_5fspawn_5fmessage_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TaskSpawnMessage> TaskSpawnMessage_default_instance_;

TaskSpawnMessage* TaskSpawnMessage::New(::google::protobuf::Arena* arena) const {
  TaskSpawnMessage* n = new TaskSpawnMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskSpawnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.TaskSpawnMessage)
  creating_task_id_ = GOOGLE_ULONGLONG(0);
  if (GetArenaNoVirtual() == NULL && spawned_task_desc_ != NULL) delete spawned_task_desc_;
  spawned_task_desc_ = NULL;
}

bool TaskSpawnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.TaskSpawnMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 creating_task_id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creating_task_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_spawned_task_desc;
        break;
      }

      // optional .firmament.TaskDescriptor spawned_task_desc = 2;
      case 2: {
        if (tag == 18) {
         parse_spawned_task_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spawned_task_desc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.TaskSpawnMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.TaskSpawnMessage)
  return false;
#undef DO_
}

void TaskSpawnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.TaskSpawnMessage)
  // optional uint64 creating_task_id = 1;
  if (this->creating_task_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->creating_task_id(), output);
  }

  // optional .firmament.TaskDescriptor spawned_task_desc = 2;
  if (this->has_spawned_task_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->spawned_task_desc_, output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.TaskSpawnMessage)
}

::google::protobuf::uint8* TaskSpawnMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.TaskSpawnMessage)
  // optional uint64 creating_task_id = 1;
  if (this->creating_task_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->creating_task_id(), target);
  }

  // optional .firmament.TaskDescriptor spawned_task_desc = 2;
  if (this->has_spawned_task_desc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->spawned_task_desc_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.TaskSpawnMessage)
  return target;
}

size_t TaskSpawnMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.TaskSpawnMessage)
  size_t total_size = 0;

  // optional uint64 creating_task_id = 1;
  if (this->creating_task_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->creating_task_id());
  }

  // optional .firmament.TaskDescriptor spawned_task_desc = 2;
  if (this->has_spawned_task_desc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->spawned_task_desc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskSpawnMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.TaskSpawnMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskSpawnMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskSpawnMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.TaskSpawnMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.TaskSpawnMessage)
    UnsafeMergeFrom(*source);
  }
}

void TaskSpawnMessage::MergeFrom(const TaskSpawnMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.TaskSpawnMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TaskSpawnMessage::UnsafeMergeFrom(const TaskSpawnMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.creating_task_id() != 0) {
    set_creating_task_id(from.creating_task_id());
  }
  if (from.has_spawned_task_desc()) {
    mutable_spawned_task_desc()->::firmament::TaskDescriptor::MergeFrom(from.spawned_task_desc());
  }
}

void TaskSpawnMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.TaskSpawnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskSpawnMessage::CopyFrom(const TaskSpawnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.TaskSpawnMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TaskSpawnMessage::IsInitialized() const {

  return true;
}

void TaskSpawnMessage::Swap(TaskSpawnMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskSpawnMessage::InternalSwap(TaskSpawnMessage* other) {
  std::swap(creating_task_id_, other->creating_task_id_);
  std::swap(spawned_task_desc_, other->spawned_task_desc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskSpawnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskSpawnMessage_descriptor_;
  metadata.reflection = TaskSpawnMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskSpawnMessage

// optional uint64 creating_task_id = 1;
void TaskSpawnMessage::clear_creating_task_id() {
  creating_task_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TaskSpawnMessage::creating_task_id() const {
  // @@protoc_insertion_point(field_get:firmament.TaskSpawnMessage.creating_task_id)
  return creating_task_id_;
}
void TaskSpawnMessage::set_creating_task_id(::google::protobuf::uint64 value) {
  
  creating_task_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.TaskSpawnMessage.creating_task_id)
}

// optional .firmament.TaskDescriptor spawned_task_desc = 2;
bool TaskSpawnMessage::has_spawned_task_desc() const {
  return this != internal_default_instance() && spawned_task_desc_ != NULL;
}
void TaskSpawnMessage::clear_spawned_task_desc() {
  if (GetArenaNoVirtual() == NULL && spawned_task_desc_ != NULL) delete spawned_task_desc_;
  spawned_task_desc_ = NULL;
}
const ::firmament::TaskDescriptor& TaskSpawnMessage::spawned_task_desc() const {
  // @@protoc_insertion_point(field_get:firmament.TaskSpawnMessage.spawned_task_desc)
  return spawned_task_desc_ != NULL ? *spawned_task_desc_
                         : *::firmament::TaskDescriptor::internal_default_instance();
}
::firmament::TaskDescriptor* TaskSpawnMessage::mutable_spawned_task_desc() {
  
  if (spawned_task_desc_ == NULL) {
    spawned_task_desc_ = new ::firmament::TaskDescriptor;
  }
  // @@protoc_insertion_point(field_mutable:firmament.TaskSpawnMessage.spawned_task_desc)
  return spawned_task_desc_;
}
::firmament::TaskDescriptor* TaskSpawnMessage::release_spawned_task_desc() {
  // @@protoc_insertion_point(field_release:firmament.TaskSpawnMessage.spawned_task_desc)
  
  ::firmament::TaskDescriptor* temp = spawned_task_desc_;
  spawned_task_desc_ = NULL;
  return temp;
}
void TaskSpawnMessage::set_allocated_spawned_task_desc(::firmament::TaskDescriptor* spawned_task_desc) {
  delete spawned_task_desc_;
  spawned_task_desc_ = spawned_task_desc;
  if (spawned_task_desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:firmament.TaskSpawnMessage.spawned_task_desc)
}

inline const TaskSpawnMessage* TaskSpawnMessage::internal_default_instance() {
  return &TaskSpawnMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
