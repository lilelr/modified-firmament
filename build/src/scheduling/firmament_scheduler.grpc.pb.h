// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scheduling/firmament_scheduler.proto
// Original file comments:
// The Firmament project
// Copyright (c) The Firmament Authors.
//
#ifndef GRPC_scheduling_2ffirmament_5fscheduler_2eproto__INCLUDED
#define GRPC_scheduling_2ffirmament_5fscheduler_2eproto__INCLUDED

#include "scheduling/firmament_scheduler.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace firmament {

class FirmamentScheduler final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Schedule(::grpc::ClientContext* context, const ::firmament::ScheduleRequest& request, ::firmament::SchedulingDeltas* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::SchedulingDeltas>> AsyncSchedule(::grpc::ClientContext* context, const ::firmament::ScheduleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::SchedulingDeltas>>(AsyncScheduleRaw(context, request, cq));
    }
    virtual ::grpc::Status TaskCompleted(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::firmament::TaskCompletedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskCompletedResponse>> AsyncTaskCompleted(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskCompletedResponse>>(AsyncTaskCompletedRaw(context, request, cq));
    }
    virtual ::grpc::Status TaskFailed(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::firmament::TaskFailedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskFailedResponse>> AsyncTaskFailed(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskFailedResponse>>(AsyncTaskFailedRaw(context, request, cq));
    }
    virtual ::grpc::Status TaskRemoved(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::firmament::TaskRemovedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskRemovedResponse>> AsyncTaskRemoved(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskRemovedResponse>>(AsyncTaskRemovedRaw(context, request, cq));
    }
    virtual ::grpc::Status TaskSubmitted(::grpc::ClientContext* context, const ::firmament::TaskDescription& request, ::firmament::TaskSubmittedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskSubmittedResponse>> AsyncTaskSubmitted(::grpc::ClientContext* context, const ::firmament::TaskDescription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskSubmittedResponse>>(AsyncTaskSubmittedRaw(context, request, cq));
    }
    virtual ::grpc::Status TaskUpdated(::grpc::ClientContext* context, const ::firmament::TaskDescription& request, ::firmament::TaskUpdatedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskUpdatedResponse>> AsyncTaskUpdated(::grpc::ClientContext* context, const ::firmament::TaskDescription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskUpdatedResponse>>(AsyncTaskUpdatedRaw(context, request, cq));
    }
    virtual ::grpc::Status NodeAdded(::grpc::ClientContext* context, const ::firmament::ResourceTopologyNodeDescriptor& request, ::firmament::NodeAddedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::NodeAddedResponse>> AsyncNodeAdded(::grpc::ClientContext* context, const ::firmament::ResourceTopologyNodeDescriptor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::NodeAddedResponse>>(AsyncNodeAddedRaw(context, request, cq));
    }
    virtual ::grpc::Status NodeFailed(::grpc::ClientContext* context, const ::firmament::ResourceUID& request, ::firmament::NodeFailedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::NodeFailedResponse>> AsyncNodeFailed(::grpc::ClientContext* context, const ::firmament::ResourceUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::NodeFailedResponse>>(AsyncNodeFailedRaw(context, request, cq));
    }
    virtual ::grpc::Status NodeRemoved(::grpc::ClientContext* context, const ::firmament::ResourceUID& request, ::firmament::NodeRemovedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::NodeRemovedResponse>> AsyncNodeRemoved(::grpc::ClientContext* context, const ::firmament::ResourceUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::NodeRemovedResponse>>(AsyncNodeRemovedRaw(context, request, cq));
    }
    virtual ::grpc::Status NodeUpdated(::grpc::ClientContext* context, const ::firmament::ResourceTopologyNodeDescriptor& request, ::firmament::NodeUpdatedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::NodeUpdatedResponse>> AsyncNodeUpdated(::grpc::ClientContext* context, const ::firmament::ResourceTopologyNodeDescriptor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::NodeUpdatedResponse>>(AsyncNodeUpdatedRaw(context, request, cq));
    }
    virtual ::grpc::Status AddTaskStats(::grpc::ClientContext* context, const ::firmament::TaskStats& request, ::firmament::TaskStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskStatsResponse>> AsyncAddTaskStats(::grpc::ClientContext* context, const ::firmament::TaskStats& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskStatsResponse>>(AsyncAddTaskStatsRaw(context, request, cq));
    }
    virtual ::grpc::Status AddNodeStats(::grpc::ClientContext* context, const ::firmament::ResourceStats& request, ::firmament::ResourceStatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::ResourceStatsResponse>> AsyncAddNodeStats(::grpc::ClientContext* context, const ::firmament::ResourceStats& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::firmament::ResourceStatsResponse>>(AsyncAddNodeStatsRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::firmament::SchedulingDeltas>* AsyncScheduleRaw(::grpc::ClientContext* context, const ::firmament::ScheduleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskCompletedResponse>* AsyncTaskCompletedRaw(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskFailedResponse>* AsyncTaskFailedRaw(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskRemovedResponse>* AsyncTaskRemovedRaw(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskSubmittedResponse>* AsyncTaskSubmittedRaw(::grpc::ClientContext* context, const ::firmament::TaskDescription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskUpdatedResponse>* AsyncTaskUpdatedRaw(::grpc::ClientContext* context, const ::firmament::TaskDescription& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::firmament::NodeAddedResponse>* AsyncNodeAddedRaw(::grpc::ClientContext* context, const ::firmament::ResourceTopologyNodeDescriptor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::firmament::NodeFailedResponse>* AsyncNodeFailedRaw(::grpc::ClientContext* context, const ::firmament::ResourceUID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::firmament::NodeRemovedResponse>* AsyncNodeRemovedRaw(::grpc::ClientContext* context, const ::firmament::ResourceUID& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::firmament::NodeUpdatedResponse>* AsyncNodeUpdatedRaw(::grpc::ClientContext* context, const ::firmament::ResourceTopologyNodeDescriptor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::firmament::TaskStatsResponse>* AsyncAddTaskStatsRaw(::grpc::ClientContext* context, const ::firmament::TaskStats& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::firmament::ResourceStatsResponse>* AsyncAddNodeStatsRaw(::grpc::ClientContext* context, const ::firmament::ResourceStats& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Schedule(::grpc::ClientContext* context, const ::firmament::ScheduleRequest& request, ::firmament::SchedulingDeltas* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::SchedulingDeltas>> AsyncSchedule(::grpc::ClientContext* context, const ::firmament::ScheduleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::SchedulingDeltas>>(AsyncScheduleRaw(context, request, cq));
    }
    ::grpc::Status TaskCompleted(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::firmament::TaskCompletedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::TaskCompletedResponse>> AsyncTaskCompleted(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::TaskCompletedResponse>>(AsyncTaskCompletedRaw(context, request, cq));
    }
    ::grpc::Status TaskFailed(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::firmament::TaskFailedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::TaskFailedResponse>> AsyncTaskFailed(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::TaskFailedResponse>>(AsyncTaskFailedRaw(context, request, cq));
    }
    ::grpc::Status TaskRemoved(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::firmament::TaskRemovedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::TaskRemovedResponse>> AsyncTaskRemoved(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::TaskRemovedResponse>>(AsyncTaskRemovedRaw(context, request, cq));
    }
    ::grpc::Status TaskSubmitted(::grpc::ClientContext* context, const ::firmament::TaskDescription& request, ::firmament::TaskSubmittedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::TaskSubmittedResponse>> AsyncTaskSubmitted(::grpc::ClientContext* context, const ::firmament::TaskDescription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::TaskSubmittedResponse>>(AsyncTaskSubmittedRaw(context, request, cq));
    }
    ::grpc::Status TaskUpdated(::grpc::ClientContext* context, const ::firmament::TaskDescription& request, ::firmament::TaskUpdatedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::TaskUpdatedResponse>> AsyncTaskUpdated(::grpc::ClientContext* context, const ::firmament::TaskDescription& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::TaskUpdatedResponse>>(AsyncTaskUpdatedRaw(context, request, cq));
    }
    ::grpc::Status NodeAdded(::grpc::ClientContext* context, const ::firmament::ResourceTopologyNodeDescriptor& request, ::firmament::NodeAddedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::NodeAddedResponse>> AsyncNodeAdded(::grpc::ClientContext* context, const ::firmament::ResourceTopologyNodeDescriptor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::NodeAddedResponse>>(AsyncNodeAddedRaw(context, request, cq));
    }
    ::grpc::Status NodeFailed(::grpc::ClientContext* context, const ::firmament::ResourceUID& request, ::firmament::NodeFailedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::NodeFailedResponse>> AsyncNodeFailed(::grpc::ClientContext* context, const ::firmament::ResourceUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::NodeFailedResponse>>(AsyncNodeFailedRaw(context, request, cq));
    }
    ::grpc::Status NodeRemoved(::grpc::ClientContext* context, const ::firmament::ResourceUID& request, ::firmament::NodeRemovedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::NodeRemovedResponse>> AsyncNodeRemoved(::grpc::ClientContext* context, const ::firmament::ResourceUID& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::NodeRemovedResponse>>(AsyncNodeRemovedRaw(context, request, cq));
    }
    ::grpc::Status NodeUpdated(::grpc::ClientContext* context, const ::firmament::ResourceTopologyNodeDescriptor& request, ::firmament::NodeUpdatedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::NodeUpdatedResponse>> AsyncNodeUpdated(::grpc::ClientContext* context, const ::firmament::ResourceTopologyNodeDescriptor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::NodeUpdatedResponse>>(AsyncNodeUpdatedRaw(context, request, cq));
    }
    ::grpc::Status AddTaskStats(::grpc::ClientContext* context, const ::firmament::TaskStats& request, ::firmament::TaskStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::TaskStatsResponse>> AsyncAddTaskStats(::grpc::ClientContext* context, const ::firmament::TaskStats& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::TaskStatsResponse>>(AsyncAddTaskStatsRaw(context, request, cq));
    }
    ::grpc::Status AddNodeStats(::grpc::ClientContext* context, const ::firmament::ResourceStats& request, ::firmament::ResourceStatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::ResourceStatsResponse>> AsyncAddNodeStats(::grpc::ClientContext* context, const ::firmament::ResourceStats& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::firmament::ResourceStatsResponse>>(AsyncAddNodeStatsRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::firmament::SchedulingDeltas>* AsyncScheduleRaw(::grpc::ClientContext* context, const ::firmament::ScheduleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::firmament::TaskCompletedResponse>* AsyncTaskCompletedRaw(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::firmament::TaskFailedResponse>* AsyncTaskFailedRaw(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::firmament::TaskRemovedResponse>* AsyncTaskRemovedRaw(::grpc::ClientContext* context, const ::firmament::TaskUID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::firmament::TaskSubmittedResponse>* AsyncTaskSubmittedRaw(::grpc::ClientContext* context, const ::firmament::TaskDescription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::firmament::TaskUpdatedResponse>* AsyncTaskUpdatedRaw(::grpc::ClientContext* context, const ::firmament::TaskDescription& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::firmament::NodeAddedResponse>* AsyncNodeAddedRaw(::grpc::ClientContext* context, const ::firmament::ResourceTopologyNodeDescriptor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::firmament::NodeFailedResponse>* AsyncNodeFailedRaw(::grpc::ClientContext* context, const ::firmament::ResourceUID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::firmament::NodeRemovedResponse>* AsyncNodeRemovedRaw(::grpc::ClientContext* context, const ::firmament::ResourceUID& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::firmament::NodeUpdatedResponse>* AsyncNodeUpdatedRaw(::grpc::ClientContext* context, const ::firmament::ResourceTopologyNodeDescriptor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::firmament::TaskStatsResponse>* AsyncAddTaskStatsRaw(::grpc::ClientContext* context, const ::firmament::TaskStats& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::firmament::ResourceStatsResponse>* AsyncAddNodeStatsRaw(::grpc::ClientContext* context, const ::firmament::ResourceStats& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Schedule_;
    const ::grpc::RpcMethod rpcmethod_TaskCompleted_;
    const ::grpc::RpcMethod rpcmethod_TaskFailed_;
    const ::grpc::RpcMethod rpcmethod_TaskRemoved_;
    const ::grpc::RpcMethod rpcmethod_TaskSubmitted_;
    const ::grpc::RpcMethod rpcmethod_TaskUpdated_;
    const ::grpc::RpcMethod rpcmethod_NodeAdded_;
    const ::grpc::RpcMethod rpcmethod_NodeFailed_;
    const ::grpc::RpcMethod rpcmethod_NodeRemoved_;
    const ::grpc::RpcMethod rpcmethod_NodeUpdated_;
    const ::grpc::RpcMethod rpcmethod_AddTaskStats_;
    const ::grpc::RpcMethod rpcmethod_AddNodeStats_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Schedule(::grpc::ServerContext* context, const ::firmament::ScheduleRequest* request, ::firmament::SchedulingDeltas* response);
    virtual ::grpc::Status TaskCompleted(::grpc::ServerContext* context, const ::firmament::TaskUID* request, ::firmament::TaskCompletedResponse* response);
    virtual ::grpc::Status TaskFailed(::grpc::ServerContext* context, const ::firmament::TaskUID* request, ::firmament::TaskFailedResponse* response);
    virtual ::grpc::Status TaskRemoved(::grpc::ServerContext* context, const ::firmament::TaskUID* request, ::firmament::TaskRemovedResponse* response);
    virtual ::grpc::Status TaskSubmitted(::grpc::ServerContext* context, const ::firmament::TaskDescription* request, ::firmament::TaskSubmittedResponse* response);
    virtual ::grpc::Status TaskUpdated(::grpc::ServerContext* context, const ::firmament::TaskDescription* request, ::firmament::TaskUpdatedResponse* response);
    virtual ::grpc::Status NodeAdded(::grpc::ServerContext* context, const ::firmament::ResourceTopologyNodeDescriptor* request, ::firmament::NodeAddedResponse* response);
    virtual ::grpc::Status NodeFailed(::grpc::ServerContext* context, const ::firmament::ResourceUID* request, ::firmament::NodeFailedResponse* response);
    virtual ::grpc::Status NodeRemoved(::grpc::ServerContext* context, const ::firmament::ResourceUID* request, ::firmament::NodeRemovedResponse* response);
    virtual ::grpc::Status NodeUpdated(::grpc::ServerContext* context, const ::firmament::ResourceTopologyNodeDescriptor* request, ::firmament::NodeUpdatedResponse* response);
    virtual ::grpc::Status AddTaskStats(::grpc::ServerContext* context, const ::firmament::TaskStats* request, ::firmament::TaskStatsResponse* response);
    virtual ::grpc::Status AddNodeStats(::grpc::ServerContext* context, const ::firmament::ResourceStats* request, ::firmament::ResourceStatsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Schedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Schedule() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Schedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Schedule(::grpc::ServerContext* context, const ::firmament::ScheduleRequest* request, ::firmament::SchedulingDeltas* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSchedule(::grpc::ServerContext* context, ::firmament::ScheduleRequest* request, ::grpc::ServerAsyncResponseWriter< ::firmament::SchedulingDeltas>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TaskCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TaskCompleted() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_TaskCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskCompleted(::grpc::ServerContext* context, const ::firmament::TaskUID* request, ::firmament::TaskCompletedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTaskCompleted(::grpc::ServerContext* context, ::firmament::TaskUID* request, ::grpc::ServerAsyncResponseWriter< ::firmament::TaskCompletedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TaskFailed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TaskFailed() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TaskFailed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskFailed(::grpc::ServerContext* context, const ::firmament::TaskUID* request, ::firmament::TaskFailedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTaskFailed(::grpc::ServerContext* context, ::firmament::TaskUID* request, ::grpc::ServerAsyncResponseWriter< ::firmament::TaskFailedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TaskRemoved : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TaskRemoved() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TaskRemoved() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskRemoved(::grpc::ServerContext* context, const ::firmament::TaskUID* request, ::firmament::TaskRemovedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTaskRemoved(::grpc::ServerContext* context, ::firmament::TaskUID* request, ::grpc::ServerAsyncResponseWriter< ::firmament::TaskRemovedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TaskSubmitted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TaskSubmitted() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_TaskSubmitted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskSubmitted(::grpc::ServerContext* context, const ::firmament::TaskDescription* request, ::firmament::TaskSubmittedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTaskSubmitted(::grpc::ServerContext* context, ::firmament::TaskDescription* request, ::grpc::ServerAsyncResponseWriter< ::firmament::TaskSubmittedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TaskUpdated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_TaskUpdated() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_TaskUpdated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskUpdated(::grpc::ServerContext* context, const ::firmament::TaskDescription* request, ::firmament::TaskUpdatedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTaskUpdated(::grpc::ServerContext* context, ::firmament::TaskDescription* request, ::grpc::ServerAsyncResponseWriter< ::firmament::TaskUpdatedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NodeAdded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NodeAdded() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_NodeAdded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NodeAdded(::grpc::ServerContext* context, const ::firmament::ResourceTopologyNodeDescriptor* request, ::firmament::NodeAddedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNodeAdded(::grpc::ServerContext* context, ::firmament::ResourceTopologyNodeDescriptor* request, ::grpc::ServerAsyncResponseWriter< ::firmament::NodeAddedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NodeFailed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NodeFailed() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_NodeFailed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NodeFailed(::grpc::ServerContext* context, const ::firmament::ResourceUID* request, ::firmament::NodeFailedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNodeFailed(::grpc::ServerContext* context, ::firmament::ResourceUID* request, ::grpc::ServerAsyncResponseWriter< ::firmament::NodeFailedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NodeRemoved : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NodeRemoved() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_NodeRemoved() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NodeRemoved(::grpc::ServerContext* context, const ::firmament::ResourceUID* request, ::firmament::NodeRemovedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNodeRemoved(::grpc::ServerContext* context, ::firmament::ResourceUID* request, ::grpc::ServerAsyncResponseWriter< ::firmament::NodeRemovedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_NodeUpdated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_NodeUpdated() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_NodeUpdated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NodeUpdated(::grpc::ServerContext* context, const ::firmament::ResourceTopologyNodeDescriptor* request, ::firmament::NodeUpdatedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestNodeUpdated(::grpc::ServerContext* context, ::firmament::ResourceTopologyNodeDescriptor* request, ::grpc::ServerAsyncResponseWriter< ::firmament::NodeUpdatedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddTaskStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddTaskStats() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_AddTaskStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTaskStats(::grpc::ServerContext* context, const ::firmament::TaskStats* request, ::firmament::TaskStatsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTaskStats(::grpc::ServerContext* context, ::firmament::TaskStats* request, ::grpc::ServerAsyncResponseWriter< ::firmament::TaskStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddNodeStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddNodeStats() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_AddNodeStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNodeStats(::grpc::ServerContext* context, const ::firmament::ResourceStats* request, ::firmament::ResourceStatsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddNodeStats(::grpc::ServerContext* context, ::firmament::ResourceStats* request, ::grpc::ServerAsyncResponseWriter< ::firmament::ResourceStatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Schedule<WithAsyncMethod_TaskCompleted<WithAsyncMethod_TaskFailed<WithAsyncMethod_TaskRemoved<WithAsyncMethod_TaskSubmitted<WithAsyncMethod_TaskUpdated<WithAsyncMethod_NodeAdded<WithAsyncMethod_NodeFailed<WithAsyncMethod_NodeRemoved<WithAsyncMethod_NodeUpdated<WithAsyncMethod_AddTaskStats<WithAsyncMethod_AddNodeStats<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Schedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Schedule() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Schedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Schedule(::grpc::ServerContext* context, const ::firmament::ScheduleRequest* request, ::firmament::SchedulingDeltas* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TaskCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TaskCompleted() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_TaskCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskCompleted(::grpc::ServerContext* context, const ::firmament::TaskUID* request, ::firmament::TaskCompletedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TaskFailed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TaskFailed() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TaskFailed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskFailed(::grpc::ServerContext* context, const ::firmament::TaskUID* request, ::firmament::TaskFailedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TaskRemoved : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TaskRemoved() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TaskRemoved() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskRemoved(::grpc::ServerContext* context, const ::firmament::TaskUID* request, ::firmament::TaskRemovedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TaskSubmitted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TaskSubmitted() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_TaskSubmitted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskSubmitted(::grpc::ServerContext* context, const ::firmament::TaskDescription* request, ::firmament::TaskSubmittedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TaskUpdated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_TaskUpdated() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_TaskUpdated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskUpdated(::grpc::ServerContext* context, const ::firmament::TaskDescription* request, ::firmament::TaskUpdatedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NodeAdded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NodeAdded() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_NodeAdded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NodeAdded(::grpc::ServerContext* context, const ::firmament::ResourceTopologyNodeDescriptor* request, ::firmament::NodeAddedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NodeFailed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NodeFailed() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_NodeFailed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NodeFailed(::grpc::ServerContext* context, const ::firmament::ResourceUID* request, ::firmament::NodeFailedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NodeRemoved : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NodeRemoved() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_NodeRemoved() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NodeRemoved(::grpc::ServerContext* context, const ::firmament::ResourceUID* request, ::firmament::NodeRemovedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_NodeUpdated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_NodeUpdated() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_NodeUpdated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status NodeUpdated(::grpc::ServerContext* context, const ::firmament::ResourceTopologyNodeDescriptor* request, ::firmament::NodeUpdatedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddTaskStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddTaskStats() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_AddTaskStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTaskStats(::grpc::ServerContext* context, const ::firmament::TaskStats* request, ::firmament::TaskStatsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddNodeStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddNodeStats() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_AddNodeStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddNodeStats(::grpc::ServerContext* context, const ::firmament::ResourceStats* request, ::firmament::ResourceStatsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Schedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Schedule() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::firmament::ScheduleRequest, ::firmament::SchedulingDeltas>(std::bind(&WithStreamedUnaryMethod_Schedule<BaseClass>::StreamedSchedule, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Schedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Schedule(::grpc::ServerContext* context, const ::firmament::ScheduleRequest* request, ::firmament::SchedulingDeltas* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSchedule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::firmament::ScheduleRequest,::firmament::SchedulingDeltas>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TaskCompleted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TaskCompleted() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::firmament::TaskUID, ::firmament::TaskCompletedResponse>(std::bind(&WithStreamedUnaryMethod_TaskCompleted<BaseClass>::StreamedTaskCompleted, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TaskCompleted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TaskCompleted(::grpc::ServerContext* context, const ::firmament::TaskUID* request, ::firmament::TaskCompletedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTaskCompleted(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::firmament::TaskUID,::firmament::TaskCompletedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TaskFailed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TaskFailed() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::firmament::TaskUID, ::firmament::TaskFailedResponse>(std::bind(&WithStreamedUnaryMethod_TaskFailed<BaseClass>::StreamedTaskFailed, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TaskFailed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TaskFailed(::grpc::ServerContext* context, const ::firmament::TaskUID* request, ::firmament::TaskFailedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTaskFailed(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::firmament::TaskUID,::firmament::TaskFailedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TaskRemoved : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TaskRemoved() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::firmament::TaskUID, ::firmament::TaskRemovedResponse>(std::bind(&WithStreamedUnaryMethod_TaskRemoved<BaseClass>::StreamedTaskRemoved, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TaskRemoved() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TaskRemoved(::grpc::ServerContext* context, const ::firmament::TaskUID* request, ::firmament::TaskRemovedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTaskRemoved(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::firmament::TaskUID,::firmament::TaskRemovedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TaskSubmitted : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TaskSubmitted() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::firmament::TaskDescription, ::firmament::TaskSubmittedResponse>(std::bind(&WithStreamedUnaryMethod_TaskSubmitted<BaseClass>::StreamedTaskSubmitted, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TaskSubmitted() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TaskSubmitted(::grpc::ServerContext* context, const ::firmament::TaskDescription* request, ::firmament::TaskSubmittedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTaskSubmitted(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::firmament::TaskDescription,::firmament::TaskSubmittedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TaskUpdated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_TaskUpdated() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::firmament::TaskDescription, ::firmament::TaskUpdatedResponse>(std::bind(&WithStreamedUnaryMethod_TaskUpdated<BaseClass>::StreamedTaskUpdated, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_TaskUpdated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TaskUpdated(::grpc::ServerContext* context, const ::firmament::TaskDescription* request, ::firmament::TaskUpdatedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTaskUpdated(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::firmament::TaskDescription,::firmament::TaskUpdatedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NodeAdded : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NodeAdded() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::firmament::ResourceTopologyNodeDescriptor, ::firmament::NodeAddedResponse>(std::bind(&WithStreamedUnaryMethod_NodeAdded<BaseClass>::StreamedNodeAdded, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NodeAdded() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NodeAdded(::grpc::ServerContext* context, const ::firmament::ResourceTopologyNodeDescriptor* request, ::firmament::NodeAddedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNodeAdded(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::firmament::ResourceTopologyNodeDescriptor,::firmament::NodeAddedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NodeFailed : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NodeFailed() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::firmament::ResourceUID, ::firmament::NodeFailedResponse>(std::bind(&WithStreamedUnaryMethod_NodeFailed<BaseClass>::StreamedNodeFailed, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NodeFailed() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NodeFailed(::grpc::ServerContext* context, const ::firmament::ResourceUID* request, ::firmament::NodeFailedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNodeFailed(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::firmament::ResourceUID,::firmament::NodeFailedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NodeRemoved : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NodeRemoved() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::StreamedUnaryHandler< ::firmament::ResourceUID, ::firmament::NodeRemovedResponse>(std::bind(&WithStreamedUnaryMethod_NodeRemoved<BaseClass>::StreamedNodeRemoved, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NodeRemoved() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NodeRemoved(::grpc::ServerContext* context, const ::firmament::ResourceUID* request, ::firmament::NodeRemovedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNodeRemoved(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::firmament::ResourceUID,::firmament::NodeRemovedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_NodeUpdated : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_NodeUpdated() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::StreamedUnaryHandler< ::firmament::ResourceTopologyNodeDescriptor, ::firmament::NodeUpdatedResponse>(std::bind(&WithStreamedUnaryMethod_NodeUpdated<BaseClass>::StreamedNodeUpdated, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_NodeUpdated() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status NodeUpdated(::grpc::ServerContext* context, const ::firmament::ResourceTopologyNodeDescriptor* request, ::firmament::NodeUpdatedResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedNodeUpdated(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::firmament::ResourceTopologyNodeDescriptor,::firmament::NodeUpdatedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddTaskStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddTaskStats() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::StreamedUnaryHandler< ::firmament::TaskStats, ::firmament::TaskStatsResponse>(std::bind(&WithStreamedUnaryMethod_AddTaskStats<BaseClass>::StreamedAddTaskStats, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddTaskStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddTaskStats(::grpc::ServerContext* context, const ::firmament::TaskStats* request, ::firmament::TaskStatsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddTaskStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::firmament::TaskStats,::firmament::TaskStatsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddNodeStats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddNodeStats() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::StreamedUnaryHandler< ::firmament::ResourceStats, ::firmament::ResourceStatsResponse>(std::bind(&WithStreamedUnaryMethod_AddNodeStats<BaseClass>::StreamedAddNodeStats, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddNodeStats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddNodeStats(::grpc::ServerContext* context, const ::firmament::ResourceStats* request, ::firmament::ResourceStatsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddNodeStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::firmament::ResourceStats,::firmament::ResourceStatsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Schedule<WithStreamedUnaryMethod_TaskCompleted<WithStreamedUnaryMethod_TaskFailed<WithStreamedUnaryMethod_TaskRemoved<WithStreamedUnaryMethod_TaskSubmitted<WithStreamedUnaryMethod_TaskUpdated<WithStreamedUnaryMethod_NodeAdded<WithStreamedUnaryMethod_NodeFailed<WithStreamedUnaryMethod_NodeRemoved<WithStreamedUnaryMethod_NodeUpdated<WithStreamedUnaryMethod_AddTaskStats<WithStreamedUnaryMethod_AddNodeStats<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Schedule<WithStreamedUnaryMethod_TaskCompleted<WithStreamedUnaryMethod_TaskFailed<WithStreamedUnaryMethod_TaskRemoved<WithStreamedUnaryMethod_TaskSubmitted<WithStreamedUnaryMethod_TaskUpdated<WithStreamedUnaryMethod_NodeAdded<WithStreamedUnaryMethod_NodeFailed<WithStreamedUnaryMethod_NodeRemoved<WithStreamedUnaryMethod_NodeUpdated<WithStreamedUnaryMethod_AddTaskStats<WithStreamedUnaryMethod_AddNodeStats<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace firmament


#endif  // GRPC_scheduling_2ffirmament_5fscheduler_2eproto__INCLUDED
