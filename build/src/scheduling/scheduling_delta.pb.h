// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduling/scheduling_delta.proto

#ifndef PROTOBUF_scheduling_2fscheduling_5fdelta_2eproto__INCLUDED
#define PROTOBUF_scheduling_2fscheduling_5fdelta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace firmament {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_scheduling_2fscheduling_5fdelta_2eproto();
void protobuf_InitDefaults_scheduling_2fscheduling_5fdelta_2eproto();
void protobuf_AssignDesc_scheduling_2fscheduling_5fdelta_2eproto();
void protobuf_ShutdownFile_scheduling_2fscheduling_5fdelta_2eproto();

class SchedulingDelta;

enum SchedulingDelta_ChangeType {
  SchedulingDelta_ChangeType_NOOP = 0,
  SchedulingDelta_ChangeType_PLACE = 1,
  SchedulingDelta_ChangeType_PREEMPT = 2,
  SchedulingDelta_ChangeType_MIGRATE = 3,
  SchedulingDelta_ChangeType_SchedulingDelta_ChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SchedulingDelta_ChangeType_SchedulingDelta_ChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SchedulingDelta_ChangeType_IsValid(int value);
const SchedulingDelta_ChangeType SchedulingDelta_ChangeType_ChangeType_MIN = SchedulingDelta_ChangeType_NOOP;
const SchedulingDelta_ChangeType SchedulingDelta_ChangeType_ChangeType_MAX = SchedulingDelta_ChangeType_MIGRATE;
const int SchedulingDelta_ChangeType_ChangeType_ARRAYSIZE = SchedulingDelta_ChangeType_ChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SchedulingDelta_ChangeType_descriptor();
inline const ::std::string& SchedulingDelta_ChangeType_Name(SchedulingDelta_ChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SchedulingDelta_ChangeType_descriptor(), value);
}
inline bool SchedulingDelta_ChangeType_Parse(
    const ::std::string& name, SchedulingDelta_ChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SchedulingDelta_ChangeType>(
    SchedulingDelta_ChangeType_descriptor(), name, value);
}
// ===================================================================

class SchedulingDelta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:firmament.SchedulingDelta) */ {
 public:
  SchedulingDelta();
  virtual ~SchedulingDelta();

  SchedulingDelta(const SchedulingDelta& from);

  inline SchedulingDelta& operator=(const SchedulingDelta& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SchedulingDelta& default_instance();

  static const SchedulingDelta* internal_default_instance();

  void Swap(SchedulingDelta* other);

  // implements Message ----------------------------------------------

  inline SchedulingDelta* New() const { return New(NULL); }

  SchedulingDelta* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SchedulingDelta& from);
  void MergeFrom(const SchedulingDelta& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SchedulingDelta* other);
  void UnsafeMergeFrom(const SchedulingDelta& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SchedulingDelta_ChangeType ChangeType;
  static const ChangeType NOOP =
    SchedulingDelta_ChangeType_NOOP;
  static const ChangeType PLACE =
    SchedulingDelta_ChangeType_PLACE;
  static const ChangeType PREEMPT =
    SchedulingDelta_ChangeType_PREEMPT;
  static const ChangeType MIGRATE =
    SchedulingDelta_ChangeType_MIGRATE;
  static inline bool ChangeType_IsValid(int value) {
    return SchedulingDelta_ChangeType_IsValid(value);
  }
  static const ChangeType ChangeType_MIN =
    SchedulingDelta_ChangeType_ChangeType_MIN;
  static const ChangeType ChangeType_MAX =
    SchedulingDelta_ChangeType_ChangeType_MAX;
  static const int ChangeType_ARRAYSIZE =
    SchedulingDelta_ChangeType_ChangeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ChangeType_descriptor() {
    return SchedulingDelta_ChangeType_descriptor();
  }
  static inline const ::std::string& ChangeType_Name(ChangeType value) {
    return SchedulingDelta_ChangeType_Name(value);
  }
  static inline bool ChangeType_Parse(const ::std::string& name,
      ChangeType* value) {
    return SchedulingDelta_ChangeType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  ::google::protobuf::uint64 task_id() const;
  void set_task_id(::google::protobuf::uint64 value);

  // optional string resource_id = 2;
  void clear_resource_id();
  static const int kResourceIdFieldNumber = 2;
  const ::std::string& resource_id() const;
  void set_resource_id(const ::std::string& value);
  void set_resource_id(const char* value);
  void set_resource_id(const char* value, size_t size);
  ::std::string* mutable_resource_id();
  ::std::string* release_resource_id();
  void set_allocated_resource_id(::std::string* resource_id);

  // optional .firmament.SchedulingDelta.ChangeType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::firmament::SchedulingDelta_ChangeType type() const;
  void set_type(::firmament::SchedulingDelta_ChangeType value);

  // @@protoc_insertion_point(class_scope:firmament.SchedulingDelta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr resource_id_;
  ::google::protobuf::uint64 task_id_;
  int type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_scheduling_2fscheduling_5fdelta_2eproto_impl();
  friend void  protobuf_AddDesc_scheduling_2fscheduling_5fdelta_2eproto_impl();
  friend void protobuf_AssignDesc_scheduling_2fscheduling_5fdelta_2eproto();
  friend void protobuf_ShutdownFile_scheduling_2fscheduling_5fdelta_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SchedulingDelta> SchedulingDelta_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SchedulingDelta

// optional uint64 task_id = 1;
inline void SchedulingDelta::clear_task_id() {
  task_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SchedulingDelta::task_id() const {
  // @@protoc_insertion_point(field_get:firmament.SchedulingDelta.task_id)
  return task_id_;
}
inline void SchedulingDelta::set_task_id(::google::protobuf::uint64 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.SchedulingDelta.task_id)
}

// optional string resource_id = 2;
inline void SchedulingDelta::clear_resource_id() {
  resource_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SchedulingDelta::resource_id() const {
  // @@protoc_insertion_point(field_get:firmament.SchedulingDelta.resource_id)
  return resource_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SchedulingDelta::set_resource_id(const ::std::string& value) {
  
  resource_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:firmament.SchedulingDelta.resource_id)
}
inline void SchedulingDelta::set_resource_id(const char* value) {
  
  resource_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firmament.SchedulingDelta.resource_id)
}
inline void SchedulingDelta::set_resource_id(const char* value, size_t size) {
  
  resource_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firmament.SchedulingDelta.resource_id)
}
inline ::std::string* SchedulingDelta::mutable_resource_id() {
  
  // @@protoc_insertion_point(field_mutable:firmament.SchedulingDelta.resource_id)
  return resource_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SchedulingDelta::release_resource_id() {
  // @@protoc_insertion_point(field_release:firmament.SchedulingDelta.resource_id)
  
  return resource_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SchedulingDelta::set_allocated_resource_id(::std::string* resource_id) {
  if (resource_id != NULL) {
    
  } else {
    
  }
  resource_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_id);
  // @@protoc_insertion_point(field_set_allocated:firmament.SchedulingDelta.resource_id)
}

// optional .firmament.SchedulingDelta.ChangeType type = 3;
inline void SchedulingDelta::clear_type() {
  type_ = 0;
}
inline ::firmament::SchedulingDelta_ChangeType SchedulingDelta::type() const {
  // @@protoc_insertion_point(field_get:firmament.SchedulingDelta.type)
  return static_cast< ::firmament::SchedulingDelta_ChangeType >(type_);
}
inline void SchedulingDelta::set_type(::firmament::SchedulingDelta_ChangeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:firmament.SchedulingDelta.type)
}

inline const SchedulingDelta* SchedulingDelta::internal_default_instance() {
  return &SchedulingDelta_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::firmament::SchedulingDelta_ChangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firmament::SchedulingDelta_ChangeType>() {
  return ::firmament::SchedulingDelta_ChangeType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_scheduling_2fscheduling_5fdelta_2eproto__INCLUDED
