// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sim/event_desc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sim/event_desc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace firmament {

namespace {

const ::google::protobuf::Descriptor* EventDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventDescriptor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EventDescriptor_EventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sim_2fevent_5fdesc_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_sim_2fevent_5fdesc_2eproto() {
  protobuf_AddDesc_sim_2fevent_5fdesc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sim/event_desc.proto");
  GOOGLE_CHECK(file != NULL);
  EventDescriptor_descriptor_ = file->message_type(0);
  static const int EventDescriptor_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDescriptor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDescriptor, machine_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDescriptor, task_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDescriptor, job_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDescriptor, requested_cpu_cores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDescriptor, requested_ram_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDescriptor, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDescriptor, scheduling_class_),
  };
  EventDescriptor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EventDescriptor_descriptor_,
      EventDescriptor::internal_default_instance(),
      EventDescriptor_offsets_,
      -1,
      -1,
      -1,
      sizeof(EventDescriptor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventDescriptor, _internal_metadata_));
  EventDescriptor_EventType_descriptor_ = EventDescriptor_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sim_2fevent_5fdesc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EventDescriptor_descriptor_, EventDescriptor::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sim_2fevent_5fdesc_2eproto() {
  EventDescriptor_default_instance_.Shutdown();
  delete EventDescriptor_reflection_;
}

void protobuf_InitDefaults_sim_2fevent_5fdesc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  EventDescriptor_default_instance_.DefaultConstruct();
  EventDescriptor_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_sim_2fevent_5fdesc_2eproto_once_);
void protobuf_InitDefaults_sim_2fevent_5fdesc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_sim_2fevent_5fdesc_2eproto_once_,
                 &protobuf_InitDefaults_sim_2fevent_5fdesc_2eproto_impl);
}
void protobuf_AddDesc_sim_2fevent_5fdesc_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_sim_2fevent_5fdesc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024sim/event_desc.proto\022\tfirmament\"\342\002\n\017Ev"
    "entDescriptor\0222\n\004type\030\001 \001(\0162$.firmament."
    "EventDescriptor.EventType\022\022\n\nmachine_id\030"
    "\002 \001(\004\022\022\n\ntask_index\030\003 \001(\004\022\016\n\006job_id\030\004 \001("
    "\004\022\033\n\023requested_cpu_cores\030\005 \001(\002\022\025\n\rreques"
    "ted_ram\030\006 \001(\004\022\020\n\010priority\030\007 \001(\r\022\030\n\020sched"
    "uling_class\030\010 \001(\r\"\202\001\n\tEventType\022\017\n\013ADD_M"
    "ACHINE\020\000\022\022\n\016REMOVE_MACHINE\020\001\022\022\n\016UPDATE_M"
    "ACHINE\020\002\022\024\n\020TASK_END_RUNTIME\020\003\022\017\n\013TASK_S"
    "UBMIT\020\004\022\025\n\021MACHINE_HEARTBEAT\020\005b\006proto3", 398);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sim/event_desc.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sim_2fevent_5fdesc_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sim_2fevent_5fdesc_2eproto_once_);
void protobuf_AddDesc_sim_2fevent_5fdesc_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sim_2fevent_5fdesc_2eproto_once_,
                 &protobuf_AddDesc_sim_2fevent_5fdesc_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sim_2fevent_5fdesc_2eproto {
  StaticDescriptorInitializer_sim_2fevent_5fdesc_2eproto() {
    protobuf_AddDesc_sim_2fevent_5fdesc_2eproto();
  }
} static_descriptor_initializer_sim_2fevent_5fdesc_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* EventDescriptor_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventDescriptor_EventType_descriptor_;
}
bool EventDescriptor_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EventDescriptor_EventType EventDescriptor::ADD_MACHINE;
const EventDescriptor_EventType EventDescriptor::REMOVE_MACHINE;
const EventDescriptor_EventType EventDescriptor::UPDATE_MACHINE;
const EventDescriptor_EventType EventDescriptor::TASK_END_RUNTIME;
const EventDescriptor_EventType EventDescriptor::TASK_SUBMIT;
const EventDescriptor_EventType EventDescriptor::MACHINE_HEARTBEAT;
const EventDescriptor_EventType EventDescriptor::EventType_MIN;
const EventDescriptor_EventType EventDescriptor::EventType_MAX;
const int EventDescriptor::EventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EventDescriptor::kTypeFieldNumber;
const int EventDescriptor::kMachineIdFieldNumber;
const int EventDescriptor::kTaskIndexFieldNumber;
const int EventDescriptor::kJobIdFieldNumber;
const int EventDescriptor::kRequestedCpuCoresFieldNumber;
const int EventDescriptor::kRequestedRamFieldNumber;
const int EventDescriptor::kPriorityFieldNumber;
const int EventDescriptor::kSchedulingClassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EventDescriptor::EventDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_sim_2fevent_5fdesc_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:firmament.EventDescriptor)
}

void EventDescriptor::InitAsDefaultInstance() {
}

EventDescriptor::EventDescriptor(const EventDescriptor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:firmament.EventDescriptor)
}

void EventDescriptor::SharedCtor() {
  ::memset(&machine_id_, 0, reinterpret_cast<char*>(&scheduling_class_) -
    reinterpret_cast<char*>(&machine_id_) + sizeof(scheduling_class_));
  _cached_size_ = 0;
}

EventDescriptor::~EventDescriptor() {
  // @@protoc_insertion_point(destructor:firmament.EventDescriptor)
  SharedDtor();
}

void EventDescriptor::SharedDtor() {
}

void EventDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventDescriptor_descriptor_;
}

const EventDescriptor& EventDescriptor::default_instance() {
  protobuf_InitDefaults_sim_2fevent_5fdesc_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<EventDescriptor> EventDescriptor_default_instance_;

EventDescriptor* EventDescriptor::New(::google::protobuf::Arena* arena) const {
  EventDescriptor* n = new EventDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EventDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:firmament.EventDescriptor)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EventDescriptor, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EventDescriptor*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(machine_id_, scheduling_class_);

#undef ZR_HELPER_
#undef ZR_

}

bool EventDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:firmament.EventDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .firmament.EventDescriptor.EventType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::firmament::EventDescriptor_EventType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_machine_id;
        break;
      }

      // optional uint64 machine_id = 2;
      case 2: {
        if (tag == 16) {
         parse_machine_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &machine_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_task_index;
        break;
      }

      // optional uint64 task_index = 3;
      case 3: {
        if (tag == 24) {
         parse_task_index:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_job_id;
        break;
      }

      // optional uint64 job_id = 4;
      case 4: {
        if (tag == 32) {
         parse_job_id:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_requested_cpu_cores;
        break;
      }

      // optional float requested_cpu_cores = 5;
      case 5: {
        if (tag == 45) {
         parse_requested_cpu_cores:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &requested_cpu_cores_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_requested_ram;
        break;
      }

      // optional uint64 requested_ram = 6;
      case 6: {
        if (tag == 48) {
         parse_requested_ram:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &requested_ram_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_priority;
        break;
      }

      // optional uint32 priority = 7;
      case 7: {
        if (tag == 56) {
         parse_priority:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &priority_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_scheduling_class;
        break;
      }

      // optional uint32 scheduling_class = 8;
      case 8: {
        if (tag == 64) {
         parse_scheduling_class:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scheduling_class_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:firmament.EventDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:firmament.EventDescriptor)
  return false;
#undef DO_
}

void EventDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:firmament.EventDescriptor)
  // optional .firmament.EventDescriptor.EventType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint64 machine_id = 2;
  if (this->machine_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->machine_id(), output);
  }

  // optional uint64 task_index = 3;
  if (this->task_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->task_index(), output);
  }

  // optional uint64 job_id = 4;
  if (this->job_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->job_id(), output);
  }

  // optional float requested_cpu_cores = 5;
  if (this->requested_cpu_cores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->requested_cpu_cores(), output);
  }

  // optional uint64 requested_ram = 6;
  if (this->requested_ram() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->requested_ram(), output);
  }

  // optional uint32 priority = 7;
  if (this->priority() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->priority(), output);
  }

  // optional uint32 scheduling_class = 8;
  if (this->scheduling_class() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->scheduling_class(), output);
  }

  // @@protoc_insertion_point(serialize_end:firmament.EventDescriptor)
}

::google::protobuf::uint8* EventDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:firmament.EventDescriptor)
  // optional .firmament.EventDescriptor.EventType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint64 machine_id = 2;
  if (this->machine_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->machine_id(), target);
  }

  // optional uint64 task_index = 3;
  if (this->task_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->task_index(), target);
  }

  // optional uint64 job_id = 4;
  if (this->job_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->job_id(), target);
  }

  // optional float requested_cpu_cores = 5;
  if (this->requested_cpu_cores() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->requested_cpu_cores(), target);
  }

  // optional uint64 requested_ram = 6;
  if (this->requested_ram() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->requested_ram(), target);
  }

  // optional uint32 priority = 7;
  if (this->priority() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->priority(), target);
  }

  // optional uint32 scheduling_class = 8;
  if (this->scheduling_class() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->scheduling_class(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:firmament.EventDescriptor)
  return target;
}

size_t EventDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firmament.EventDescriptor)
  size_t total_size = 0;

  // optional .firmament.EventDescriptor.EventType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional uint64 machine_id = 2;
  if (this->machine_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->machine_id());
  }

  // optional uint64 task_index = 3;
  if (this->task_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->task_index());
  }

  // optional uint64 job_id = 4;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->job_id());
  }

  // optional float requested_cpu_cores = 5;
  if (this->requested_cpu_cores() != 0) {
    total_size += 1 + 4;
  }

  // optional uint64 requested_ram = 6;
  if (this->requested_ram() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->requested_ram());
  }

  // optional uint32 priority = 7;
  if (this->priority() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->priority());
  }

  // optional uint32 scheduling_class = 8;
  if (this->scheduling_class() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scheduling_class());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firmament.EventDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EventDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EventDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firmament.EventDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firmament.EventDescriptor)
    UnsafeMergeFrom(*source);
  }
}

void EventDescriptor::MergeFrom(const EventDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firmament.EventDescriptor)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void EventDescriptor::UnsafeMergeFrom(const EventDescriptor& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.machine_id() != 0) {
    set_machine_id(from.machine_id());
  }
  if (from.task_index() != 0) {
    set_task_index(from.task_index());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.requested_cpu_cores() != 0) {
    set_requested_cpu_cores(from.requested_cpu_cores());
  }
  if (from.requested_ram() != 0) {
    set_requested_ram(from.requested_ram());
  }
  if (from.priority() != 0) {
    set_priority(from.priority());
  }
  if (from.scheduling_class() != 0) {
    set_scheduling_class(from.scheduling_class());
  }
}

void EventDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firmament.EventDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventDescriptor::CopyFrom(const EventDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firmament.EventDescriptor)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool EventDescriptor::IsInitialized() const {

  return true;
}

void EventDescriptor::Swap(EventDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EventDescriptor::InternalSwap(EventDescriptor* other) {
  std::swap(type_, other->type_);
  std::swap(machine_id_, other->machine_id_);
  std::swap(task_index_, other->task_index_);
  std::swap(job_id_, other->job_id_);
  std::swap(requested_cpu_cores_, other->requested_cpu_cores_);
  std::swap(requested_ram_, other->requested_ram_);
  std::swap(priority_, other->priority_);
  std::swap(scheduling_class_, other->scheduling_class_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EventDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventDescriptor_descriptor_;
  metadata.reflection = EventDescriptor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EventDescriptor

// optional .firmament.EventDescriptor.EventType type = 1;
void EventDescriptor::clear_type() {
  type_ = 0;
}
::firmament::EventDescriptor_EventType EventDescriptor::type() const {
  // @@protoc_insertion_point(field_get:firmament.EventDescriptor.type)
  return static_cast< ::firmament::EventDescriptor_EventType >(type_);
}
void EventDescriptor::set_type(::firmament::EventDescriptor_EventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:firmament.EventDescriptor.type)
}

// optional uint64 machine_id = 2;
void EventDescriptor::clear_machine_id() {
  machine_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventDescriptor::machine_id() const {
  // @@protoc_insertion_point(field_get:firmament.EventDescriptor.machine_id)
  return machine_id_;
}
void EventDescriptor::set_machine_id(::google::protobuf::uint64 value) {
  
  machine_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.EventDescriptor.machine_id)
}

// optional uint64 task_index = 3;
void EventDescriptor::clear_task_index() {
  task_index_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventDescriptor::task_index() const {
  // @@protoc_insertion_point(field_get:firmament.EventDescriptor.task_index)
  return task_index_;
}
void EventDescriptor::set_task_index(::google::protobuf::uint64 value) {
  
  task_index_ = value;
  // @@protoc_insertion_point(field_set:firmament.EventDescriptor.task_index)
}

// optional uint64 job_id = 4;
void EventDescriptor::clear_job_id() {
  job_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventDescriptor::job_id() const {
  // @@protoc_insertion_point(field_get:firmament.EventDescriptor.job_id)
  return job_id_;
}
void EventDescriptor::set_job_id(::google::protobuf::uint64 value) {
  
  job_id_ = value;
  // @@protoc_insertion_point(field_set:firmament.EventDescriptor.job_id)
}

// optional float requested_cpu_cores = 5;
void EventDescriptor::clear_requested_cpu_cores() {
  requested_cpu_cores_ = 0;
}
float EventDescriptor::requested_cpu_cores() const {
  // @@protoc_insertion_point(field_get:firmament.EventDescriptor.requested_cpu_cores)
  return requested_cpu_cores_;
}
void EventDescriptor::set_requested_cpu_cores(float value) {
  
  requested_cpu_cores_ = value;
  // @@protoc_insertion_point(field_set:firmament.EventDescriptor.requested_cpu_cores)
}

// optional uint64 requested_ram = 6;
void EventDescriptor::clear_requested_ram() {
  requested_ram_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 EventDescriptor::requested_ram() const {
  // @@protoc_insertion_point(field_get:firmament.EventDescriptor.requested_ram)
  return requested_ram_;
}
void EventDescriptor::set_requested_ram(::google::protobuf::uint64 value) {
  
  requested_ram_ = value;
  // @@protoc_insertion_point(field_set:firmament.EventDescriptor.requested_ram)
}

// optional uint32 priority = 7;
void EventDescriptor::clear_priority() {
  priority_ = 0u;
}
::google::protobuf::uint32 EventDescriptor::priority() const {
  // @@protoc_insertion_point(field_get:firmament.EventDescriptor.priority)
  return priority_;
}
void EventDescriptor::set_priority(::google::protobuf::uint32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:firmament.EventDescriptor.priority)
}

// optional uint32 scheduling_class = 8;
void EventDescriptor::clear_scheduling_class() {
  scheduling_class_ = 0u;
}
::google::protobuf::uint32 EventDescriptor::scheduling_class() const {
  // @@protoc_insertion_point(field_get:firmament.EventDescriptor.scheduling_class)
  return scheduling_class_;
}
void EventDescriptor::set_scheduling_class(::google::protobuf::uint32 value) {
  
  scheduling_class_ = value;
  // @@protoc_insertion_point(field_set:firmament.EventDescriptor.scheduling_class)
}

inline const EventDescriptor* EventDescriptor::internal_default_instance() {
  return &EventDescriptor_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace firmament

// @@protoc_insertion_point(global_scope)
